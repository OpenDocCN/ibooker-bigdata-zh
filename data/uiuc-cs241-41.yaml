- en: 'Deadlock, Part 1: Resource Allocation Graph'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 死锁，第1部分：资源分配图
- en: What is a Resource Allocation Graph?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是资源分配图？
- en: A resource allocation graph tracks which resource is held by which process and
    which process is waiting for a resource of a particular type. It is very powerful
    and simple tool to illustrate how interacting processes can deadlock. If a process
    is *using* a resource, an arrow is drawn from the resource node to the process
    node. If a process is *requesting* a resource, an arrow is drawn from the process
    node to the resource node.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 资源分配图跟踪哪个进程持有哪个资源，以及哪个进程正在等待特定类型的资源。这是一个非常强大而简单的工具，用来说明交互进程如何发生死锁。如果一个进程*使用*一个资源，就从资源节点到进程节点画一个箭头。如果一个进程*请求*一个资源，就从进程节点到资源节点画一个箭头。
- en: If there is a cycle in the Resource Allocation Graph and each resource in the
    cycle provides only one instance, then the processes will deadlock. For example,
    if process 1 holds resource A, process 2 holds resource B and process 1 is waiting
    for B and process 2 is waiting for A, then process 1 and 2 process will be deadlocked.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果资源分配图中有一个循环，并且循环中的每个资源只提供一个实例，那么进程将发生死锁。例如，如果进程1持有资源A，进程2持有资源B，进程1正在等待B，进程2正在等待A，那么进程1和2将发生死锁。
- en: Here's another example, that shows Processes 1 and 2 acquiring resources 1 and
    2 while process 3 is waiting to acquire both resources. In this example there
    is no deadlock because there is no circular dependency.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有另一个例子，显示了进程1和2获取资源1和2，而进程3正在等待获取这两个资源。在这个例子中，没有死锁，因为没有循环依赖。
- en: '![ResourceAllocationGraph-Ex1.png](../Images/1e88c8266f91417008f275b2eec36df7.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![ResourceAllocationGraph-Ex1.png](../Images/1e88c8266f91417008f275b2eec36df7.jpg)'
- en: Deadlock!
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 死锁！
- en: A lot of times, we don't know the specific order that a resource may be acquired
    so we can draw the graph directed.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，我们不知道资源可能被获取的具体顺序，所以我们可以绘制有向图。
- en: '![](../Images/27f5f2c018c60372297e6cf5790934bc.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/27f5f2c018c60372297e6cf5790934bc.jpg)'
- en: As a possibility matrix. Then we can draw arrows and see if there is a directed
    version that would lead us to a deadlock.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为可能性矩阵。然后我们可以画箭头，看看是否有一个有向版本会导致死锁。
- en: '![RAG Deadlock](../Images/2d19ee5fcdb522a5a43850cd1746a70a.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![RAG 死锁](../Images/2d19ee5fcdb522a5a43850cd1746a70a.jpg)'
- en: Consider the following resource allocation graph (assume that the processes
    ask for exclusive access to the file). If you have a bunch of processes running
    and they request resources and the operating system ends up in this state, you
    deadlock! You may not see this because the operating system may **preempt* some
    processes breaking the cycle but there is still a change that your three lonely
    processes could deadlock. You can also make these kind of graphs with `make` and
    rule dependencies (with our parmake MP for example).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下资源分配图（假设进程请求对文件的独占访问）。如果有一堆进程在运行，并且它们请求资源，操作系统最终处于这种状态，你就会发生死锁！你可能看不到这一点，因为操作系统可能会**抢占**一些进程来打破循环，但你的三个孤独进程仍然有可能发生死锁。你也可以使用`make`和规则依赖关系（例如我们的parmake
    MP）制作这种类型的图表。
- en: '![](../Images/bfa1f1caf816f2b844ae5b14da43f11b.svg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bfa1f1caf816f2b844ae5b14da43f11b.svg)'

- en: Programming Tricks, Part 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程技巧，第1部分
- en: Use `cat` as your IDE
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将`cat`用作你的IDE
- en: Who needs an editor? IDE? We can just use `cat`! You've seen `cat` being used
    to read the contents of files but it can also be used to read the standard-input
    and send it back to standard output.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 谁需要编辑器？IDE？我们可以只用`cat`！你已经看到`cat`被用来读取文件的内容，但它也可以用来读取标准输入并将其发送回标准输出。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To finish reading from the input stream close the input stream by pressing `CTRL-D`
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成从输入流中读取，请按`CTRL-D`关闭输入流
- en: 'Let''s use `cat` to send standard input to a file. We will use ''>'' to redirect
    its output to a file:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`cat`将标准输入发送到文件。我们将使用'>'将其输出重定向到文件：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: (Be careful! Deletes and undos are not allowed...) Press `CTRL-D` when finished.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: （小心！不允许删除和撤销……）完成后按`CTRL-D`。
- en: Edit your code with `perl` regular expressions (aka "remember your perl pie")
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用`perl`正则表达式编辑你的代码（又名“记住你的perl pie”）
- en: A useful trick if you have several text files (e.g. source code) to change is
    to use regular expressions. `perl` makes this very easy to edit files in place.
    Just remember 'perl pie' and search on the web...
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有几个文本文件（例如源代码）要更改，一个有用的技巧是使用正则表达式。`perl`使得在原地编辑文件变得非常容易。只需记住'perl pie'并在网上搜索……
- en: 'An example. Suppose we want to change the sequence "Hi" to "Bye" in all .c
    files in the current directory. Then we can write a simple substitution pattern
    that will be executed on each line at time in all files:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子。假设我们想要在当前目录中的所有.c文件中将序列“Hi”更改为“Bye”。然后我们可以编写一个简单的替换模式，它将在所有文件中的每一行上执行：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: (Don't panic if you get it wrong, original files are still there; they just
    have the extension .bak) Obviously there's a lot more you can do with regular
    expressions than changing Hi to Bye.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: （如果你搞错了，不要惊慌，原始文件仍然存在；它们只是有扩展名.bak）显然，你可以用正则表达式做的事情远不止将Hi改为Bye。
- en: Use your shell `!!`
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用你的shell`!!`
- en: To re-run the last command just type `!!` and press `return` To re-run the last
    command that started with g type `!g` and press `return`
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要重新运行上一个命令，只需输入`!!`并按`return`键。要重新运行以g开头的上一个命令，只需输入`!g`并按`return`键。
- en: Use your shell `&&`
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用你的shell`&&`
- en: Tired of running `make` or `gcc` and then running the program if it compiled
    OK? Instead, use && to chain these commands together
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 厌倦了运行`make`或`gcc`，然后运行程序（如果编译成功）？相反，使用&&将这些命令链接在一起
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Make can do more than make
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Make可以做的不仅仅是make
- en: You might also try putting a line in your Makefile that will compile, and then
    run your program.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以尝试在你的Makefile中放一行代码来编译，然后运行你的程序。
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then running
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: will make sure any changes you've made are compiled, and run your program in
    one go. Also good for testing many inputs at once. Although you probably would
    just rather write a regular shell script for that.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将确保你所做的任何更改都被编译，并一次性运行你的程序。也适用于一次性测试多个输入。尽管你可能更愿意为此编写一个常规的shell脚本。
- en: Is your neighbor too productive? C pre-procesors to the rescue!
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你的邻居太高产了吗？C预处理器来拯救！
- en: Use the C pre-processor to redefine common keywords e.g.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用C预处理器重新定义常见关键字，例如
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Protip: Put this line inside one of the standard includes e.g. /usr/include/stdio.h'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 专业提示：将这行代码放在标准包含文件中，例如/usr/include/stdio.h
- en: Who needs functions when you C have the preprocessor
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当你C有预处理器时，谁还需要函数
- en: OK, so this is more of a gotcha. Be careful when using macros that look like
    functions...
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这更像是一个陷阱。在使用看起来像函数的宏时要小心……
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A perfectly reasonable definition of a minimum of a and b. However the pre-processor
    is just a simple text wrangler so precedence can bite you:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: a和b的最小合理定义。然而，预处理器只是一个简单的文本处理程序，所以优先级可能会让你吃亏：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Is expanded to
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展为
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A partial fix is to wrap every argument with `()` and also the whole expression
    with ():'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个部分的修复是用`()`包裹每个参数，还有整个表达式用()包裹：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: However this is still *not* a function! For example can you see why `min(i++,10)`
    might increment i once or twice!?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而这仍然*不是*一个函数！例如，你能看出为什么`min(i++,10)`可能会使i增加一次还是两次吗！？

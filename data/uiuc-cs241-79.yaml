- en: 'Signals, Part 4: Sigaction'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号，第4部分：Sigaction
- en: How and why do I use `sigaction` ?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '我如何使用`sigaction`？ '
- en: You should use `sigaction` instead of `signal` because it has better defined
    semantics. `signal` on different operating system does different things which
    is **bad** `sigaction` is more portable and is better defined for threads if need
    be.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该使用`sigaction`而不是`signal`，因为它具有更好定义的语义。不同操作系统上的`signal`会执行不同的操作，这是**不好的**，`sigaction`更具可移植性，如果需要，对于线程更好地定义。
- en: To change the "signal disposition" of a process - i.e. what happens when a signal
    is delivered to your process - use `sigaction`
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改进程的“信号处理方式” - 即当信号传递到您的进程时会发生什么 - 使用`sigaction`
- en: You can use system call `sigaction` to set the current handler for a signal
    or read the current signal handler for a particular signal.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用系统调用`sigaction`来设置信号的当前处理程序，或者读取特定信号的当前信号处理程序。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The sigaction struct includes two callback functions (we will only look at the
    'handler' version), a signal mask and a flags field -
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: sigaction结构包括两个回调函数（我们只会看'handler'版本），一个信号掩码和一个标志字段。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How do I convert a `signal` call into the equivalent `sigaction` call?
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何将`signal`调用转换为等效的`sigaction`调用？
- en: Suppose you installed a signal handler for the alarm signal,
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您为警报信号安装了信号处理程序，
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The equivalent `sigaction` code is:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 等效的`sigaction`代码是：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: However, we typically may also set the mask and the flags field. The mask is
    a temporary signal mask used during the signal handler execution. The SA_RESTART
    flag will automatically restart some (but not all) system calls that otherwise
    would have returned early (with EINTR error). The latter means we can simplify
    the rest of code somewhat because a restart loop may no longer be required.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们通常也可以设置掩码和标志字段。掩码是在信号处理程序执行期间使用的临时信号掩码。SA_RESTART标志将自动重新启动一些（但不是所有）否则会提前返回（带有EINTR错误）的系统调用。后者意味着我们可以在一定程度上简化其余代码，因为可能不再需要重启循环。
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How do I use sigwait?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何使用sigwait？
- en: Sigwait can be used to read one pending signal at a time. `sigwait` is used
    to synchronously wait for signals, rather than handle them in a callback. A typical
    use of sigwait in a multi-threaded program is shown below. Notice that the thread
    signal mask is set first (and will be inherited by new threads). This prevents
    signals from being *delivered* so they will remain in a pending state until sigwait
    is called. Also notice the same set sigset_t variable is used by sigwait - except
    rather than setting the set of blocked signals it is being used as the set of
    signals that sigwait can catch and return.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Sigwait可以用来一次读取一个挂起的信号。`sigwait`用于同步等待信号，而不是在回调中处理它们。多线程程序中典型的sigwait用法如下所示。请注意，线程信号掩码首先被设置（并将被新线程继承）。这可以防止信号被*传递*，因此它们将保持挂起状态，直到调用sigwait。还要注意，相同的设置sigset_t变量被sigwait使用
    - 除了设置被阻塞信号的集合之外，它被用作sigwait可以捕获和返回的信号集合。
- en: One advantage of writing a custom signal handling thread (such as the example
    below) rather than a callback function is that you can now use many more C library
    and system functions that otherwise could not be safely used in a signal handler
    because they are not async signal-safe.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 编写自定义信号处理线程（如下面的示例）的一个优点是，现在您可以使用更多的C库和系统函数，否则不能安全地在信号处理程序中使用，因为它们不是异步信号安全的。
- en: Based on `http://pubs.opengroup.org/onlinepubs/009695399/functions/pthread_sigmask.html`
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 基于`http://pubs.opengroup.org/onlinepubs/009695399/functions/pthread_sigmask.html`
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'

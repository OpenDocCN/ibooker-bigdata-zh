- en: 'Files, Part 1: Working with files'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件，第1部分：处理文件
- en: Two types of files
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 两种类型的文件
- en: On linux, there are two abstractions with files. The first is the linux `fd`
    level abstraction that means you can use
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上，有两种文件抽象。第一种是Linux的`fd`级别抽象，这意味着你可以使用
- en: '`open`'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`打开`'
- en: '`read`'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`读`'
- en: '`write`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`写`'
- en: '`close`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`关闭`'
- en: '`lseek`'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lseek`'
- en: '`fcntl` ...'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fcntl` ...'
- en: And so on. The linux interface is very powerful and expressive, but sometimes
    we need portability (for example if we are writing for a mac or windows). This
    is where C's abstraction comes into play. On different operating systems, C uses
    the low level functions to create a wrapper around files you can use everywhere,
    meaning that C on linux uses the above calls. C has a few of the following
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 等等。Linux接口非常强大和富有表现力，但有时我们需要可移植性（例如，如果我们在为Mac或Windows编写代码）。这就是C的抽象发挥作用的地方。在不同的操作系统上，C使用低级函数来创建一个文件的包装器，你可以在任何地方使用，这意味着Linux上的C使用上述调用。C有以下几种
- en: '`fopen`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fopen`'
- en: '`fread` or `fgetc/fgets` or `fscanf`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fread`或`fgetc/fgets`或`fscanf`'
- en: '`fwrite` or `fprintf`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fwrite`或`fprintf`'
- en: '`fclose`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fclose`'
- en: '`fflush`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fflush`'
- en: But you don't get the expressiveness that linux gives you with system calls
    you can convert back and forth between them with `int fileno(FILE* stream)` and
    `FILE* fdopen(int fd...)`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但你无法获得Linux通过系统调用给你的表达能力，你可以在它们之间进行转换，使用`int fileno(FILE* stream)`和`FILE* fdopen(int
    fd...)`。
- en: Another important aspect to note is the C files are **buffered** meaning that
    there contents may not be written write away by default. You can can change that
    with C options.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的方面要注意的是C文件是**缓冲的**，这意味着它们的内容可能不会立即被写入。你可以通过C选项来改变这一点。
- en: How do I tell how large a file is?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我怎么知道文件有多大？
- en: 'For files less than the size of a long, using fseek and ftell is a simple way
    to accomplish this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于小于long的大小的文件，使用fseek和ftell是一种简单的方法来实现这一点：
- en: Move to the end of the file and find out the current position.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 移动到文件的末尾并找出当前位置。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This tells us the current position in the file in bytes - i.e. the length of
    the file!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们文件中的当前位置，以字节为单位 - 即文件的长度！
- en: '`fseek` can also be used to set the absolute position.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`fseek`也可以用来设置绝对位置。'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: All future reads and writes in the parent or child processes will honor this
    position. Note writing or reading from the file will change the current position.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所有父进程或子进程中的未来读写操作都将遵守这个位置。请注意，从文件中写入或读取将改变当前位置。
- en: See the man pages for fseek and ftell for more information.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 查看fseek和ftell的man页面以获取更多信息。
- en: But try not to do this
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 但尽量不要这样做
- en: '**Note: This is not recommended in the usual case because of a quirk with the
    C language**. That quirk is that longs only need to be **4 Bytes big** meaning
    that the maximum size that ftell can return is a little under 2 Gigabytes (which
    we know nowadays our files could be hundreds of gigabytes or even terabytes on
    a distributed file system). What should we do instead? Use `stat`! We will cover
    stat in a later part but here is some code that will tell you the size of the
    file'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：这在通常情况下是不推荐的，因为C语言有一个怪癖**。这个怪癖是long只需要**4个字节**大，这意味着ftell能返回的最大大小略小于2GB（而我们现在知道我们的文件可能是数百GB甚至分布式文件系统上的TB）。我们应该怎么办呢？使用`stat`！我们将在后面的部分介绍stat，但这里有一些代码可以告诉你文件的大小'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: buf.st_size is of type off_t which is big enough for *insanely* large files.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: buf.st_size的类型是off_t，对于*极大*的文件来说足够大。
- en: What happens if a child process closes a filestream using `fclose` or `close`?
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果子进程使用`fclose`或`close`关闭文件流会发生什么？
- en: Closing a file stream is unique to each process. Other processes can continue
    to use their own file-handle. Remember, everything is copied over when a child
    is created, even the relative positions of the files.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭文件流对每个进程都是独特的。其他进程可以继续使用自己的文件句柄。记住，当创建一个子进程时，甚至文件的相对位置也会被复制过去。
- en: How about mmap for files?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件的mmap怎么样？
- en: One of the general uses for mmap is to map a file to memory. This does not mean
    that the file is malloc'ed to memory right away. Take the following code for example.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: mmap的一个常见用途是将文件映射到内存。这并不意味着文件会立即被malloc到内存中。以下面的代码为例。
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The kernel may say, "okay I see that you want to mmap the file into memory,
    so I'll reserve some space in your address space that is the length of the file".
    That means when you write to addr[0] that you are actually writing to the first
    byte of the file. The kernel can actually do some optimizations too. Instead of
    loading the file into memory, it may only load pages at a time because if the
    file is 1024 pages; you may only access 3 or 4 pages making loading the entire
    file a waste of time (that is why page faults are so powerful! They let the operating
    system take control of how much you use your files).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 内核可能会说：“好的，我看到你想要将文件映射到内存中，所以我将在你的地址空间中保留一些文件长度的空间”。这意味着当你写入addr[0]时，实际上是在文件的第一个字节上写入。内核实际上也可以进行一些优化。它可能一次只加载一页，因为如果文件有1024页；你可能只访问3或4页，这样加载整个文件就是浪费时间（这就是为什么页面错误是如此强大的原因！它们让操作系统控制你使用文件的程度）。
- en: For every mmap
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对于每个mmap
- en: Remember that once you are done `mmap`ping that you `munmap` to tell the operating
    system that you are no longer using the pages allocated, so the OS can write it
    back to disk and give you the addresses back in case you need to malloc later.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，一旦你完成了`mmap`，你需要`munmap`告诉操作系统你不再使用分配的页面，这样操作系统可以将它写回磁盘，并在以后需要malloc时将地址还给你。

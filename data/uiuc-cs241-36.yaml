- en: 'Synchronization, Part 6: Implementing a barrier'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步，第6部分：实现屏障
- en: How do I wait for N threads to reach a certain point before continuing onto
    the next step?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何等待N个线程在继续下一步之前到达某一点？
- en: Suppose we wanted to perform a multi-threaded calculation that has two stages,
    but we don't want to advance to the second stage until the first stage is completed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要执行一个多线程计算，它有两个阶段，但我们不想在第一阶段完成之前进入第二阶段。
- en: We could use a synchronization method called a **barrier**. When a thread reaches
    a barrier, it will wait at the barrier until all the threads reach the barrier,
    and then they'll all proceed together.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一种称为**屏障**的同步方法。当一个线程到达屏障时，它将在屏障处等待，直到所有线程到达屏障，然后它们将一起继续。
- en: Think of it like being out for a hike with some friends. You agree to wait for
    each other at the top of each hill (and you make a mental note how many are in
    your group). Say you're the first one to reach the top of the first hill. You'll
    wait there at the top for your friends. One by one, they'll arrive at the top,
    but nobody will continue until the last person in your group arrives. Once they
    do, you'll all proceed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，就像和一些朋友一起去远足。你们约定在每个山顶等待彼此（并且你心里记下了你的团队有多少人）。假设你是第一个到达第一个山顶的人。你会在山顶等待你的朋友。他们一个接一个地到达山顶，但直到你的团队中的最后一个人到达之前，没有人会继续前进。一旦他们到达，你们就会一起继续。
- en: Pthreads has a function `pthread_barrier_wait()` that implements this. You'll
    need to declare a `pthread_barrier_t` variable and initialize it with `pthread_barrier_init()`.
    `pthread_barrier_init()` takes the number of threads that will be participating
    in the barrier as an argument. [Here's an example.](https://github.com/angrave/SystemProgramming/wiki/Sample-program-using-pthread-barriers)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Pthreads有一个实现这一点的函数`pthread_barrier_wait()`。您需要声明一个`pthread_barrier_t`变量，并使用`pthread_barrier_init()`对其进行初始化。`pthread_barrier_init()`将参与屏障的线程数作为参数。[这里有一个例子。](https://github.com/angrave/SystemProgramming/wiki/Sample-program-using-pthread-barriers)
- en: Now let's implement our own barrier and use it to keep all the threads in sync
    in a large calculation.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现自己的屏障，并使用它在大型计算中同步所有线程。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The thread function has four main parts-
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 线程函数有四个主要部分-
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Our main thread will create the 16 threads and we will divide each calculation
    into 16 separate pieces. Each thread will be given a unique value (0,1,2,..15),
    so it can work on its own block. Since a (void*) type can hold small integers,
    we will pass the value of `i` by casting it to a void pointer.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主线程将创建16个线程，并将每个计算分成16个单独的部分。每个线程将被赋予一个唯一的值（0,1,2,..15），以便它可以处理自己的块。由于(void*)类型可以保存小整数，我们将通过将其转换为void指针来传递`i`的值。
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note, we will never dereference this pointer value as an actual memory location
    - we will just cast it straight back to an integer:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们永远不会将此指针值解引用为实际的内存位置-我们只会将其直接转换回整数：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After calculation 1 completes, we need to wait for the slower threads (unless
    we are the last thread!). So, keep track of the number of threads that have arrived
    at our barrier aka ''checkpoint'':'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第1个计算完成后，我们需要等待较慢的线程（除非我们是最后一个线程！）。因此，跟踪已经到达我们的屏障（也称为“检查点”）的线程数量：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: However the above code has a race condition (two threads might try to decrement
    `remain`) and the loop is a busy loop. We can do better! Let's use a condition
    variable and then we will use a broadcast/signal functions to wake up the sleeping
    threads.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，上述代码存在竞争条件（两个线程可能尝试递减`remain`），并且循环是一个忙循环。我们可以做得更好！让我们使用条件变量，然后我们将使用广播/信号函数唤醒睡眠的线程。
- en: A reminder, that a condition variable is similar to a house! Threads go there
    to sleep (`pthread_cond_wait`). You can choose to wake up one thread (`pthread_cond_signal`)
    or all of them (`pthread_cond_broadcast`). If there are no threads currently waiting
    then these two calls have no effect.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下，条件变量类似于一个房子！线程在那里睡觉（`pthread_cond_wait`）。您可以选择唤醒一个线程（`pthread_cond_signal`）或所有线程（`pthread_cond_broadcast`）。如果当前没有线程在等待，那么这两个调用将不起作用。
- en: A condition variable version is usually very similar to a busy loop incorrect
    solution - as we will show next. First, let's add a mutex and condition global
    variables and don't forget to initialize them in `main` ...
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 条件变量版本通常与忙循环不正确的解决方案非常相似-接下来我们将展示。首先，让我们添加一个互斥锁和条件全局变量，不要忘记在`main`中初始化它们...
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We will use the mutex to ensure that only one thread modifies `remain` at a
    time. The last arriving thread needs to wake up *all* sleeping threads - so we
    will use `pthread_cond_broadcast(&cv)` not `pthread_cond_signal`
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用互斥锁来确保只有一个线程在一次修改`remain`。最后到达的线程需要唤醒*所有*睡眠的线程-因此我们将使用`pthread_cond_broadcast(&cv)`而不是`pthread_cond_signal`
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When a thread enters `pthread_cond_wait`, it releases the mutex and sleeps.
    At some point in the future, it will be awoken. Once we bring a thread back from
    its sleep, before returning it must wait until it can lock the mutex. Notice that
    even if a sleeping thread wakes up early, it will check the while loop condition
    and re-enter wait if necessary.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当线程进入`pthread_cond_wait`时，它释放互斥锁并进入睡眠状态。在将来的某个时刻，它将被唤醒。一旦我们将线程从睡眠中唤醒，它在返回之前必须等待直到可以锁定互斥锁。请注意，即使一个睡眠的线程提前醒来，它也会检查while循环条件并在必要时重新进入等待。
- en: '**The above barrier is not reusable** Meaning that if we stick it into any
    old calculation loop there is a good chance that the code will encounter a condition
    where the barrier either deadlocks or a thread races ahead one iteration faster.
    Think about how you can make the above barrier reusable, meaning that if mutliple
    threads call `barrier_wait` in a loop then one can guarantee that they are on
    the same iteration.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**上述屏障不可重用**这意味着如果我们将其放入任何旧的计算循环中，代码很可能会遇到屏障死锁或线程比一个迭代更快的情况。思考一下如何使上述屏障可重用，这意味着如果多个线程在循环中调用`barrier_wait`，则可以保证它们处于相同的迭代。'

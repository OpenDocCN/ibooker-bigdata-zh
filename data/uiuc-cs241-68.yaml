- en: 'File System, Part 4: Working with directories'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件系统，第4部分：使用目录
- en: How do I find out if file (an inode) is a regular file or directory?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何找出文件（inode）是常规文件还是目录？
- en: 'Use the `S_ISDIR` macro to check the mode bits in the stat struct:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`S_ISDIR`宏来检查stat结构中的模式位：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note, later we will write robust code to verify that the stat call succeeds
    (returns 0); if the `stat` call fails, we should assume the stat struct content
    is arbitrary.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，稍后我们将编写健壮的代码来验证stat调用是否成功（返回0）；如果“stat”调用失败，我们应该假设stat结构内容是任意的。
- en: How do I recurse into subdirectories?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何递归进入子目录？
- en: First a puzzle - how many bugs can you find in the following code?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是一个谜题-在以下代码中你能找到多少个错误？
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Did you find all 5 bugs?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你找到了所有5个错误吗？
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What are symbolic links? How do they work? How do I make one?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是符号链接？它们是如何工作的？我怎么做一个？
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To create a symbolic link in the shell use `ln -s`
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要在shell中创建符号链接，请使用`ln -s`
- en: To read the contents of the link as just a file use `readlink`
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要将链接的内容读取为文件，请使用“readlink”
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To read the meta-(stat) information of a symbolic link use `lstat` not `stat`
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要读取符号链接的元（stat）信息，请使用“lstat”而不是“stat”
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Advantages of symbolic links
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 符号链接的优点
- en: Can refer to files that don't exist yet
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以引用尚不存在的文件
- en: Unlike hard links, can refer to directories as well as regular files
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与硬链接不同，可以引用目录以及常规文件
- en: Can refer to files (and directories) that exist outside of the current file
    system
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以引用存在于当前文件系统之外的文件（和目录）
- en: 'Main disadvantage: Slower than regular files and directories. When the links
    contents are read, they must be interpreted as a new path to the target file.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 主要缺点：比常规文件和目录慢。当读取链接的内容时，它们必须被解释为目标文件的新路径。
- en: What is `/dev/null` and when is it used?
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “/dev/null”是什么，何时使用？
- en: The file `/dev/null` is a great place to store bits that you never need to read!
    Bytes sent to `/dev/null/` are never stored - they are simply discarded. A common
    use of `/dev/null` is to discard standard output. For example,
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 文件“/dev/null”是存储您永远不需要读取的位的好地方！发送到“/dev/null/”的字节永远不会被存储-它们只是被丢弃。 “/dev/null”的常见用途是丢弃标准输出。例如，
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Why would I want to set a directory's sticky bit?
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么我想设置目录的粘性位？
- en: When a directory's sticky bit is set only the file's owner, the directory's
    owner, and the root user can rename (or delete) the file. This is useful when
    multiple users have write access to a common directory.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当目录的粘性位被设置时，只有文件的所有者、目录的所有者和root用户才能重命名（或删除）该文件。当多个用户对共享目录具有写访问权限时，这是有用的。
- en: A common use of the sticky bit is for the shared and writable `/tmp` directory.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 粘性位的常见用途是用于共享和可写的“/tmp”目录。
- en: Why do shell and script programs start with `#!/usr/bin/env python` ?
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么shell和脚本程序以“#!/usr/bin/env python”开头？
- en: 'Ans: For portability! While it is possible to write the fully qualified path
    to a python or perl interpreter, this approach is not portable because you may
    have installed python in a different directory.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 答：为了可移植性！虽然可能会将完全合格的路径写入python或perl解释器，但这种方法不是可移植的，因为您可能已将python安装在不同的目录中。
- en: To overcome this use the `env` utility is used to find and execute the program
    on the user's path. The env utility itself has historically been stored in `/usr/bin`
    - and it must be specified with an absolute path.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要克服这一点，使用“env”实用程序来查找并执行用户路径上的程序。env实用程序本身通常存储在“/usr/bin”中-必须使用绝对路径指定。
- en: How do I make 'hidden' files i.e. not listed by "ls"? How do I list them?
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何制作“隐藏”文件，即不被“ls”列出？我如何列出它们？
- en: Easy! Create files (or directories) that start with a "." - then (by default)
    they are not displayed by standard tools and utilities.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 简单！创建以“.”开头的文件（或目录）-然后（默认情况下）它们不会被标准工具和实用程序显示。
- en: This is often used to hide configuration files inside the user's home directory.
    For example `ssh` stores its preferences inside a directory called `.sshd`
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常用于将配置文件隐藏在用户的主目录中。例如，“ssh”将其首选项存储在一个名为“.sshd”的目录中。
- en: To list all files including the normally hidden entries use `ls` with `-a` option
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要列出所有文件，包括通常隐藏的条目，请使用带有“-a”选项的“ls”
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What happens if I turn off the execute bit on directories?
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果我关闭目录上的执行位会发生什么？
- en: The execute bit for a directory is used to control whether the directory contents
    is listable.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 目录的执行位用于控制目录内容是否可列出。
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: However when attempting to list the contents of the directory,
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当尝试列出目录的内容时，
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In other words, the directory itself is discoverable but its contents cannot
    be listed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，目录本身是可发现的，但其内容无法列出。
- en: What is file globbing (and who does it)?
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是文件通配（由谁执行）？
- en: Before executing the program the shell expands parameters into matching filenames.
    For example, if the current directory has three filenames that start with my (
    my1.txt mytext.txt myomy), then
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行程序之前，shell将参数扩展为匹配的文件名。例如，如果当前目录有三个以my开头的文件名（my1.txt mytext.txt myomy），那么
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Expands to
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展到
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is known as file globbing and is processed before the command is executed.
    ie the command's parameters are identical to manually typing every matching filename.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为文件通配，并在执行命令之前进行处理。即命令的参数与手动输入每个匹配的文件名相同。
- en: Creating secure directories
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建安全目录
- en: Suppose you created your own directory in /tmp and then set the permissions
    so that only you can use the directory (see below). Is this secure?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您在/tmp中创建了自己的目录，然后设置了权限，以便只有您可以使用该目录（见下文）。这安全吗？
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'There is a window of opportunity between when the directory is created and
    when it''s permissions are changed. This leads to several vulnerabilities that
    are based on a race condition (where an attacker modifies the directory in some
    way before the privileges are removed). Some examples include:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在目录创建和权限更改之间存在一个机会窗口。这导致了几个基于竞争条件的漏洞（攻击者在权限被移除之前以某种方式修改目录）。一些例子包括：
- en: Another user replaces `mystuff` with a hardlink to an existing file or directory
    owned by the second user, then they would be able to read and control the contents
    of the `mystuff` directory. Oh no - our secrets are no longer secret!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个用户用一个硬链接替换`mystuff`，指向第二个用户拥有的现有文件或目录，然后他们就能读取和控制`mystuff`目录的内容。哦不 - 我们的秘密不再是秘密了！
- en: However in this specific example the `/tmp` directory has the sticky bit set,
    so other users may not delete the `mystuff` directory, and the simple attack scenario
    described above is impossible. This does not mean that creating the directory
    and then later making the directory private is secure! A better version is to
    atomically create the directory with the correct permissions from its inception
    -
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这个特定的例子中，`/tmp`目录设置了粘滞位，因此其他用户可能无法删除`mystuff`目录，上述简单的攻击场景是不可能的。这并不意味着创建目录，然后稍后将目录设为私有是安全的！更好的版本是从一开始就原子性地创建具有正确权限的目录
    -
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How do I automatically create parent directories?
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何自动创建父目录？
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Will automatically create d1 and d2 if they don't exist.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它们不存在，将自动创建d1和d2。
- en: My default umask 022; what does this mean?
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我的默认umask是022；这是什么意思？
- en: The umask *subtracts* (reduces) permission bits from 777 and is used when new
    files and new directories are created by open,mkdir etc. Thus `022` (octal) means
    that group and other privileges will not include the writable bit . Each process
    (including the shell) has a current umask value. When forking, the child inherits
    the parent's umask value.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: umask *减去*（减少）权限位从777，并且在使用open、mkdir等创建新文件和新目录时使用。因此，`022`（八进制）表示组和其他权限不包括可写位。每个进程（包括shell）都有一个当前的umask值。在分叉时，子进程继承父进程的umask值。
- en: For example, by setting the umask to 077 in the shell, ensures that future file
    and directory creation will only be accessible to the current user,
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，通过在shell中将umask设置为077，可以确保将来创建的文件和目录只能被当前用户访问，
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As a code example, suppose a new file is created with `open()` and mode bits
    `666` (write and read bits for user,group and other):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个代码示例，假设使用`open()`创建一个新文件，并且模式位是`666`（用户、组和其他的写入和读取位）：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If umask is octal 022, then the permissions of the created file will be 0666
    & ~022 ie.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果umask是八进制022，那么创建的文件的权限将是0666和~022，即。
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How can I copy bytes from one file to another?
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我怎样才能从一个文件复制字节到另一个文件？
- en: Use the versatile `dd` command. For example, the following command copies 1
    MB of data from the file `/dev/urandom` to the file `/dev/null`. The data is copied
    as 1024 blocks of blocksize 1024 bytes.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多功能的`dd`命令。例如，以下命令将从文件`/dev/urandom`复制1MB的数据到文件`/dev/null`。数据被复制为1024个块，每个块大小为1024字节。
- en: '[PRE18]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Both the input and output files in the example above are virtual - they don't
    exist on a disk. This means the speed of the transfer is unaffected by hardware
    power. Instead they are part of the `dev` filesystem, which is virtual filesystem
    provided by the kernel. The virtual file `/dev/urandom` provides an infinite stream
    of random bytes, while the virtal file `/dev/null` ignores all bytes written to
    it. A common use of `/dev/null` is to discard the output of a command,
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上面示例中的输入和输出文件都是虚拟的 - 它们不存在于磁盘上。这意味着传输速度不受硬件功率的影响。相反，它们是内核提供的虚拟文件系统的一部分。虚拟文件`/dev/urandom`提供无限的随机字节流，而虚拟文件`/dev/null`会忽略写入它的所有字节。`/dev/null`的常见用途是丢弃命令的输出，
- en: '[PRE19]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Another commonly used /dev virtual file is `/dev/zero` which provides an infinite
    stream of zero bytes. For example, we can benchmark the operating system performance
    of reading stream zero bytes in the kernel into a process memory and writing the
    bytes back to the kernel without any disk I/O. Note the throughput (~20GB/s) is
    strongly dependent on blocksize. For small block sizes the overhead of additional
    `read` and `write` system calls will dominate.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常用的/dev虚拟文件是`/dev/zero`，它提供无限的零字节流。例如，我们可以对读取内核中的流零字节到进程内存并将字节写回内核而不进行任何磁盘I/O的操作系统性能进行基准测试。请注意，吞吐量（约20GB/s）强烈依赖于块大小。对于小块大小，额外的`read`和`write`系统调用的开销将占主导地位。
- en: '[PRE20]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: What happens when I touch a file?
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当我触摸一个文件时会发生什么？
- en: 'The `touch` executable creates file if it does not exist and also updates the
    file''s last modified time to be the current time. For example, we can make a
    new private file with the current time:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`touch`可执行文件如果文件不存在则创建文件，并且还会更新文件的最后修改时间为当前时间。例如，我们可以用当前时间创建一个新的私有文件：'
- en: '[PRE21]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: An example use of touch is to force make to recompile a file that is unchanged
    after modifying the compiler options inside the makefile. Remeber that make is
    'lazy' - it will compare the modified time of the source file with the corresponding
    output file to see if the file needs to be recompiled
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`touch`的一个示例用途是在修改makefile中的编译器选项后，强制make重新编译未更改的文件。记住，make是“懒惰的” - 它将比较源文件的修改时间和相应输出文件的修改时间，以确定是否需要重新编译文件。'
- en: '[PRE22]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[Go to File System: Part 5](https://github.com/angrave/SystemProgramming/wiki/File-System,-Part-5:-Virtual-file-systems)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[转到文件系统：第5部分](https://github.com/angrave/SystemProgramming/wiki/File-System,-Part-5:-Virtual-file-systems)'

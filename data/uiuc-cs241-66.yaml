- en: 'File System, Part 2: Files are inodes (everything else is just data...)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件系统，第2部分：文件是索引节点（其他一切都只是数据...）
- en: 'Big idea: Forget names of files: The ''inode'' is the file.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大意：忘记文件名：'索引节点'就是文件。
- en: It is common to think of the file name as the 'actual' file. It's not! Instead
    consider the inode as the file. The inode holds the meta-information (last accessed,
    ownership, size) and points to the disk blocks used to hold the file contents.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通常认为文件名是'实际'文件。不是！相反，将索引节点视为文件。索引节点包含元信息（最后访问、所有权、大小）并指向用于保存文件内容的磁盘块。
- en: So... How do we implement a directory?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么...我们如何实现一个目录？
- en: A directory is just a mapping of names to inode numbers. POSIX provides a small
    set of functions to read the filename and inode number for each entry (see below)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 目录只是名称到索引节点号的映射。POSIX提供了一小组函数来读取每个条目的文件名和索引节点号（见下文）
- en: Let's think about what it looks like in the actual file system. Theoretically,
    directories are just like actual files. The disk blocks will contain *directory
    entries* or *dirents*. What that means is that our disk block can look like this
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们想想它在实际文件系统中是什么样子。理论上，目录就像实际文件一样。磁盘块将包含*目录条目*或*dirent*。这意味着我们的磁盘块可以看起来像这样
- en: '| inode_num | name |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '|索引节点号|名称|'
- en: '| --- | --- |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|---|---|'
- en: '| 2043567 | hi.txt |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|2043567|hi.txt|'
- en: '...'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: Each directory entry could either be a fixed size, or a variable c-string. It
    depends on how the particular filesystem implements it at the lower level.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 每个目录条目可以是固定大小，也可以是可变的C字符串。这取决于特定文件系统在较低级别实现的方式。
- en: How can I find the inode number of a file?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何找到文件的索引节点号？
- en: From a shell, use `ls` with the `-i` option
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从shell中，使用带有`-i`选项的`ls`
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: From C, call one of the stat functions (introduced below).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从C中调用stat函数之一（下面介绍）。
- en: How do I find out meta-information about a file (or directory)?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何找出文件（或目录）的元信息？
- en: Use the stat calls. For example, to find out when my 'notes.txt' file was last
    accessed -
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用stat调用。例如，要找出我的'notes.txt'文件上次访问的时间 -
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are actually three versions of `stat`;
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上有三个版本的`stat`；
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For example you can use `fstat` to find out the meta-information about a file
    if you already have an file descriptor associated with that file
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以使用`fstat`来查找与该文件关联的文件描述符的文件的元信息
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The third call 'lstat' we will discuss when we introduce symbolic links.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个调用'lstat'我们将在介绍符号链接时讨论。
- en: In addition to access,creation, and modified times, the stat structure includes
    the inode number, length of the file and owner information.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了访问、创建和修改时间之外，stat结构还包括索引节点号、文件长度和所有者信息。
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How do I list the contents of a directory ?
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何列出目录的内容？
- en: Let's write our own version of 'ls' to list the contents of a directory.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写我们自己的'version of 'ls'来列出目录的内容。
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How do I read the contents of a directory?
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何读取目录的内容？
- en: 'Ans: Use opendir readdir closedir For example, here''s a very simple implementation
    of ''ls'' to list the contents of a directory.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 答：使用opendir readdir closedir 例如，这是一个非常简单的'ls'实现，用于列出目录的内容。
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Note: after a call to fork(), either (XOR) the parent or the child can use
    readdir(), rewinddir() or seekdir(). If both the parent and the child use the
    above, behavior is undefined.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：在调用fork()后，父进程或子进程可以使用readdir()、rewinddir()或seekdir()。如果父进程和子进程都使用上述方法，行为是未定义的。
- en: How do I check to see if a file is in the current directory?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何检查文件是否在当前目录中？
- en: 'For example, to see if a particular directory includes a file (or filename)
    ''name'', we might write the following code. (Hint: Can you spot the bug?)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要查看特定目录是否包含文件（或文件名）'名称'，我们可以编写以下代码。（提示：你能发现错误吗？）
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The above code has a subtle bug: It leaks resources! If a matching filename
    is found then ''closedir'' is never called as part of the early return. Any file
    descriptors opened, and any memory allocated, by opendir are never released. This
    means eventually the process will run out of resources and an `open` or `opendir`
    call will fail.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码有一个微妙的错误：它泄漏资源！如果找到匹配的文件名，那么'closedir'将不会作为早期返回的一部分调用。opendir打开的任何文件描述符和分配的任何内存都不会被释放。这意味着最终进程将耗尽资源，并且`open`或`opendir`调用将失败。
- en: The fix is to ensure we free up resources in every possible code-path. In the
    above code this means calling `closedir` before `return 1`. Forgetting to release
    resources is a common C programming bug because there is no support in the C lanaguage
    to ensure resources are always released with all codepaths.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 修复的方法是确保我们在每个可能的代码路径中释放资源。在上面的代码中，这意味着在`return 1`之前调用`closedir`。忘记释放资源是一个常见的C编程错误，因为C语言中没有支持确保所有代码路径都始终释放资源。
- en: What are the gotcha's of using readdir? For example to recursively search directories?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用readdir的陷阱是什么？例如，递归搜索目录？
- en: 'There are two main gotchas and one consideration: The `readdir` function returns
    "." (current directory) and ".." (parent directory). If you are looking for sub-directories,
    you need to explicitly exclude these directories.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个主要的陷阱和一个考虑：`readdir`函数返回“.”（当前目录）和“..”（父目录）。如果要查找子目录，需要明确排除这些目录。
- en: For many applications it's reasonable to check the current directory first before
    recursively searching sub-directories. This can be achieved by storing the results
    in a linked list, or resetting the directory struct to restart from the beginning.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多应用程序来说，首先检查当前目录，然后递归搜索子目录是合理的。这可以通过将结果存储在链接列表中来实现，或者重置目录结构以从头开始重新开始。
- en: 'One final note of caution: `readdir` is not thread-safe! For multi-threaded
    searches use `readdir_r` which requires the caller to pass in the address of an
    existing dirent struct.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要注意的一点：`readdir`不是线程安全的！对于多线程搜索，请使用`readdir_r`，它要求调用者传递现有dirent结构的地址。
- en: See the man page of readdir for more details.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有关readdir的更多详细信息，请参阅readdir的man页面。
- en: How do I determine if a directory entry is a directory?
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何确定目录条目是否是目录？
- en: 'Ans: Use `S_ISDIR` to check the mode bits stored in the stat structure'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 答：使用`S_ISDIR`来检查stat结构中存储的模式位
- en: And to check if a file is regular file use `S_ISREG`,
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查文件是否为常规文件，请使用`S_ISREG`，
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Does a directory have an inode too?
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录也有inode吗？
- en: Yes! Though a better way to think about this, is that a directory (like a file)
    *is* an inode (with some data - the directory name and inode contents). It just
    happens to be a special kind of inode.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！虽然更好的想法是，一个目录（就像一个文件）*是*一个inode（带有一些数据-目录名称和inode内容）。它碰巧是一种特殊类型的inode。
- en: 'From [Wikipedia](http://en.wikipedia.org/wiki/Inode):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 来自[Wikipedia](http://en.wikipedia.org/wiki/Inode)：
- en: Unix directories are lists of association structures, each of which contains
    one filename and one inode number.
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Unix目录是关联结构的列表，每个结构包含一个文件名和一个inode号。
- en: Remember, inodes don't contain filenames--only other file metadata.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，inode不包含文件名-只包含其他文件元数据。
- en: How can I have the same file appear in two different places in my file system?
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何让相同的文件出现在文件系统中的两个不同位置？
- en: First remember that a file name != the file. Think of the inode as 'the file'
    and a directory as just a list of names with each name mapped to an inode number.
    Some of those inodes may be regular file inodes, others may be directory inodes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要记住，文件名！=文件。将inode视为'文件'，目录只是一个名称列表，每个名称都映射到一个inode号。其中一些inode可能是常规文件inode，其他可能是目录inode。
- en: If we already have a file on a file system we can create another link to the
    same inode using the 'ln' command
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经在文件系统上有一个文件，我们可以使用'ln'命令创建到相同inode的另一个链接
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'However blip.txt *is* the same file; if I edit blip I''m editing the same file
    as ''file1.txt!'' We can prove this by showing that both file names refer to the
    same inode:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，blip.txt *是*相同的文件；如果我编辑blip，我正在编辑与'file1.txt!'相同的文件！我们可以通过显示两个文件名指向相同的inode来证明这一点：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: These kinds of links (aka directory entries) are called 'hard links'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些链接（也称为目录条目）称为'硬链接'
- en: The equivalent C call is `link`
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 等效的C调用是`link`
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: For simplicity the above examples made hard links inside the same directory
    however hard links can be created anywhere inside the same filesystem.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，上面的例子在同一个目录中创建了硬链接，但是硬链接可以在同一个文件系统的任何地方创建。
- en: What happens when I `rm` (remove) a file?
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当我`rm`（删除）一个文件时会发生什么？
- en: When you remove a file (using `rm` or `unlink`) you are removing an inode reference
    from a directory. However the inode may still be referenced from other directories.
    In order to determine if the contents of the file are still required, each inode
    keeps a reference count that is updated whenever a new link is created or destroyed.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当您删除文件（使用`rm`或`unlink`）时，您正在从目录中删除一个inode引用。但是inode可能仍然被其他目录引用。为了确定文件的内容是否仍然需要，每个inode都保留一个引用计数，每当创建或销毁新链接时，该引用计数都会更新。
- en: 'Case study: Back up software that minimizes file duplication'
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例研究：最小化文件重复的备份软件
- en: An example use of hard-links is to efficiently create multiple archives of a
    file system at different points in time. Once the archive area has a copy of a
    particular file, then future archives can re-use these archive files rather than
    creating a duplicate file. Apple's "Time Machine" software does this.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 硬链接的一个示例用途是有效地在不同时间点创建文件系统的多个存档。一旦存档区域有特定文件的副本，未来的存档可以重用这些存档文件，而不是创建重复的文件。苹果的“Time
    Machine”软件就是这样做的。
- en: Can I create hard links to directories as well as regular files?
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以像常规文件一样创建目录的硬链接吗？
- en: No. Well yes. Not really... Actually you didn't really want to do this, did
    you? The POSIX standard says no you may not! The `ln` command will only allow
    root to do this and only if you provide the `-d` option. However even root may
    not be able to perform this because most filesystems prevent it!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 不。好吧是的。不是真的...实际上你并不真的想这样做，是吗？POSIX标准说不，你不可以！`ln`命令只允许root执行此操作，只有在提供`-d`选项时才能执行此操作。但是，即使root也可能无法执行此操作，因为大多数文件系统会阻止它！
- en: Why?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？
- en: The integrity of the file system assumes the directory structure (excluding
    softlinks which we will talk about later) is a non-cyclic tree that is reachable
    from the root directory. It becomes expensive to enforce or verify this constraint
    if directory linking is allowed. Breaking these assumptions can cause file integrity
    tools to not be able to repair the file system. Recursive searches potentially
    never terminate and directories can have more than one parent but ".." can only
    refer to a single parent. All in all, a bad idea.
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件系统的完整性假设目录结构（不包括我们稍后将讨论的软链接）是从根目录可达的非循环树。如果允许目录链接，强制执行或验证此约束将变得昂贵。打破这些假设可能导致文件完整性工具无法修复文件系统。递归搜索可能永远不会终止，目录可能有多个父目录，但“..”只能指向一个父目录。总的来说，这是一个坏主意。
- en: '[Back: File System, Part 1](https://github.com/angrave/SystemProgramming/wiki/File-System%2C-Part-1%3A-Introduction)
    | [Next: File System, Part 3](https://github.com/angrave/SystemProgramming/wiki/File-System,-Part-3:-Permissions)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回：文件系统，第1部分](https://github.com/angrave/SystemProgramming/wiki/File-System%2C-Part-1%3A-Introduction)
    | [下一个：文件系统，第3部分](https://github.com/angrave/SystemProgramming/wiki/File-System,-Part-3:-Permissions)'

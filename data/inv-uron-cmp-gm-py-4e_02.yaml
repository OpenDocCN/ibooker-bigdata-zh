- en: 1 THE INTERACTIVE SHELL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1 交互式shell
- en: 原文：[https://inventwithpython.com/invent4thed/chapter1.html](https://inventwithpython.com/invent4thed/chapter1.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://inventwithpython.com/invent4thed/chapter1.html](https://inventwithpython.com/invent4thed/chapter1.html)
- en: '[Prev: Introduction](chapter0.html) | [Next: Chapter 2 - Writing Programs](chapter2.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一页：介绍](chapter0.html) | [下一页：第2章-编写程序](chapter2.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
- en: Before you can make games, you need to learn a few basic programming concepts.
    You’ll start in this chapter by learning how to use Python’s interactive shell
    and perform basic arithmetic.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以制作游戏之前，您需要学习一些基本的编程概念。您将从本章开始学习如何使用Python的交互式shell并执行基本的算术运算。
- en: '**TOPICS COVERED IN THIS CHAPTER**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**本章涵盖的主题**'
- en: • Operators
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: • 运算符
- en: • Integers and floating-point numbers
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: • 整数和浮点数
- en: • Values
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: • 值
- en: • Expressions
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • 表达式
- en: • Syntax errors
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: • 语法错误
- en: • Storing values in variables
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • 将值存储在变量中
- en: '**Some Simple Math**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**一些简单的数学**'
- en: Start IDLE by following the steps in “[Starting IDLE](#calibre_link-63)” on
    [page xxvi](#calibre_link-64). First you’ll use Python to solve some simple math
    problems. The interactive shell can work just like a calculator. Type `2 + 2`
    into the interactive shell at the `>>>` prompt and press ENTER. (On some keyboards,
    this key is RETURN.) [Figure 1-1](#calibre_link-65) shows how this math problem
    looks in the interactive shell—notice that it responds with the number `4`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 按照“[启动IDLE](#calibre_link-63)”中的步骤在[第xxvi页](#calibre_link-64)上启动IDLE。首先，您将使用Python解决一些简单的数学问题。交互式shell可以像计算器一样工作。在交互式shell的`>>>`提示符处键入`2
    + 2`，然后按ENTER键。 （在某些键盘上，此键是RETURN。）[图1-1](#calibre_link-65)显示了这个数学问题在交互式shell中的样子-请注意它响应数字`4`。
- en: '![image](../Images/d96acd9cd9d9ed92bcd6963a10d06160.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/d96acd9cd9d9ed92bcd6963a10d06160.png)'
- en: '*Figure 1-1: Entering* 2 + 2 *into the interactive shell*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-1：* 在交互式shell中输入2 + 2'
- en: This math problem is a simple programming instruction. The plus sign (`+`) tells
    the computer to add the numbers `2` and `2`. The computer does this and responds
    with the number `4` on the next line. [Table 1-1](#calibre_link-66) lists the
    other math symbols available in Python.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数学问题是一个简单的编程指令。加号（`+`）告诉计算机将数字`2`和`2`相加。计算机执行此操作，并在下一行返回数字`4`。[表1-1](#calibre_link-66)列出了Python中可用的其他数学符号。
- en: '**Table 1-1:** Math Operators'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**表1-1：** 数学运算符'
- en: '| **Operator** | **Operation** |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| **运算符** | **操作** |'
- en: '| --- | --- |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `+` | Addition |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `+` | 加法 |'
- en: '| `-` | Subtraction |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `-` | 减法 |'
- en: '| `*` | Multiplication |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 乘法 |'
- en: '| `/` | Division |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `/` | 除法 |'
- en: The minus sign (`-`) subtracts numbers, the asterisk (`*`) multiplies numbers,
    and the slash (`/`) divides numbers. When used in this way, `+`, `-`, `*`, and
    `/` are called *operators*. Operators tell Python what to do with the numbers
    surrounding them.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 减号（`-`）减去数字，星号（`*`）乘以数字，斜杠（`/`）除以数字。这样使用时，`+`，`-`，`*`和`/`被称为*运算符*。运算符告诉Python如何处理它们周围的数字。
- en: '***Integers and Floating-Point Numbers***'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***整数和浮点数***'
- en: '*Integers* (or *ints* for short) are whole numbers such as `4`, `99`, and `0`.
    *Floating-point numbers* (or *floats* for short) are fractions or numbers with
    decimal points like `3.5`, `42.1`, and `5.0`. In Python, `5` is an integer, but
    `5.0` is a float. These numbers are called *values*. (Later we will learn about
    other kinds of values besides numbers.) In the math problem you entered in the
    shell, `2` and `2` are integer values.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*整数*（或简称*整数*）是诸如`4`，`99`和`0`的整数。*浮点数*（或简称*浮点数*）是分数或带有小数点的数字，如`3.5`，`42.1`和`5.0`。在Python中，`5`是一个整数，但`5.0`是一个浮点数。这些数字被称为*值*。（稍后我们将学习除了数字之外的其他种类的值。）在您在shell中输入的数学问题中，`2`和`2`是整数值。'
- en: '***Expressions***'
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***表达式***'
- en: The math problem `2 + 2` is an example of an *expression*. As [Figure 1-2](#calibre_link-67)
    shows, expressions are made up of values (the numbers) connected by operators
    (the math signs) that produce a new value the code can use. Computers can solve
    millions of expressions in seconds.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 数学问题`2 + 2`是*表达式*的一个例子。如[图1-2](#calibre_link-67)所示，表达式由值（数字）和运算符（数学符号）组成，产生代码可以使用的新值。计算机可以在几秒钟内解决数百万个表达式。
- en: '![image](../Images/1b85d7414744e59c7224bde642a2ba70.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/1b85d7414744e59c7224bde642a2ba70.png)'
- en: '*Figure 1-2: An expression is made up of values and operators.*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-2：表达式由值和运算符组成。*'
- en: 'Try entering some of these expressions into the interactive shell, pressing
    ENTER after each one:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将其中一些表达式输入交互式shell，每次输入后按ENTER：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These expressions all look like regular math equations, but notice all the spaces
    in the `2  +        2` example. In Python, you can add any number of spaces between
    values and operators. However, you must always start instructions at the beginning
    of the line (with no spaces) when entering them into the interactive shell.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表达式看起来都像普通的数学方程，但请注意`2  +        2`示例中的所有空格。在Python中，您可以在值和运算符之间添加任意数量的空格。但是，当将它们输入交互式shell时，您必须始终从行的开头（没有空格）开始指令。
- en: '**Evaluating Expressions**'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**评估表达式**'
- en: 'When a computer solves the expression `10 + 5` and returns the value `15`,
    it has *evaluated* the expression. Evaluating an expression reduces the expression
    to a single value, just like solving a math problem reduces the problem to a single
    number: the answer. For example, the expressions `10 + 5` and `10 + 3 + 2` both
    evaluate to `15`.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当计算机解决表达式`10 + 5`并返回值`15`时，它已经*评估*了表达式。评估表达式将表达式减少为单个值，就像解决数学问题将问题减少为单个数字：答案。例如，表达式`10
    + 5`和`10 + 3 + 2`都评估为`15`。
- en: 'When Python evaluates an expression, it follows an order of operations just
    like you do when you do math. There are just a few rules:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当Python评估表达式时，它遵循与您进行数学运算时一样的操作顺序。只有几条规则：
- en: • Parts of the expression inside parentheses are evaluated first.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: • 括号内表达式的部分首先进行评估。
- en: • Multiplication and division are done before addition and subtraction.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: • 乘法和除法在加法和减法之前进行。
- en: • The evaluation is performed left to right.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: • 评估是从左到右执行的。
- en: The expression `1 + 2 * 3 + 4` evaluates to `11`, not `13`, because `2 * 3`
    is evaluated first. If the expression were `(1 + 2) * (3 + 4)` it would evaluate
    to `21`, because the `(1 + 2)` and `(3 + 4)` inside parentheses are evaluated
    before multiplication.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式 `1 + 2 * 3 + 4` 评估为 `11`，而不是 `13`，因为首先评估 `2 * 3`。如果表达式是 `(1 + 2) * (3 +
    4)`，它将评估为 `21`，因为括号内的 `(1 + 2)` 和 `(3 + 4)` 在乘法之前被评估。
- en: 'Expressions can be of any size, but they will always evaluate to a single value.
    Even single values are expressions. For example, the expression `15` evaluates
    to the value `15`. The expression `8 * 3 / 2 + 2 + 7 - 9` will evaluate to the
    value `12.0` through the following steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式可以是任意大小，但它们总是会评估为一个单一的值。即使单个值也是表达式。例如，表达式 `15` 评估为值 `15`。表达式 `8 * 3 / 2 +
    2 + 7 - 9` 通过以下步骤评估为值 `12.0`：
- en: '![image](../Images/d75c138a4c601f12b0914bc939037adb.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/d75c138a4c601f12b0914bc939037adb.png)'
- en: 'Even though the computer is performing all of these steps, you don’t see them
    in the interactive shell. The interactive shell shows you just the result:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管计算机正在执行所有这些步骤，但你在交互式shell中看不到它们。交互式shell只会显示结果：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that expressions with the `/` division operator always evaluate to a
    float; for example, `24 / 2` evaluates to `12.0`. Math operations with even one
    float value also evaluate to float values, so `12.0 + 2` evaluates to `14.0`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，带有 `/` 除法运算符的表达式总是评估为浮点数；例如，`24 / 2` 评估为 `12.0`。即使有一个浮点数值的数学运算也会评估为浮点数值，所以
    `12.0 + 2` 评估为 `14.0`。
- en: '**Syntax Errors**'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**语法错误**'
- en: 'If you enter `5 +` into the interactive shell, you’ll get the following error
    message:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在交互式shell中输入 `5 +`，你会得到以下错误消息：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This error happened because `5 +` isn’t an expression. Expressions have values
    connected by operators, and the `+` operator expects a value before *and* after
    it. An error message appears when an expected value is missing.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误发生是因为 `5 +` 不是一个表达式。表达式是由运算符连接的值，`+` 运算符期望在它之前*和*之后有一个值。当期望的值缺失时，会出现错误消息。
- en: '`SyntaxError` means Python doesn’t understand the instruction because you typed
    it incorrectly. Computer programming isn’t just about giving the computer instructions
    to follow but also knowing how to give it those instructions correctly.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`SyntaxError` 意味着Python无法理解指令，因为你输入错误了。计算机编程不仅仅是给计算机指令，还要知道如何正确地给它这些指令。'
- en: Don’t worry about making mistakes, though. Errors won’t damage your computer.
    Just retype the instruction correctly into the interactive shell at the next `>>>`
    prompt.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不过不要担心犯错。错误不会损坏你的计算机。只需在下一个 `>>>` 提示符下正确地重新输入指令到交互式shell中。
- en: '**Storing Values in Variables**'
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**在变量中存储值**'
- en: When an expression evaluates to a value, you can use that value later by storing
    it in a *variable*. Think of a variable as a box that can hold a value.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个表达式评估为一个值时，你可以通过将其存储在*变量*中来稍后使用该值。把变量想象成一个可以容纳值的盒子。
- en: 'An *assignment statement* will store a value inside a variable. Type a name
    for the variable, followed by the equal sign (`=`), which is called the *assignment
    operator*, and then the value to store in the variable. For example, enter the
    following into the interactive shell:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*赋值语句*会将一个值存储在变量中。输入变量名称，然后是等号（`=`），这被称为*赋值运算符*，然后是要存储在变量中的值。例如，输入以下内容到交互式shell中：'
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `spam` variable’s box now stores the value `15`, as shown in [Figure 1-3](#calibre_link-68).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`spam` 变量的盒子现在存储值 `15`，如[图1-3](#calibre_link-68)所示。'
- en: '![image](../Images/634b9bf8d36f02a543e5a65b4d932f0c.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/634b9bf8d36f02a543e5a65b4d932f0c.png)'
- en: '*Figure 1-3: Variables are like boxes that can hold values.*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-3：变量就像可以容纳值的盒子。*'
- en: When you press ENTER, you won’t see anything in response. In Python, you know
    the instruction was successful if no error message appears. The `>>>` prompt will
    appear so you can enter the next instruction.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当你按下 ENTER 键时，你不会看到任何响应。在Python中，如果没有出现错误消息，你就知道指令是成功的。`>>>` 提示符会出现，这样你就可以输入下一个指令。
- en: Unlike expressions, *statements* are instructions that do not evaluate to any
    value. This is why there’s no value displayed on the next line in the interactive
    shell after `spam = 15`. If you’re confused about which instructions are expressions
    and which are statements, remember that expressions evaluate to a single value.
    Any other kind of instruction is a statement.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 与表达式不同，*语句*是不会评估为任何值的指令。这就是为什么在 `spam = 15` 后的交互式shell中的下一行没有显示任何值。如果你对哪些指令是表达式，哪些是语句感到困惑，记住表达式会评估为一个单一的值。任何其他类型的指令都是语句。
- en: 'Variables store values, not expressions. For example, consider the expressions
    in the statements `spam = 10 + 5` and `spam = 10 + 7 - 2`. They both evaluate
    to `15`. The end result is the same: both assignment statements store the value
    `15` in the variable `spam`.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 变量存储值，而不是表达式。例如，考虑语句 `spam = 10 + 5` 和 `spam = 10 + 7 - 2` 中的表达式。它们都评估为 `15`。最终结果是一样的：两个赋值语句都将值
    `15` 存储在变量 `spam` 中。
- en: A good variable name describes the data it contains. Imagine that you moved
    to a new house and labeled all of your moving boxes *Stuff*. You’d never find
    anything! The variable names `spam`, `eggs`, and `bacon` are example names used
    for variables in this book.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的变量名称描述了它包含的数据。想象一下，你搬到了一个新房子，并且给所有的搬运箱贴上了 *东西* 的标签。你永远找不到任何东西！`spam`、`eggs`
    和 `bacon` 这些变量名称是本书中用于变量的示例名称。
- en: 'The first time a variable is used in an assignment statement, Python will create
    that variable. To check what value is in a variable, enter the variable name into
    the interactive shell:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次在赋值语句中使用变量时，Python会创建该变量。要检查变量中的值，输入变量名称到交互式shell中：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The expression `spam` evaluates to the value inside the `spam` variable: `15`.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式 `spam` 的值是变量 `spam` 中的值：`15`。
- en: 'You can also use variables in expressions. Try entering the following in the
    interactive shell:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在表达式中使用变量。尝试在交互式shell中输入以下内容：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You set the value of the variable `spam` to `15`, so typing `spam + 5` is like
    typing the expression `15 + 5`. Here are the steps of `spam + 5` being evaluated:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你将变量`spam`的值设置为`15`，所以输入`spam + 5`就像输入表达式`15 + 5`。以下是`spam + 5`被评估的步骤：
- en: '![image](../Images/c31d54bd78960408bb64c81a54df726b.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/c31d54bd78960408bb64c81a54df726b.png)'
- en: 'You cannot use a variable before an assignment statement creates it. If you
    try to do so, Python will give you a `NameError` because no such variable by that
    name exists yet. Mistyping the variable name also causes this error:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在赋值语句创建变量之前，你不能使用变量。如果你尝试这样做，Python会给你一个`NameError`，因为还没有这样的变量。变量名拼写错误也会导致这个错误：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The error appeared because there’s a `spam` variable but no `spma` variable.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 出现错误是因为有一个`spam`变量，但没有`spma`变量。
- en: 'You can change the value stored in a variable by entering another assignment
    statement. For example, enter the following into the interactive shell:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过输入另一个赋值语句来更改变量中存储的值。例如，将以下内容输入交互式shell中：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When you first enter `spam + 5`, the expression evaluates to `20` because you
    stored `15` inside `spam`. However, when you enter `spam = 3`, the value `15`
    in the variable’s box is replaced, or *overwritten*, with the value `3` since
    the variable can hold only one value at a time. Because the value of `spam` is
    now `3`, when you enter `spam + 5`, the expression evaluates to `8`. Overwriting
    is like taking a value out of the variable’s box to put a new value in, as shown
    in [Figure 1-4](#calibre_link-69).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次输入`spam + 5`时，表达式的值为`20`，因为你在`spam`中存储了`15`。然而，当你输入`spam = 3`时，变量的盒子中的值`15`被替换或*覆盖*为值`3`，因为变量一次只能保存一个值。因为`spam`的值现在是`3`，所以当你输入`spam
    + 5`时，表达式的值为`8`。覆盖就像是从变量的盒子中取出一个值，然后放入一个新值，如[图1-4](#calibre_link-69)所示。
- en: '![image](../Images/5da7583a6bce232fdd0e9701b8e98b5e.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/5da7583a6bce232fdd0e9701b8e98b5e.png)'
- en: '*Figure 1-4: The value* 15 *in* spam *is overwritten by the value* 3.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1-4：*spam*中的值*15*被*3*覆盖。'
- en: 'You can even use the value in the `spam` variable to assign a new value to
    `spam`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以使用`spam`变量中的值来为`spam`赋一个新值：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The assignment statement `spam = spam + 5` says, “The new value of the `spam`
    variable will be the current value of `spam` plus five.” To keep increasing the
    value in `spam` by `5` several times, enter the following into the interactive
    shell:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 赋值语句`spam = spam + 5`表示，“`spam`变量的新值将是`spam`的当前值加上五。”要多次增加`spam`中的值`5`，请将以下内容输入交互式shell中：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, you assign `spam` a value of `15` in the first statement. In
    the next statement, you add `5` to the value of `spam` and assign `spam` the new
    value `spam + 5`, which evaluates to `20`. When you do this three times, `spam`
    evaluates to `30`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你在第一条语句中为`spam`赋了一个值`15`。在下一条语句中，你将`5`加到`spam`的值上，并将`spam`赋予新值`spam +
    5`，这个值为`20`。当你这样做三次时，`spam`的值为`30`。
- en: 'So far we’ve looked at just one variable, but you can create as many variables
    as you need in your programs. For example, let’s assign different values to two
    variables named `eggs` and `bacon`, like so:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只看了一个变量，但是你可以在你的程序中创建尽可能多的变量。例如，让我们给两个名为`eggs`和`bacon`的变量分配不同的值，如下所示：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now the `bacon` variable has `10` inside it, and the `eggs` variable has `15`
    inside it. Each variable is its own box with its own value, as shown in [Figure
    1-5](#calibre_link-70).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`bacon`变量中有`10`，`eggs`变量中有`15`。每个变量都是它自己的盒子，有自己的值，如[图1-5](#calibre_link-70)所示。
- en: '![image](../Images/4dc79e94e30c34b30321875148c2400e.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/4dc79e94e30c34b30321875148c2400e.png)'
- en: '*Figure 1-5: The* bacon *and* eggs *variables each store values.*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-5：*bacon*和*eggs*变量分别存储值。
- en: 'Enter `spam = bacon + eggs` into the interactive shell, then check the new
    value of `spam`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互式shell中输入`spam = bacon + eggs`，然后检查`spam`的新值：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The value in `spam` is now `25`. When you add `bacon` and `eggs`, you are adding
    their values, which are `10` and `15`, respectively. Variables contain values,
    not expressions, so the `spam` variable was assigned the value `25`, not the expression
    `bacon + eggs`. After the `spam = bacon + eggs` statement assigns the value `25`
    to `spam`, changing `bacon` or `eggs` will not affect `spam`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`spam`中的值现在是`25`。当你加上`bacon`和`eggs`时，你正在加上它们的值，分别为`10`和`15`。变量包含值，而不是表达式，所以`spam`变量被赋予了值`25`，而不是表达式`bacon
    + eggs`。在`spam = bacon + eggs`语句将值`25`赋给`spam`之后，改变`bacon`或`eggs`不会影响`spam`。'
- en: '**Summary**'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, you learned the basics of writing Python instructions. Because
    computers don’t have common sense and only understand specific instructions, Python
    needs you to tell it exactly what to do.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了编写Python指令的基础知识。因为计算机没有常识，只能理解特定的指令，Python需要你准确告诉它要做什么。
- en: Expressions are values (such as `2` or `5`) combined with operators (such as
    `+` or `-`). Python can evaluate expressions—that is, reduce the expression to
    a single value. You can store values inside of variables so that your program
    can remember those values and use them later.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式是值（如`2`或`5`）与运算符（如`+`或`-`）的组合。Python可以评估表达式，即将表达式简化为单个值。你可以将值存储在变量中，以便你的程序可以记住这些值并在以后使用它们。
- en: There are a few other types of operators and values in Python. In the next chapter,
    you’ll go over some more basic concepts and write your first program. You’ll learn
    about working with text in expressions. Python isn’t limited to just numbers;
    it’s more than a calculator!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Python中还有其他类型的运算符和值。在下一章中，你将学习一些更基本的概念，并编写你的第一个程序。你将学习如何在表达式中处理文本。Python不仅仅局限于数字；它不仅仅是一个计算器！
- en: '[Prev: Introduction](chapter0.html) | [Next: Chapter 2 - Writing Programs](chapter2.html)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一页：介绍](chapter0.html) | [下一页：第二章 - 编写程序](chapter2.html)'

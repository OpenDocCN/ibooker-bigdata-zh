- en: 'Networking, Part 4: Building a simple TCP Server'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络，第4部分：构建一个简单的TCP服务器
- en: What is `htons` and when is it used?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`htons`是什么，何时使用它？'
- en: Integers can be represented in least significant byte first or most-significant
    byte first. Either approach is reasonable as long as the machine itself is internally
    consistent. For network communications we need to standardize on agreed format.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 整数可以以最低有效字节优先或最高有效字节优先表示。只要机器本身在内部一致，任何方法都是合理的。对于网络通信，我们需要在约定的格式上进行标准化。
- en: '`htons(xyz)` returns the 16 bit unsigned integer ''short'' value xyz in network
    byte order. `htonl(xyz)` returns the 32 bit unsigned integer ''long'' value xyz
    in network byte order.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`htons(xyz)`以网络字节顺序返回16位无符号整数“short”值xyz。`htonl(xyz)`以网络字节顺序返回32位无符号整数“long”值xyz。'
- en: These functions are read as 'host to network'; the inverse functions (ntohs,
    ntohl) convert network ordered byte values to host-ordered ordering. So, is host-ordering
    little-endian or big-endian? The answer is - it depends on your machine! It depends
    on the actual architecture of the host running the code. If the architecture happens
    to be the same as network ordering then the result of these functions is just
    the argument. For x86 machines, the host and network ordering *is* different.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数被读作“主机到网络”；反向函数（ntohs、ntohl）将网络排序的字节值转换为主机排序。那么，主机排序是小端还是大端？答案是-这取决于您的机器！这取决于运行代码的主机的实际架构。如果架构恰好与网络排序相同，那么这些函数的结果就是参数。对于x86机器，主机和网络排序是不同的。
- en: 'Summary: Whenever you read or write the low level C network structures (e.g.
    port and address information), remember to use the above functions to ensure correct
    conversion to/from a machine format. Otherwise the displayed or specified value
    may be incorrect.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 总结：无论何时读取或写入低级C网络结构（例如端口和地址信息），请记住使用上述函数确保正确转换为/从机器格式。否则，显示或指定的值可能是不正确的。
- en: What are the 'big 4' network calls used to create a server?
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于创建服务器的“大4”网络调用是什么？
- en: 'The four system calls required to create a TCP server are: `socket`, `bind`
    `listen` and `accept`. Each has a specific purpose and should be called in the
    above order'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 创建TCP服务器所需的四个系统调用是：`socket`、`bind`、`listen`和`accept`。每个都有特定的目的，并且应按上述顺序调用。
- en: The port information (used by bind) can be set manually (many older IPv4-only
    C code examples do this), or be created using `getaddrinfo`
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 端口信息（由bind使用）可以手动设置（许多旧的仅IPv4的C代码示例都这样做），也可以使用`getaddrinfo`创建
- en: We also see examples of setsockopt later too.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后也会看到setsockopt的示例。
- en: What is the purpose of calling `socket`?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用`socket`的目的是什么？
- en: To create a endpoint for networking communication. A new socket by itself is
    not particularly useful; though we've specified either a packet or stream-based
    connections it is not bound to a particular network interface or port. Instead
    socket returns a network descriptor that can be used with later calls to bind,listen
    and accept.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为网络通信创建一个端点。一个新的套接字本身并不特别有用；虽然我们已经指定了基于数据包或基于流的连接，但它并没有绑定到特定的网络接口或端口。相反，套接字返回一个网络描述符，可以在以后调用bind、listen和accept时使用。
- en: What is the purpose of calling `bind`
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用`bind`的目的是什么
- en: The `bind` call associates an abstract socket with an actual network interface
    and port. It is possible to call bind on a TCP client however it's unusually unnecessary
    to specify the outgoing port.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`bind`调用将抽象套接字与实际网络接口和端口关联起来。可以在TCP客户端上调用bind，但通常不需要指定出站端口。'
- en: What is the purpose of calling `listen`
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用`listen`的目的是什么
- en: The `listen` call specifies the queue size for the number of incoming, unhandled
    connections i.e. that have not yet been assigned a network descriptor by `accept`
    Typical values for a high performance server are 128 or more.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`listen`调用指定了等待处理的传入连接的队列大小，即尚未被`accept`分配网络描述符的连接。高性能服务器的典型值为128或更多。'
- en: Why are server sockets passive?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么服务器套接字是被动的？
- en: Server sockets do not actively try to connect to another host; instead they
    wait for incoming connections. Additionally, server sockets are not closed when
    the peer disconnects. Instead when a remote client connects, it is immediately
    bumped to an unused port number for future communications.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器套接字不会主动尝试连接到另一个主机；相反，它们等待传入的连接。此外，当对等方断开连接时，服务器套接字不会关闭。相反，当远程客户端连接时，它会立即被转移到未使用的端口号以进行未来通信。
- en: What is the purpose of calling `accept`
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用`accept`的目的是什么
- en: Once the server socket has been initialized the server calls `accept` to wait
    for new connections. Unlike `socket` `bind` and `listen`, this call will block.
    i.e. if there are no new connections, this call will block and only return when
    a new client connects.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器套接字被初始化，服务器调用`accept`等待新的连接。与`socket`、`bind`和`listen`不同，这个调用将会阻塞。也就是说，如果没有新的连接，这个调用将会阻塞，只有当一个新的客户端连接时才会返回。
- en: Note the `accept` call returns a new file descriptor. This file descriptor is
    specific to a particular client. It is common programming mistake to use the original
    server socket descriptor for server I/O and then wonder why networking code has
    failed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`accept`调用返回一个新的文件描述符。这个文件描述符特定于特定的客户端。常见的编程错误是使用原始服务器套接字描述符进行服务器I/O，然后惊讶地发现网络代码失败了。
- en: What are the gotchas of creating a TCP-server?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建TCP服务器的注意事项是什么？
- en: Using the socket descriptor of the passive server socket (described above)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用被动服务器套接字的套接字描述符（如上所述）
- en: Not specifying SOCK_STREAM requirement for getaddrinfo
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未指定`getaddrinfo`的SOCK_STREAM要求
- en: Not being able to re-use an existing port.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法重用现有端口。
- en: Not initializing the unused struct entries
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不初始化未使用的结构条目
- en: The `bind` call will fail if the port is currently in use
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果端口当前正在使用，`bind`调用将失败
- en: Note, ports are per machine- not per process or per user. In other words, you
    cannot use port 1234 while another process is using that port. Worse, ports are
    by default 'tied up' after a process has finished.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，端口是每台机器的，而不是每个进程或每个用户的。换句话说，当另一个进程使用该端口时，您不能使用端口1234。更糟糕的是，默认情况下，端口在进程结束后会被“占用”。
- en: Server code example
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器代码示例
- en: A working simple server example is shown below. Note this example is incomplete
    - for example it does not close either socket descriptor, or free up memory created
    by `getaddrinfo`
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个工作的简单服务器示例。请注意，此示例不完整 - 例如，它既不关闭套接字描述符，也不释放`getaddrinfo`创建的内存。
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Why can't my server re-use the port?
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么我的服务器不能重用端口？
- en: By default a port is not immediately released when the socket is closed. Instead,
    the port enters a "TIMED-WAIT" state. This can lead to significant confusion during
    development because the timeout can make valid networking code appear to fail.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当套接字关闭时，端口不会立即释放。相反，端口会进入“TIMED-WAIT”状态。这可能会在开发过程中导致重大混乱，因为超时可能会使有效的网络代码看起来失败。
- en: To be able to immediately re-use a port, specify `SO_REUSEPORT` before binding
    to the port.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够立即重用端口，需要在绑定端口之前指定`SO_REUSEPORT`。
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here's [an extended stackoverflow introductory discussion of `SO_REUSEPORT`](http://stackoverflow.com/questions/14388706/socket-options-so-reuseaddr-and-so-reuseport-how-do-they-differ-do-they-mean-t).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是[一个关于`SO_REUSEPORT`的扩展stackoverflow入门讨论](http://stackoverflow.com/questions/14388706/socket-options-so-reuseaddr-and-so-reuseport-how-do-they-differ-do-they-mean-t)。

- en: 'Synchronization, Part 3: Working with Mutexes And Semaphores'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步，第3部分：使用互斥锁和信号量
- en: Thread Safe Stack
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线程安全的堆栈
- en: What is an atomic operation?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是原子操作？
- en: To paraphrase Wikipedia,
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 用维基百科的话来说，
- en: An operation (or set of operations) is atomic or uninterruptible if it appears
    to the rest of the system to occur instantaneously. Without locks, only simple
    CPU instructions ("read this byte from memory") are atomic (indivisible). On a
    single CPU system, one could temporarily disable interrupts (so a sequence of
    operations cannot be interrupted) but in practice atomicity is achieved by using
    synchronization primitives, typically a mutex lock.
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果一个操作（或一组操作）在系统的其他部分看起来是瞬间发生的，那么它就是原子的或不可中断的。没有锁，只有简单的CPU指令（“从内存中读取这个字节”）是原子的（不可分割的）。在单CPU系统中，可以暂时禁用中断（这样一系列操作就不能被中断），但实际上原子性是通过使用同步原语来实现的，通常是互斥锁。
- en: 'Incrementing a variable (`i++`) is *not* atomic because it requires three distinct
    steps: Copying the bit pattern from memory into the CPU; performing a calculation
    using the CPU''s registers; copying the bit pattern back to memory. During this
    increment sequence, another thread or process can still read the old value and
    other writes to the same memory would also be over-written when the increment
    sequence completes.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 递增变量（`i++`）*不*是原子的，因为它需要三个不同的步骤：将位模式从内存复制到CPU；使用CPU的寄存器进行计算；将位模式复制回内存。在这个递增序列期间，另一个线程或进程仍然可以读取旧值，并且当递增序列完成时，对同一内存的其他写入也会被覆盖。
- en: How do I use mutex lock to make my data-structure thread-safe?
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何使用互斥锁使我的数据结构线程安全？
- en: 'Note, this is just an introduction - writing high-performance thread-safe data
    structures requires its own book! Here''s a simple data structure (a stack) that
    is not thread-safe:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这只是一个介绍 - 编写高性能的线程安全数据结构需要自己的书！这是一个简单的数据结构（堆栈），它不是线程安全的：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Version 1 of the stack is not thread-safe because if two threads call push or
    pop at the same time then the results or the stack can be inconsistent. For example,
    imagine if two threads call pop at the same time then both threads may read the
    same value, both may read the original count value.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 堆栈的版本1不是线程安全的，因为如果两个线程同时调用push或pop，那么结果或堆栈可能是不一致的。例如，想象一下，如果两个线程同时调用pop，那么两个线程可能读取相同的值，两个线程可能读取原始计数值。
- en: To turn this into a thread-safe data structure we need to identify the *critical
    sections* of our code i.e. which section(s) of the code must only have one thread
    at a time. In the above example the `push`,`pop` and `is_empty` functions access
    the same variables (i.e. memory) and all critical sections for the stack.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其转换为线程安全的数据结构，我们需要确定我们代码的*关键部分*，即哪些部分的代码必须一次只有一个线程。在上面的例子中，`push`，`pop`和`is_empty`函数访问相同的变量（即内存），并且堆栈的所有关键部分。
- en: While `push` (and `pop`) is executing, the datastructure is an inconsistent
    state (for example the count may not have been written to, so may still contain
    the original value). By wrapping these methods with a mutex we can ensure that
    only one thread at a time can update (or read) the stack.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当`push`（和`pop`）正在执行时，数据结构处于不一致状态（例如计数可能尚未写入，因此可能仍然包含原始值）。通过用互斥锁包装这些方法，我们可以确保一次只有一个线程可以更新（或读取）堆栈。
- en: A candidate 'solution' is shown below. Is it correct? If not, how will it fail?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个候选的“解决方案”。它正确吗？如果不是，它将如何失败？
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The above code ('version 2') contains at least one error. Take a moment to see
    if you can the error(s) and work out the consequence(s).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码（“版本2”）至少包含一个错误。花点时间看看你能不能找到错误，并弄清楚后果。
- en: If three called `push()` at the same time the lock `m1` ensures that only one
    thread at time manipulates the stack (two threads will need to wait until the
    first thread completes (calls unlock), then a second thread will be allowed to
    continue into the critical section and finally the third thread will be allowed
    to continue once the second thread has finished).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果三个线程同时调用`push()`，锁`m1`确保只有一个线程在操作堆栈（两个线程将需要等待，直到第一个线程完成（调用解锁），然后第二个线程将被允许继续进入临界区，最后第三个线程将在第二个线程完成后被允许继续）。
- en: A similar argument applies to concurrent calls (calls at the same time) to `pop`.
    However version 2 does not prevent push and pop from running at the same time
    because `push` and `pop` use two different mutex locks.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的论点也适用于并发调用（同时调用）`pop`。然而，版本2不会阻止`push`和`pop`同时运行，因为`push`和`pop`使用两个不同的互斥锁。
- en: The fix is simple in this case - use the same mutex lock for both the push and
    pop functions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，修复很简单 - 对push和pop函数都使用相同的互斥锁。
- en: The code has a second error; `is_empty` returns after the comparison and will
    not unlock the mutex. However the error would not be spotted immediately. For
    example, suppose one thread calls `is_empty` and a second thread later calls `push`.
    This thread would mysteriously stop. Using debugger you can discover that the
    thread is stuck at the lock() method inside the `push` method because the lock
    was never unlocked by the earlier `is_empty` call. Thus an oversight in one thread
    led to problems much later in time in an arbitrary other thread.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 代码还有第二个错误；`is_empty`在比较后返回，不会解锁互斥锁。然而，错误不会立即被发现。例如，假设一个线程调用`is_empty`，稍后第二个线程调用`push`。这个线程会神秘地停止。使用调试器，你可以发现线程在`push`方法内的lock()方法处被卡住，因为之前的`is_empty`调用没有解锁。因此，一个线程的疏忽导致了任意其他线程在以后的时间出现问题。
- en: A better version is shown below -
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是更好的版本 -
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Version 3 is thread-safe (we have ensured mutual exclusion for all of the critical
    sections) however there are two points of note:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 版本3是线程安全的（我们已经确保了所有关键部分的互斥），但有两点需要注意：
- en: '`is_empty` is thread-safe but its result may already be out-of date i.e. the
    stack may no longer be empty by the time the thread gets the result!'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_empty`是线程安全的，但它的结果可能已经过时，即在线程得到结果时，堆栈可能不再为空！'
- en: There is no protection against underflow (popping on an empty stack) or overflow
    (pushing onto an already-full stack)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有保护免受下溢（在空堆栈上弹出）或上溢（在已满堆栈上推入）
- en: The latter point can be fixed using counting semaphores.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 后一点可以使用计数信号量来修复。
- en: The implementation assumes a single stack. A more general purpose version might
    include the mutex as part of the memory struct and use pthread_mutex_init to initialize
    the mutex. For example,
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 该实现假定为单个堆栈。更通用的版本可能会将互斥锁作为内存结构的一部分，并使用pthread_mutex_init来初始化互斥锁。例如，
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Example use:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Stack Semaphores
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆栈信号量
- en: How can I force my threads to wait if the stack is empty or full?
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果堆栈为空或已满，我如何强制我的线程等待？
- en: Use counting semaphores! Use a counting semaphore to keep track of how many
    spaces remain and another semaphore to keep to track the number of items in the
    stack. We will call these two semaphores 'sremain' and 'sitems'. Remember `sem_wait`
    will wait if the semaphore's count has been decremented to zero (by another thread
    calling sem_post).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用计数信号量！使用计数信号量来跟踪剩余空间的数量，另一个信号量来跟踪堆栈中项目的数量。我们将称这两个信号量为'sremain'和'sitems'。记住，`sem_wait`会在信号量的计数被另一个线程调用`sem_post`减少到零时等待。
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Sketch #2 has implemented the `post` too early. Another thread waiting in push
    can erroneously attempt to write into a full stack (and similarly a thread waiting
    in the pop() is allowed to continue too early).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 草图＃2已经实现了太早的`post`。在push中等待的另一个线程可能会错误地尝试写入一个已满的堆栈（同样，等待pop()的线程可能会过早地继续）。
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Sketch 3 implements the correct semaphore logic but can you spot the error?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 草图3实现了正确的信号量逻辑，但你能发现错误吗？
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Sketch 3 correctly enforces buffer full and buffer empty conditions using semaphores.
    However there is no *mutual exclusion*: Two threads can be in the *critical section*
    at the same time, which would corrupt the data structure (or least lead to data
    loss). The fix is to wrap a mutex around the critical section:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 草图3正确地使用信号量强制执行了缓冲区满和缓冲区空的条件。然而，没有*互斥*：两个线程可以同时处于*临界区*，这将破坏数据结构（或至少导致数据丢失）。修复方法是在临界区周围包装一个互斥锁：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What are the common Mutex Gotchas?
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的互斥锁陷阱是什么？
- en: Locking/unlocking the wrong mutex (due to a silly typo)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于愚蠢的拼写错误而锁定/解锁错误的互斥锁
- en: Not unlocking a mutex (due to say an early return during an error condition)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未解锁互斥锁（由于在错误条件下提前返回）
- en: Resource leak (not calling `pthread_mutex_destroy`)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源泄漏（未调用`pthread_mutex_destroy`）
- en: Using an unitialized mutex (or using a mutex that has already been destroyed)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用未初始化的互斥锁（或使用已被销毁的互斥锁）
- en: Locking a mutex twice on a thread (without unlocking first)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在线程上两次锁定互斥锁（未首先解锁）
- en: Deadlock and Priority Inversion (we will talk about these later)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 死锁和优先级反转（我们稍后会讨论这些）

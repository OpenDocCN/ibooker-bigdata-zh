- en: 'POSIX, Part 1: Error handling'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POSIX，第1部分：错误处理
- en: What is POSIX error handling?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是POSIX错误处理？
- en: In other languages, you may see error handling implemented with exceptions.
    Although you technically can use them in c (You keep a stack of very try/catch
    block and use `setjmp` and `longjmp` to go to those blocks respectively), error
    handling in C is typically done with posix error handling the code typically looks
    like this.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他语言中，你可能会看到异常处理的实现。尽管在C中你技术上可以使用它们（你保留一个非常try/catch块的堆栈，并使用`setjmp`和`longjmp`分别进入这些块），但C中的错误处理通常是用posix错误处理来完成的，代码通常看起来像这样。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the kernel, the use of `goto` is heavily used to clean up different parts
    of the application. **You should not use gotos** because they make code harder
    to read. gotos in the kernel are there out of necessity, so don't take lessons.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在内核中，使用`goto`来清理应用程序的不同部分是非常常见的。**你不应该使用goto**，因为它会使代码更难阅读。内核中的goto是出于必要性而存在的，所以不要学习它。
- en: What is `errno` and when is it set?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`errno`是什么，何时设置它？'
- en: POSIX defines a special integer `errno` that is set when a system call fails.
    The initial value of `errno` is zero (i.e. no error). When a system call fails
    it will typically return -1 to indicate an error and set `errno`
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX定义了一个特殊的整数`errno`，当系统调用失败时会设置它。`errno`的初始值是零（即没有错误）。当系统调用失败时，它通常会返回-1来指示错误并设置`errno`。
- en: What about multiple threads?
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多线程呢？
- en: Each thread has it's own copy of `errno`. This is very useful; otherwise an
    error in one thread would interfere with the error status of another thread.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每个线程都有自己的`errno`副本。这非常有用；否则一个线程的错误会干扰另一个线程的错误状态。
- en: When is `errno` reset to zero?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`errno`何时重置为零？'
- en: It's not unless you specifically reset it to zero! When system calls are successful
    they do *not* reset the value of `errno`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你明确将它重置为零！当系统调用成功时，它们*不*会重置`errno`的值。
- en: This means you should only rely on the value of errno if you know a system call
    has failed (e.g. it returned -1).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你只应该依赖errno的值，如果你知道一个系统调用失败了（例如它返回了-1）。
- en: What are the gotchas and best practices of using `errno`?
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`errno`的注意事项和最佳实践是什么？
- en: 'Be careful when complex error handling use of library calls or system calls
    that may change the value of `errno`. In practice it''s safer to copy the value
    of errno into a int variable:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当复杂的错误处理使用库调用或系统调用可能改变`errno`的值时要小心。实际上，将`errno`的值复制到一个int变量中更安全：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In a similar vein, if your signal handler makes any system or library calls,
    then it is good practice to save the original value of errno and restore the value
    before returning:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果你的信号处理程序进行了任何系统或库调用，那么最好的做法是保存errno的原始值，并在返回之前恢复该值：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How can you print out the string message associated with a particular error
    number?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何打印出与特定错误号相关联的字符串消息？
- en: Use `strerror` to get a short (English) description of the error value
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`strerror`来获取错误值的简短（英文）描述
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How are perror and strerror related?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: perror和strerror有什么关系？
- en: 'In previous pages we''ve used perror to print out the error to standard error.
    Using `strerror`, we can now write a simple implementation of `perror`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的页面中，我们使用perror将错误打印到标准错误输出。使用`strerror`，我们现在可以编写一个简单的`perror`实现：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: What are the gotchas of using strerror?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用strerror的注意事项是什么？
- en: Unfortunately `strerror` is not threadsafe. In other words, two threads cannot
    call it at the same time!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，`strerror`不是线程安全的。换句话说，两个线程不能同时调用它！
- en: 'There are two workarounds: Firstly we can use a mutex lock to define a critical
    section and a local buffer. The same mutex should be used by all threads in all
    places that call `strerror`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种解决方法：首先，我们可以使用互斥锁来定义一个临界区和一个本地缓冲区。所有调用`strerror`的地方都应该使用相同的互斥锁。
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Alternatively use the less portable but thread-safe `strerror_r`
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用不太便携但线程安全的`strerror_r`
- en: What is EINTR? What does it mean for sem_wait? read? write?
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EINTR是什么？对sem_wait、read、write有什么影响？
- en: Some system calls can be interrupted when a signal (e.g SIGCHLD, SIGPIPE,...)
    is delivered to the process. At this point the system call may return without
    performing any action! For example, bytes may not have been read/written, semaphore
    wait may not have waited.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当信号（例如SIGCHLD、SIGPIPE等）传递到进程时，一些系统调用可能会被中断。此时，系统调用可能会返回而不执行任何操作！例如，可能没有读/写字节，信号量等待可能没有等待。
- en: This interruption can be detected by checking the return value and if `errno`
    is EINTR. In which case the system call should be retried. It's common to see
    the following kind of loop that wraps a system call (such as sem_wait).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这种中断可以通过检查返回值和`errno`是否为EINTR来检测。在这种情况下，应该重试系统调用。通常会看到以下类型的循环，它包装了一个系统调用（比如sem_wait）。"
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Be careful to write `== EINTR`, not `= EINTR`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 小心写成`== EINTR`，而不是`= EINTR`。
- en: Or, if the result value needs to be used later...
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果结果值需要稍后使用...
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: On Linux,calling `read` and `write` to a local disk will normally not return
    with EINTR (instead the function is automatically restarted for you). However,
    calling `read` and `write` on a file descriptor that corresponds to a network
    stream *can* return with EINTR.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上，调用`read`和`write`到本地磁盘通常不会返回EINTR（相反，函数会自动为您重新启动）。然而，对应于网络流的文件描述符上调用`read`和`write`*可能*会返回EINTR。
- en: Which system calls may be interrupted and need to be wrapped?
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哪些系统调用可能会被中断并需要包装？
- en: Use man the page! The man page includes a list of errors (i.e. errno values)
    that may be set by the system call. A rule of thumb is 'slow' (blocking) calls
    (e.g. writing to a socket) may be interrupted but fast non-blocking calls (e.g.
    pthread_mutex_lock) will not.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用手册页！手册页包括系统调用可能设置的错误（即errno值）列表。一个经验法则是'慢'（阻塞）调用（例如写入套接字）可能会被中断，但快速的非阻塞调用（例如pthread_mutex_lock）不会。
- en: From the linux signal 7 man page.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Linux信号7手册页。
- en: '"If a signal handler is invoked while a system call or library function call
    is blocked, then either:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '"如果在系统调用或库函数调用被阻塞时调用了信号处理程序，那么：'
- en: the call is automatically restarted after the signal handler returns; or
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号处理程序返回后，调用将自动重新启动；或者
- en: the call fails with the error EINTR. Which of these two behaviors occurs depends
    on the interface and whether or not the signal handler was established using the
    SA_RESTART flag (see sigaction(2)). The details vary across UNIX systems; below,
    the details for Linux.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用失败，并显示错误EINTR。发生这两种行为取决于接口以及信号处理程序是否使用了SA_RESTART标志（请参阅sigaction(2)）。这些细节在UNIX系统中各不相同；以下是Linux的细节。
- en: 'If a blocked call to one of the following interfaces is interrupted by a signal
    handler, then the call will be automatically restarted after the signal handler
    returns if the SA_RESTART flag was used; otherwise the call will fail with the
    error EINTR:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对以下接口之一的阻塞调用被信号处理程序中断，那么如果使用了SA_RESTART标志，则在信号处理程序返回后，调用将自动重新启动；否则，调用将失败，并显示错误EINTR：
- en: read(2), readv(2), write(2), writev(2), and ioctl(2) calls on "slow" devices.
    A "slow" device is one where the I/O call may block for an indefinite time, for
    example, a terminal, pipe, or socket. (A disk is not a slow device according to
    this definition.) If an I/O call on a slow device has already transferred some
    data by the time it is interrupted by a signal handler, then the call will return
    a success status (normally, the number of bytes transferred). "
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对“慢”设备的read(2)，readv(2)，write(2)，writev(2)和ioctl(2)调用。 “慢”设备是指I/O调用可能会无限期地阻塞的设备，例如终端，管道或套接字。（根据此定义，磁盘不是慢设备。）如果对慢设备的I/O调用在被信号处理程序中断时已经传输了一些数据，则调用将返回成功状态（通常是传输的字节数）。
- en: 'Note, it is easy to believe that setting ''SA_RESTART'' flag is sufficient
    to make this whole problem disappear. Unfortunately that''s not true: there are
    still system calls that may return early and set `EINTR`! See [signal(7)](https://cs-education.github.io/sysassets/man_pages/html/man7/signal.7.html)
    for details.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，很容易相信设置'SA_RESTART'标志就足以使整个问题消失。不幸的是，这并不是真的：仍然有可能有系统调用会提前返回并设置`EINTR`！有关详细信息，请参阅[signal(7)](https://cs-education.github.io/sysassets/man_pages/html/man7/signal.7.html)。
- en: Errno exceptions?
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Errno异常？
- en: There are some POSIX utilities that have their own errno per say. One is when
    you call `getaddrinfo` the function to check that error and convert to a string
    is [gai_strerr](https://linux.die.net/man/3/gai_strerror). Don't get them mixed
    up!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些POSIX实用程序有自己的errno。其中一个是当您调用`getaddrinfo`函数来检查错误并将其转换为字符串时，可以使用[gai_strerror](https://linux.die.net/man/3/gai_strerror)。不要混淆它们！

- en: 18 ANIMATING GRAPHICS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 18 动画图形
- en: 原文：[https://inventwithpython.com/invent4thed/chapter18.html](https://inventwithpython.com/invent4thed/chapter18.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://inventwithpython.com/invent4thed/chapter18.html](https://inventwithpython.com/invent4thed/chapter18.html)
- en: '[Prev: Chapter 17 - Creating Graphics](chapter17.html) | [Next: Chapter 19
    - Collision Detection](chapter19.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一页：第17章 - 创建图形](chapter17.html) | [下一页：第19章 - 碰撞检测](chapter19.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
- en: Now that you’ve learned some `pygame` skills, we’ll write a program to animate
    boxes that bounce around a window. The boxes are different colors and sizes and
    move only in diagonal directions. To animate the boxes, we’ll move them a few
    pixels on each iteration through the game loop. This will make it look like the
    boxes are moving around the screen.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了一些`pygame`技巧，我们将编写一个程序来使盒子在窗口中反弹。这些盒子颜色和大小不同，只能沿对角线方向移动。为了使盒子动起来，我们将在游戏循环的每次迭代中将它们移动几个像素。这将使它看起来像盒子在屏幕上移动。
- en: '**TOPICS COVERED IN THIS CHAPTER**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**本章涵盖的主题**'
- en: • Animating objects with the game loop
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用游戏循环来使对象动画化
- en: • Changing the direction of an object
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: • 改变对象的方向
- en: '**Sample Run of the Animation Program**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**动画程序的示例运行**'
- en: When you run the Animation program, it will look something like [Figure 18-1](#calibre_link-120).
    The blocks will be bouncing off the edges of the window.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行动画程序时，它将类似于[图18-1](#calibre_link-120)。方块将从窗口的边缘反弹。
- en: '![image](../Images/8d4f9b39b1f8aeb41b53225b04205bfc.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/8d4f9b39b1f8aeb41b53225b04205bfc.png)'
- en: '*Figure 18-1: A screenshot of the Animation program*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*图18-1：动画程序的屏幕截图*'
- en: '**Source Code for the Animation Program**'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**动画程序的源代码**'
- en: Enter the following program into the file editor and save it as *animation.py*.
    If you get errors after typing in this code, compare the code you typed to the
    book’s code with the online diff tool at *[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下程序输入文件编辑器并保存为*animation.py*。如果在输入此代码后出现错误，请使用在线差异工具比较您输入的代码与本书代码的差异，网址为*[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*。
- en: '![image](../Images/b4e69b1df0320a5805abf50d4a776e32.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/b4e69b1df0320a5805abf50d4a776e32.png)'
- en: '*animation.py*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*animation.py*'
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Moving and Bouncing the Boxes**'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**移动和反弹盒子**'
- en: In this program, we’ll have three boxes of different colors moving around and
    bouncing off the walls of a window. In the next chapters, we’ll use this program
    as a base to make a game in which we control one of the boxes. To do this, first
    we need to consider how we want the boxes to move.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个程序中，我们将有三个不同颜色的盒子在窗口中移动并在墙壁上反弹。在接下来的章节中，我们将使用这个程序作为基础，制作一个我们可以控制其中一个盒子的游戏。为此，首先我们需要考虑我们希望盒子如何移动。
- en: Each box will move in one of four diagonal directions. When a box hits the side
    of the window, it should bounce off and move in a new diagonal direction. The
    boxes will bounce as shown in [Figure 18-2](#calibre_link-121).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个盒子将沿着四个对角方向移动。当盒子撞到窗口的边缘时，它应该反弹并沿着新的对角方向移动。盒子将如[图18-2](#calibre_link-121)所示反弹。
- en: '![image](../Images/c404f272308fc2986ac1194bc69b5803.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/c404f272308fc2986ac1194bc69b5803.png)'
- en: '*Figure 18-2: How boxes will bounce*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*图18-2：盒子将如何反弹*'
- en: 'The new direction that a box moves after it bounces depends on two things:
    which direction it was moving before the bounce and which wall it bounced off.
    There are eight possible ways a box can bounce: two different ways for each of
    the four walls. For example, if a box is moving down and right and then bounces
    off the bottom edge of the window, we want the box’s new direction to be up and
    right.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 盒子在反弹后移动的新方向取决于两件事：反弹前的移动方向和反弹的墙壁。盒子可以有八种可能的反弹方式：每个墙壁有两种不同的方式。例如，如果一个盒子向下和向右移动，然后从窗口的底边反弹，我们希望盒子的新方向是向上和向右。
- en: We can use a `Rect` object to represent the position and size of the box, a
    tuple of three integers to represent the color of the box, and an integer to represent
    which of the four diagonal directions the box is currently moving in.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`Rect`对象来表示盒子的位置和大小，使用三个整数的元组来表示盒子的颜色，以及使用一个整数来表示盒子当前移动的四个对角方向中的哪一个。
- en: The game loop will adjust the x- and y-position of the box in the `Rect` object
    and draw all the boxes on the screen at their current position on each iteration.
    As the program execution iterates over the loop, the boxes will gradually move
    across the screen so that it looks like they’re smoothly moving and bouncing around.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏循环将调整`Rect`对象中盒子的x和y位置，并在每次迭代时在屏幕上绘制所有盒子的当前位置。随着程序执行在循环上迭代，盒子将逐渐在屏幕上移动，看起来它们平滑地移动和反弹。
- en: '**Setting Up the Constant Variables**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**设置常量变量**'
- en: 'Lines 1 to 5 are just setting up our modules and initializing `pygame` as we
    did in [Chapter 17](#calibre_link-95):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第1至5行只是设置我们的模块并初始化`pygame`，就像我们在[第17章](#calibre_link-95)中所做的那样：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: At lines 8 and 9, we define the two constants for the window width and height,
    and then in line 10, we use those constants to set up `windowSurface`, which will
    represent our `pygame` window. Line 11 uses `set_caption()` to set the window’s
    caption to `'Animation'`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在第8和9行，我们定义了窗口宽度和高度的两个常量，然后在第10行，我们使用这些常量设置了`windowSurface`，它将代表我们的`pygame`窗口。第11行使用`set_caption()`将窗口的标题设置为'动画'。
- en: In this program, you’ll see that the size of the window’s width and height is
    used for more than just the call to `set_mode()`. We’ll use constant variables
    so that if you ever want to change the size of the window, you only have to change
    lines 8 and 9\. Since the window width and height never change during the program’s
    execution, constant variables are a good idea.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个程序中，您会看到窗口宽度和高度的大小不仅用于调用`set_mode()`。我们将使用常量变量，这样如果您想要更改窗口的大小，只需更改第8和9行。由于窗口的宽度和高度在程序执行期间不会改变，因此常量变量是一个好主意。
- en: '***Constant Variables for Direction***'
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***方向的常量变量***'
- en: 'We’ll use constant variables for each of the four directions the boxes can
    move in:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为框可以移动的四个方向使用常量变量：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You could have used any value you wanted for these directions instead of using
    a constant variable. For example, you could use the string `'downleft'` directly
    to represent the down and left diagonal direction and retype the string every
    time you need to specify that direction. However, if you ever mistyped the `'downleft'`
    string, you’d end up with a bug that would cause your program to behave strangely,
    even though the program wouldn’t crash.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用任何你想要的值来代替使用常量变量来表示这些方向。例如，你可以直接使用字符串`'downleft'`来表示向下和向左的对角方向，并在每次需要指定该方向时重新输入该字符串。然而，如果你不小心拼错了`'downleft'`字符串，你的程序会表现得很奇怪，即使程序不会崩溃。
- en: If you use constant variables instead and accidentally mistype the variable
    name, Python will notice that there’s no variable with that name and crash the
    program with an error. This would still be a pretty bad bug, but at least you
    would know about it immediately and could fix it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用常量变量而不小心拼错了变量名，Python会注意到没有该名称的变量，并用错误使程序崩溃。这仍然是一个相当糟糕的bug，但至少你会立即知道并且可以修复它。
- en: 'We also create a constant variable to determine how fast the boxes should move:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了一个常量变量来确定框移动的速度：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The value `4` in the constant variable `MOVESPEED` tells the program how many
    pixels each box should move on each iteration through the game loop.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 常量变量`MOVESPEED`中的值`4`告诉程序每次通过游戏循环迭代时每个框应该移动多少像素。
- en: '***Constant Variables for Color***'
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***颜色的常量变量***'
- en: Lines 22 to 25 set up constant variables for the colors. Remember, `pygame`
    uses a tuple of three integer values for the amounts of red, green, and blue,
    called an RGB value. The integers range from `0` to `255`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第22到25行设置了颜色的常量变量。记住，`pygame`使用三个整数值的元组来表示红色、绿色和蓝色的数量，称为RGB值。整数的范围是从`0`到`255`。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Constant variables are used for readability, just as in the `pygame` Hello World
    program.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 常量变量用于可读性，就像`pygame` Hello World程序中一样。
- en: '**Setting Up the Box Data Structures**'
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**设置框数据结构**'
- en: Next we’ll define the boxes. To make things simple, we’ll set up a dictionary
    as a data structure (see “[The Dictionary Data Type](#calibre_link-122)” on [page
    112](#calibre_link-123)) to represent each moving box. The dictionary will have
    the keys `'rect'` (with a `Rect` object for a value), `'color'` (with a tuple
    of three integers for a value), and `'dir'` (with one of the direction constant
    variables for a value). We’ll set up just three boxes for now, but you can set
    up more boxes by defining more data structures. The animation code we’ll use later
    can be used to animate as many boxes as you define when you set up your data structures.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将定义框。为了简化，我们将设置一个字典作为数据结构（参见“[字典数据类型](#calibre_link-122)”第[112页](#calibre_link-123)）。字典将具有键`'rect'`（值为`Rect`对象）、`'color'`（值为三个整数的元组）和`'dir'`（值为一个方向常量变量）。我们现在只设置了三个框，但是你可以通过定义更多的数据结构来设置更多的框。我们稍后将使用的动画代码可以用来为你在设置数据结构时定义的任意数量的框进行动画。
- en: 'The variable `b1` will store one of these box data structures:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 变量`b1`将存储一个这样的框数据结构：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This box’s top-left corner is located at an x-coordinate of `300` and a y-coordinate
    of `80`. It has a width of `50` pixels and a height of `100` pixels. Its color
    is `RED`, and its initial direction is `UPRIGHT`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个框的左上角位于x坐标`300`和y坐标`80`。它的宽度为`50`像素，高度为`100`像素。它的颜色是`RED`，初始方向是`UPRIGHT`。
- en: 'Lines 29 and 30 create two more similar data structures for boxes that are
    different sizes, positions, colors, and directions:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第29和30行创建了另外两个类似的数据结构，用于不同大小、位置、颜色和方向的框：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you needed to retrieve a box or value from the list, you could do so using
    indexes and keys. Entering `boxes[0]` would access the dictionary data structure
    in `b1`. If we entered `boxes[0]['color']`, that would access the `'color'` key
    in `b1`, so the expression `boxes[0]['color']` would evaluate to `(255, 0, 0)`.
    You can refer to any of the values in any of the box data structures by starting
    with `boxes`. The three dictionaries, `b1`, `b2`, and `b3`, are then stored in
    a list in the `boxes` variable.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要从列表中检索一个框或值，你可以使用索引和键。输入`boxes[0]`将访问`b1`中的字典数据结构。如果我们输入`boxes[0]['color']`，那将访问`b1`中的`'color'`键，因此表达式`boxes[0]['color']`将求值为`(255,
    0, 0)`。你可以通过从`boxes`开始引用任何框数据结构中的任何值。然后，`b1`、`b2`和`b3`这三个字典被存储在`boxes`变量的列表中。
- en: '**The Game Loop**'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**游戏循环**'
- en: The game loop handles animating the moving boxes. Animations work by drawing
    a series of pictures with slight differences that are shown one right after another.
    In our animation, the pictures will be of the moving boxes and the slight differences
    will be in each box’s position. Each box will move by 4 pixels in each picture.
    The pictures are shown so fast that the boxes will look like they are moving smoothly
    across the screen. If a box hits the side of the window, then the game loop will
    make the box bounce by changing its direction.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏循环处理移动框的动画。动画是通过绘制一系列具有轻微差异的图片来实现的，这些图片依次显示。在我们的动画中，图片将是移动的框，而轻微的差异将在每个框的位置上。每个框在每张图片中移动4个像素。图片显示得如此之快，以至于框看起来像是在屏幕上平稳地移动。如果一个框撞到窗口的边缘，那么游戏循环将通过改变它的方向使框弹起。
- en: Now that we know a little bit about how the game loop will work, let’s code
    it!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道游戏循环将如何工作一点点，让我们来编写代码吧！
- en: '***Handling When the Player Quits***'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***处理玩家退出时***'
- en: 'When the player quits by closing the window, we need to stop the program in
    the same way we did the `pygame` Hello World program. We need to do this in the
    game loop so that our program is constantly checking whether there has been a
    `QUIT` event. Line 34 starts the loop, and lines 36 to 39 handle quitting:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家通过关闭窗口退出时，我们需要像我们之前做`pygame` Hello World程序那样停止程序。我们需要在游戏循环中这样做，以便我们的程序不断检查是否有`QUIT`事件发生。第34行开始循环，第36到39行处理退出：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After that, we want to make sure that `windowSurface` is ready to be drawn on.
    Later, we’ll draw each box on `windowSurface` with the `rect()` method. On each
    iteration through the game loop, the code redraws the entire window with new boxes
    that are located a few pixels over each time. When we do that, we’re not redrawing
    the whole `Surface` object; instead, we’re just adding a drawing of the `Rect`
    object to `windowSurface`. But when the game loop iterates to draw all the `Rect`
    objects again, it redraws every `Rect` and doesn’t erase the old `Rect` drawing.
    If we just let the game loop keep drawing `Rect` objects on the screen, we’ll
    end up with a trail of `Rect` objects instead of a smooth animation. To avoid
    that, we need to clear the window for every iteration of the game loop.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们要确保`windowSurface`已经准备好被绘制。稍后，我们将使用`rect()`方法在`windowSurface`上绘制每个框。在游戏循环的每次迭代中，代码重新绘制整个窗口，新的框每次都会稍微移动一些像素。当我们这样做时，我们并不是重新绘制整个`Surface`对象；相反，我们只是向`windowSurface`添加`Rect`对象的绘制。但是当游戏循环迭代以再次绘制所有`Rect`对象时，它会重新绘制每个`Rect`，而不会擦除旧的`Rect`绘制。如果我们让游戏循环继续在屏幕上绘制`Rect`对象，最终我们会得到一串`Rect`对象，而不是平滑的动画。为了避免这种情况，我们需要在每次游戏循环迭代时清除窗口。
- en: 'In order to do that, line 42 fills the entire `Surface` with white so that
    anything previously drawn on it is erased:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，第42行填充整个`Surface`为白色，以便擦除先前在其上绘制的任何东西：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Without calling `windowSurface.fill(WHITE)` to white out the entire window before
    drawing the rectangles in their new position, you would have a trail of `Rect`
    objects. If you want to try it out and see what happens, you can comment out line
    42 by putting a `#` at the beginning of the line.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不调用`windowSurface.fill(WHITE)`来将整个窗口涂白，然后在新位置绘制矩形，你将得到一串`Rect`对象。如果你想尝试一下并看看会发生什么，你可以在第42行的开头加上`#`注释掉该行。
- en: Once `windowSurface` is filled, we can start drawing all of our `Rect` objects.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`windowSurface`填满，我们就可以开始绘制所有的`Rect`对象。
- en: '***Moving Each Box***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***移动每个框***'
- en: 'In order to update the position of each box, we need to iterate over the `boxes`
    list inside the game loop:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更新每个框的位置，我们需要在游戏循环内迭代`boxes`列表：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Inside the `for` loop, you’ll refer to the current box as `b` to make the code
    easier to type. We need to change each box depending on the direction it is already
    moving, so we’ll use `if` statements to figure out the box’s direction by checking
    the `dir` key inside the box data structure. Then we’ll change the box’s position
    depending on the direction the box is moving.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在`for`循环内，你将把当前的框称为`b`，以使代码更容易输入。我们需要根据框已经移动的方向来改变每个框，因此我们将使用`if`语句来通过检查框数据结构内的`dir`键来确定框的方向。然后我们将根据框移动的方向改变框的位置。
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The new value to set the `left` and `top` attributes of each box to depends
    on the box’s direction. If the direction is either `DOWNLEFT` or `DOWNRIGHT`,
    you want to *increase* the `top` attribute. If the direction is `UPLEFT` or `UPRIGHT`,
    you want to *decrease* the `top` attribute.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 设置每个框的`left`和`top`属性的新值取决于框的方向。如果方向是`DOWNLEFT`或`DOWNRIGHT`，则要*增加*`top`属性。如果方向是`UPLEFT`或`UPRIGHT`，则要*减少*`top`属性。
- en: If the box’s direction is `DOWNRIGHT` or `UPRIGHT`, you want to *increase* the
    `left` attribute. If the direction is `DOWNLEFT` or `UPLEFT`, you want to *decrease*
    the `left` attribute.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果框的方向是`DOWNRIGHT`或`UPRIGHT`，则要*增加*`left`属性。如果方向是`DOWNLEFT`或`UPLEFT`，则要*减少*`left`属性。
- en: The value of these attributes will increase or decrease by the amount of the
    integer stored in `MOVESPEED`, which stores how many pixels the boxes move on
    each iteration through the game loop. We set `MOVESPEED` on line 19.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性的值将根据存储在`MOVESPEED`中的整数的数量增加或减少，该整数存储了每次游戏循环迭代中框移动的像素数。我们在第19行设置了`MOVESPEED`。
- en: For example, if `b['dir']` is set to `'downleft'`, `b['rect'].left` to `40`,
    and `b['rect'].top` to `100`, then the condition on line 46 will be `True`. If
    `MOVESPEED` is set to `4`, then lines 47 and 48 will change the `Rect` object
    so that `b['rect'].left` is `36` and `b['rect'].top` is `104`. Changing the `Rect`
    value then causes the drawing code on line 86 to draw the rectangle slightly down
    and to the left of its previous position.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`b['dir']`设置为`'downleft'`，`b['rect'].left`设置为`40`，`b['rect'].top`设置为`100`，那么第46行的条件将为`True`。如果`MOVESPEED`设置为`4`，那么第47和48行将改变`Rect`对象，使得`b['rect'].left`为`36`，`b['rect'].top`为`104`。然后改变`Rect`值会导致第86行的绘图代码在其先前位置的稍微向下和向左绘制矩形。
- en: '***Bouncing a Box***'
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***弹跳框***'
- en: After lines 44 to 57 have moved the box, we need to check whether the box has
    gone past the edge of the window. If it has, you want to bounce the box. In the
    code, this means the `for` loop will set a new value for the box’s `'dir'` key.
    The box will move in the new direction on the next iteration of the game loop.
    This makes it look like the box has bounced off the side of the window.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在第44到57行移动框之后，我们需要检查框是否已经超出了窗口的边缘。如果是，你想要让框弹跳。在代码中，这意味着`for`循环将为框的`'dir'`键设置一个新值。框将在游戏循环的下一次迭代中朝着新的方向移动。这使得看起来像框已经从窗口的一侧弹开了。
- en: 'In the `if` statement on line 60, we determine that the box has moved past
    the top edge of the window if the `top` attribute of the box’s `Rect` object is
    less than `0`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在第60行的`if`语句中，我们确定如果框的`Rect`对象的`top`属性小于`0`，则框已经移动到窗口的顶部边缘：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In that case, the direction will be changed based on which direction the box
    was moving. If the box was moving `UPLEFT`, then it will now move `DOWNLEFT`;
    if it was moving `UPRIGHT`, it will now move `DOWNRIGHT`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，方向将根据框移动的方向进行更改。如果框是向`UPLEFT`移动的，那么现在将移动到`DOWNLEFT`；如果它是向`UPRIGHT`移动的，那么现在将移动到`DOWNRIGHT`。
- en: 'Lines 66 to 71 handle the situation in which the box has moved past the bottom
    edge of the window:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第66到71行处理了框移动到窗口底部边缘之外的情况：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: These lines check whether the `bottom` attribute (not the `top` attribute) is
    *greater* than the value in `WINDOWHEIGHT`. Remember that the y-coordinates start
    at `0` at the top of the window and increase to `WINDOWHEIGHT` at the bottom.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行检查`bottom`属性（而不是`top`属性）是否*大于*`WINDOWHEIGHT`中的值。记住，y坐标从窗口顶部的`0`开始，并在底部增加到`WINDOWHEIGHT`。
- en: 'Lines 72 to 83 handle the behavior of the boxes when they bounce off the sides:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 第72到83行处理了方块在撞击边缘时的行为。
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Lines 78 to 83 are similar to lines 72 to 77 but check whether the right side
    of the box has moved past the window’s right edge. Remember, the x-coordinates
    start at `0` on the window’s left edge and increase to `WINDOWWIDTH` on the window’s
    right edge.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 第78到83行与第72到77行类似，但是检查方块的右侧是否移动到了窗口的右边缘。记住，x坐标从窗口的左边缘开始为`0`，并在窗口的右边缘增加到`WINDOWWIDTH`。
- en: '***Drawing the Boxes on the Window in Their New Positions***'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在它们的新位置上在窗口上绘制方块***'
- en: 'Every time the boxes move, we need to draw them in their new positions on `windowSurface`
    by calling the `pygame.draw.rect()` function:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 每当方块移动时，我们需要通过调用`pygame.draw.rect()`函数在`windowSurface`上绘制它们的新位置：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You need to pass `windowSurface` to the function because it is the `Surface`
    object to draw the rectangle on. Pass `b['color']` to the function because it
    is the rectangle’s color. Finally, pass `b['rect']` because it is the `Rect` object
    with the position and size of the rectangle to draw.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将`windowSurface`传递给函数，因为它是要在其上绘制矩形的`Surface`对象。将`b['color']`传递给函数，因为它是矩形的颜色。最后，传递`b['rect']`，因为它是具有矩形位置和大小的`Rect`对象。
- en: Line 86 is the last line of the `for` loop.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 第86行是`for`循环的最后一行。
- en: '***Drawing the Window on the Screen***'
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在屏幕上绘制窗口***'
- en: 'After the `for` loop, each box in the `boxes` list will be drawn, so you need
    to call `pygame.display.update()` to draw `windowSurface` on the screen:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在`for`循环之后，`boxes`列表中的每个方块都将被绘制，因此你需要调用`pygame.display.update()`来在屏幕上绘制`windowSurface`：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The computer can move, bounce, and draw the boxes so fast that if the program
    ran at full speed, all the boxes would look like a blur. In order to make the
    program run slowly enough that we can see the boxes, we need to add `time.sleep(0.02)`.
    You can try commenting out the `time.sleep(0.02)` line and running the program
    to see what it looks like. The call to `time.sleep()` will pause the program for
    0.02 seconds, or 20 milliseconds, between each movement of the boxes.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机可以移动、弹跳和绘制方块得非常快，以至于如果程序以全速运行，所有的方块看起来都像一片模糊。为了使程序运行得足够慢，以至于我们能看到方块，我们需要添加`time.sleep(0.02)`。你可以尝试注释掉`time.sleep(0.02)`这一行，并运行程序看看它是什么样子。调用`time.sleep()`将在每次方块移动之间暂停程序0.02秒，或20毫秒。
- en: After this line, execution returns to the start of the game loop and begins
    the process all over again. This way, the boxes are constantly moving a little,
    bouncing off the walls, and being drawn on the screen in their new positions.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行之后，执行返回到游戏循环的开始，并重新开始整个过程。这样，方块们不断地移动一点，撞到墙上，并在屏幕上以它们的新位置被绘制出来。
- en: '**Summary**'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: This chapter has presented a whole new way of creating computer programs. The
    previous chapters’ programs would stop and wait for the player to enter text.
    However, in our Animation program, the program constantly updates the data structures
    without waiting for input from the player.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了创建计算机程序的全新方式。之前章节的程序会停下来等待玩家输入文本。然而，在我们的动画程序中，程序会不断更新数据结构，而不需要等待玩家的输入。
- en: Remember that we had data structures that would represent the state of the board
    in our Hangman and Tic-Tac-Toe games. These data structures were passed to a `drawBoard()`
    function to be displayed on the screen. Our Animation program is similar. The
    `boxes` variable holds a list of data structures representing boxes to be drawn
    to the screen, and these are drawn inside the game loop.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 记住我们在Hangman和Tic-Tac-Toe游戏中有代表棋盘状态的数据结构。这些数据结构被传递给`drawBoard()`函数以在屏幕上显示。我们的动画程序类似。`boxes`变量保存了一个代表要绘制到屏幕上的方块的数据结构列表，并且这些方块是在游戏循环内绘制的。
- en: But without calls to `input()`, how do we get input from the player? In [Chapter
    19](#calibre_link-97), we’ll cover how programs know when the player presses keys
    on the keyboard. We’ll also learn about a new concept called collision detection.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 但是没有调用`input()`，我们怎么从玩家那里获取输入呢？在[第19章](#calibre_link-97)中，我们将介绍程序如何知道玩家何时按下键盘上的按键。我们还将学习一个叫做碰撞检测的新概念。
- en: '[Prev: Chapter 17 - Creating Graphics](chapter17.html) | [Next: Chapter 19
    - Collision Detection](chapter19.html)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一页：第17章 - 创建图形](chapter17.html) | [下一页：第19章 - 碰撞检测](chapter19.html)'

- en: 13 SONAR TREASURE HUNT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13 声纳寻宝
- en: 原文：[https://inventwithpython.com/invent4thed/chapter13.html](https://inventwithpython.com/invent4thed/chapter13.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://inventwithpython.com/invent4thed/chapter13.html](https://inventwithpython.com/invent4thed/chapter13.html)
- en: '[Prev: Chapter 12 - The Cartesian Coordinate System](chapter12.html) | [Next:
    Chapter 14 - Caesar Cipher](chapter14.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[Prev: Chapter 12 - The Cartesian Coordinate System](chapter12.html) | [Next:
    Chapter 14 - Caesar Cipher](chapter14.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
- en: The Sonar Treasure Hunt game in this chapter is the first to make use of the
    Cartesian coordinate system that you learned about in [Chapter 12](#calibre_link-72).
    This game also uses data structures, which is just a fancy way of saying it has
    list values that contain other lists and similar complex variables. As the games
    you program become more complicated, you’ll need to organize your data into data
    structures.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的声纳寻宝游戏是第一个使用你在[第12章](#calibre_link-72)中学到的笛卡尔坐标系的游戏。这个游戏还使用了数据结构，这只是说它有包含其他列表和类似复杂变量的列表值。随着你编写的游戏变得更加复杂，你需要将数据组织成数据结构。
- en: In this chapter’s game, the player drops sonar devices at various places in
    the ocean to locate sunken treasure chests. *Sonar* is a technology that ships
    use to locate objects under the sea. The sonar devices in this game tell the player
    how far away the closest treasure chest is, but not in what direction. But by
    placing multiple sonar devices, the player can figure out the location of the
    treasure chest.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的游戏中，玩家在海洋的各个地方放置声纳设备来寻找沉没的宝藏。*声纳*是船只用来在海底找到物体的技术。这个游戏中的声纳设备告诉玩家最近的宝藏箱离他有多远，但没有告诉他方向。但是通过放置多个声纳设备，玩家可以找出宝藏箱的位置。
- en: '**TOPICS COVERED IN THIS CHAPTER**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**本章涵盖的主题**'
- en: • Data structures
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: • 数据结构
- en: • The Pythagorean theorem
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: • The Pythagorean theorem
- en: • The `remove()` list method
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • The `remove()` list method
- en: • The `isdigit()` string method
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: • The `isdigit()` string method
- en: • The `sys.exit()` function
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • The `sys.exit()` function
- en: There are 3 chests to collect, and the player has only 20 sonar devices to use
    to find them. Imagine that you couldn’t see the treasure chest in [Figure 13-1](#calibre_link-73).
    Because each sonar device can find only the distance from the chest, not the chest’s
    direction, the treasure could be anywhere on the ring around the sonar device.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有3个宝箱可供寻找，玩家只有20个声纳设备来找到它们。想象一下，你在[图13-1](#calibre_link-73)中看不到宝箱。因为每个声纳设备只能找到离宝箱的距离，而不是宝箱的方向，所以宝藏可能在声纳设备周围的环上的任何地方。
- en: '![image](../Images/58373bebb36aed9f2b7ba01be0c67542.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/58373bebb36aed9f2b7ba01be0c67542.png)'
- en: '*Figure 13-1: The sonar device’s ring touches the (hidden) treasure chest.*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*Figure 13-1: The sonar device’s ring touches the (hidden) treasure chest.*'
- en: But multiple sonar devices working together can narrow down the chest’s location
    to the exact coordinates where the rings intersect (see [Figure 13-2](#calibre_link-74)).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但是多个声纳设备一起工作可以将宝藏箱的位置缩小到环交叉的确切坐标处（见[图13-2](#calibre_link-74)）。
- en: '![image](../Images/ab7fac28de5aac923e26c0e376fbbe7e.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/ab7fac28de5aac923e26c0e376fbbe7e.png)'
- en: '*Figure 13-2: Combining multiple rings shows where treasure chests could be
    hidden.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*Figure 13-2: Combining multiple rings shows where treasure chests could be
    hidden.*'
- en: '**Sample Run of Sonar Treasure Hunt**'
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**声纳寻宝的示例运行**'
- en: Here’s what the user sees when they run the Sonar Treasure Hunt program. The
    text the player enters is shown in bold.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户运行声纳寻宝程序时，用户看到的内容如下。玩家输入的文本以粗体显示。
- en: '[PRE0]~`~[PRE1]~[PRE2]py~~`~~~~~`~~`~~~~` 0'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0]~`~[PRE1]~[PRE2]py~~`~~~~~`~~`~~~~` 0'
- en: 1 ~~~~~`~~~~~[PRE3]`~~``~``~``~~[PRE4]`~~`~ 2
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 1 ~~~~~`~~~~~[PRE3]`~~``~``~``~~[PRE4]`~~`~ 2
- en: 3 [PRE5][PRE6]~~``~~~`~`~~~~~~[PRE7]~~~``~``~` 3
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 3 [PRE5][PRE6]~~``~~~`~`~~~~~~[PRE7]~~~``~``~` 3
- en: 4 ~~~`~~~`~`~~~``~~~`~`~``~~~~``~~~~``~~~~`~`~``~~[PRE8]`~`~`~~``~~~~[PRE9]~[PRE10]py[PRE11]`py``~~[PRE12]py~~~~``~~~`~`~~`~``~~~`~~`~``
    6
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 4 ~~~`~~~`~`~~~``~~~`~`~``~~~~``~~~~``~~~~`~`~``~~[PRE8]`~`~`~~``~~~~[PRE9]~[PRE10]py[PRE11]`py``~~[PRE12]py~~~~``~~~`~`~~`~``~~~`~~`~``
    6
- en: 7 ~`~~~[PRE13]py~`~[PRE14]py~~~`~[PRE15]py~[PRE16]~~~[PRE17]`~~[PRE18]~~`~``~`~~``~`~`~~~~`~`~~`~`~[PRE19]
    9
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 7 ~`~~~[PRE13]py~`~[PRE14]py~~~`~[PRE15]py~[PRE16]~~~[PRE17]`~~[PRE18]~~`~``~`~~``~`~`~~~~`~`~~`~`~[PRE19]
    9
- en: 10 `~~~~~~`~``~``~~~``~``~~~~`~``~[PRE20][PRE21]`~`~~`~~~`~~~``~[PRE22]~`~``~~~~[PRE23]~~~`~~~[PRE24]~`~~[PRE25]~``~`~`~``~[PRE26]~`~~~``~~``~[PRE27][PRE28]~`~[PRE29]~[PRE30]py~~`~~~~~`~~`~~~~`
    0
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 10 `~~~~~~`~``~``~~~``~``~~~~`~``~[PRE20][PRE21]`~`~~`~~~`~~~``~[PRE22]~`~``~~~~[PRE23]~~~`~~~[PRE24]~`~~[PRE25]~``~`~`~``~[PRE26]~`~~~``~~``~[PRE27][PRE28]~`~[PRE29]~[PRE30]py~~`~~~~~`~~`~~~~`
    0
- en: 1 ~~~~~`~~~~~[PRE31]`~~``~``~``~~[PRE32]`~~`~ 2
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 1 ~~~~~`~~~~~[PRE31]`~~``~``~``~~[PRE32]`~~`~ 2
- en: 3 [PRE33][PRE34]~~``~~~`~`~~~~~~[PRE35]~~~``~``~` 3
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 3 [PRE33][PRE34]~~``~~~`~`~~~~~~[PRE35]~~~``~``~` 3
- en: 4 ~~~`~~~`~`~~~``~~~`~`~``~~~~``~~~~``~~~~`~`~``~~[PRE36]`~`~`~~``~~~~[PRE37]~~~~[PRE38]``~``~~~`~~``~~[PRE39]~~`~~[PRE40][PRE41]~[PRE42]~``~[PRE43]~~~~~~~`~~`~`~~~~``~[PRE44]~``~``~`
    7
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 4 ~~~`~~~`~`~~~``~~~`~`~``~~~~``~~~~``~~~~`~`~``~~[PRE36]`~`~`~~``~~~~[PRE37]~~~~[PRE38]``~``~~~`~~``~~[PRE39]~~`~~[PRE40][PRE41]~[PRE42]~``~[PRE43]~~~~~~~`~~`~`~~~~``~[PRE44]~``~``~`
    7
- en: 8 `~``~~`~`~~`~~`~~``~[PRE45]`~`~[PRE46]`~~~[PRE47]`~~[PRE48]~~`~``~`~~``~`~`~~~~`~`~~`~`~[PRE49]
    9
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 8 `~``~~`~`~~`~~`~~``~[PRE45]`~`~[PRE46]`~~~[PRE47]`~~[PRE48]~~`~``~`~~``~`~`~~~~`~`~~`~`~[PRE49]
    9
- en: 10 `~~~~~~`~``~``~~~``~``~~~~`~``~[PRE50][PRE51]`~`~~`~~~`~~~``~[PRE52]~`~``~~~~[PRE53]~~~`~~~[PRE54]~`~~[PRE55]~``~`~`~``~[PRE56]~`~~~``~~``~[PRE57][PRE58]~`~[PRE59]~[PRE60]py~~`~~~~~`~~`~~~~`
    0
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 10 `~~~~~~`~``~``~~~``~``~~~~`~``~[PRE50][PRE51]`~`~~`~~~`~~~``~[PRE52]~`~``~~~~[PRE53]~~~`~~~[PRE54]~`~~[PRE55]~``~`~`~``~[PRE56]~`~~~``~~``~[PRE57][PRE58]~`~[PRE59]~[PRE60]py~~`~~~~~`~~`~~~~`
    0
- en: 1 ~~~~~`~~~~~[PRE61]`~~``~``~``~~[PRE62]`~~`~ 2
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 1 ~~~~~`~~~~~[PRE61]`~~``~``~``~~[PRE62]`~~`~ 2
- en: 3 [PRE63][PRE64]~~``~~~`~`~~~~~~[PRE65]~~~``~``~` 3
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 3 [PRE63][PRE64]~~``~~~`~`~~~~~~[PRE65]~~~``~``~` 3
- en: 4 ~~~`~~~`~`~~~``~~~`~`~``~~~~``~~~~``~~~~`~`~``~~[PRE66]`~`~`~~``~~~~[PRE67][PRE68]`
    5
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 4 ~~~`~~~`~`~~~``~~~`~`~``~~~~``~~~~``~~~~`~`~``~~[PRE66]`~`~`~~``~~~~[PRE67][PRE68]`
    5
- en: 6 ~`~[PRE69]~[PRE70]``~~[PRE71]~~~~``~~~`~`~~`~``~~~`~~`~`` 6
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 6 ~`~[PRE69]~[PRE70]``~~[PRE71]~~~~``~~~`~`~~`~``~~~`~~`~`` 6
- en: 7 ~`~~~[PRE72]~`~[PRE73]~~~`~[PRE74]~[PRE75]~``~[PRE76]`~~``~~``~~` 8
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 7 ~`~~~[PRE72]~`~[PRE73]~~~`~[PRE74]~[PRE75]~``~[PRE76]`~~``~~``~~` 8
- en: 9 ~`~``~~[PRE77]~`~~[PRE78]~~[PRE79]~`~~``~~~~~~[PRE80]~~`~``~~ 10
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 9 ~`~``~~[PRE77]~`~~[PRE78]~~[PRE79]~`~~``~~~~~~[PRE80]~~`~``~~ 10
- en: 11 ~``~~~[PRE81]`~~~[PRE82]~`~`~~ 11
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 11 ~``~~~[PRE81]`~~~[PRE82]~`~`~~ 11
- en: 12 ~~~~~``~`~[PRE83]`~~~`~~~[PRE84]~`~~[PRE85]~``~`~`~``~[PRE86]~`~~~``~~``~[PRE87][PRE88]~`~[PRE89]~[PRE90]py~~`~~~~~`~~`~~~~`
    0
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 12 ~~~~~``~`~[PRE83]`~~~`~~~[PRE84]~`~~[PRE85]~``~`~`~``~[PRE86]~`~~~``~~``~[PRE87][PRE88]~`~[PRE89]~[PRE90]py~~`~~~~~`~~`~~~~`
    0
- en: 1 ~~~~~`~~~~~[PRE91]`~~``~``~``~~[PRE92]`~~`~ 2
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 1 ~~~~~`~~~~~[PRE91]`~~``~``~``~~[PRE92]`~~`~ 2
- en: 3 [PRE93][PRE94]~~``~~~`~`~~~~~~[PRE95]~~~``~``~` 3
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 3 [PRE93][PRE94]~~``~~~`~`~~~~~~[PRE95]~~~``~``~` 3
- en: 4 ~~~`~~~`~`~~~``~~~`~`~``~~~~``~~~~``~~~~`~`~``~~[PRE96]`~`~`~~``~~~~[PRE97][PRE98]`
    5
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 4 ~~~`~~~`~`~~~``~~~`~`~``~~~~``~~~~``~~~~`~`~``~~[PRE96]`~`~`~~``~~~~[PRE97][PRE98]`
    5
- en: 6 ~`~[PRE99]~[PRE100]``~~[PRE101]~~~~``~~~`~`~~`~``~~~`~~`~`` 6
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 6 ~`~[PRE99]~[PRE100]``~~[PRE101]~~~~``~~~`~`~~`~``~~~`~~`~`` 6
- en: 7 ~`~~~[PRE102]~`~[PRE103]~~~`~[PRE104]~[PRE105]~``~[PRE106]`~~``~~``~~` 8
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 7 ~`~~~[PRE102]~`~[PRE103]~~~`~[PRE104]~[PRE105]~``~[PRE106]`~~``~~``~~` 8
- en: 9 ~`~``~~[PRE107]~`~~[PRE108]~~[PRE109]~`~~``~~~~~~[PRE110]~~`~``~~ 10
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 9 ~`~``~~[PRE107]~`~~[PRE108]~~[PRE109]~`~~``~~~~~~[PRE110]~~`~``~~ 10
- en: 11 ~``~~~[PRE111]`~~~[PRE112]~`~`~~ 11
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 11 ~``~~~[PRE111]`~~~[PRE112]~`~`~~ 11
- en: 12 ~~~~~``~`~[PRE113]`~~~`~~~[PRE114]~`~~[PRE115]~``~`~`~``~[PRE116]~`~~~``~~``~[PRE117][PRE118]~`~[PRE119]~[PRE120]py~~`~~~~~`~~`~~~~`
    0
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 12 ~~~~~``~`~[PRE113]`~~~`~~~[PRE114]~`~~[PRE115]~``~`~`~``~[PRE116]~`~~~``~~``~[PRE117][PRE118]~`~[PRE119]~[PRE120]py~~`~~~~~`~~`~~~~`
    0
- en: 1 ~~~~~`~~~~~[PRE121]`~~``~``~``~~[PRE122]`~~`~ 2
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 1 ~~~~~`~~~~~[PRE121]`~~``~``~``~~[PRE122]`~~`~ 2
- en: 3 [PRE123][PRE124]~~``~~~`~`~~~~~~[PRE125]~~~``~``~` 3
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 3 [PRE123][PRE124]~~``~~~`~`~~~~~~[PRE125]~~~``~``~` 3
- en: 4 ~~~`~~~`~`~~~``~~~`~`~``~~~~``~~~~``~~~~`~`~``~~[PRE126]`~`~`~~``~~~~[PRE127][PRE128]`
    5
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 4 ~~~`~~~`~`~~~``~~~`~`~``~~~~``~~~~``~~~~`~`~``~~[PRE126]`~`~`~~``~~~~[PRE127][PRE128]`
    5
- en: 6 ~`~[PRE129]~[PRE130]``~~[PRE131]~~~~``~~~`~`~~`~``~~~`~~`~`` 6
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 6 ~`~[PRE129]~[PRE130]``~~[PRE131]~~~~``~~~`~`~~`~``~~~`~~`~`` 6
- en: 7 ~`~~~[PRE132]~`~[PRE133]~~~`~[PRE134]~[PRE135]~``~[PRE136]`~~``~~``~~` 8
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 7 ~`~~~[PRE132]~`~[PRE133]~~~`~[PRE134]~[PRE135]~``~[PRE136]`~~``~~``~~` 8
- en: 9 ~`~``~~[PRE137]~`~~[PRE138]~~[PRE139]~`~~``~~~~~~[PRE140]~~`~``~~ 10
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 9 ~`~``~~[PRE137]~`~~[PRE138]~~[PRE139]~`~~``~~~~~~[PRE140]~~`~``~~ 10
- en: 11 ~``~~~[PRE141]`~~~[PRE142]~`~`~~ 11
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 11 ~``~~~[PRE141]`~~~[PRE142]~`~`~~ 11
- en: 12 ~~~~~``~`~[PRE143]`~~~`~~~[PRE144]~`~~[PRE145]~``~`~`~``~[PRE146]~`~~~``~~``~[PRE147][PRE148]
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 12 ~~~~~``~`~[PRE143]`~~~`~~~[PRE144]~`~~[PRE145]~``~`~`~``~[PRE146]~`~~~``~~``~[PRE147][PRE148]
- en: '**Source Code for Sonar Treasure Hunt**'
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**声纳寻宝的源代码**'
- en: Enter the following source code in a new file and save the file as *sonar.py*.
    Then run it by pressing F5 (or FN-F5 on OS X). If you get errors after entering
    this code, compare the code you typed to the book’s code with the online diff
    tool at *[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在新文件中输入以下源代码并将文件保存为*sonar.py*。然后按F5（或OS X上的FN-F5）运行它。如果在输入此代码后出现错误，请使用在线diff工具将您输入的代码与本书代码进行比较，网址为*[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*。
- en: '![image](../Images/b4e69b1df0320a5805abf50d4a776e32.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/b4e69b1df0320a5805abf50d4a776e32.png)'
- en: '*sonar.py*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*sonar.py*'
- en: '[PRE149]~`~``~~~``~`~~``~~~``~`~ 0'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE149]~`~``~~~``~`~~``~~~``~`~ 0'
- en: 122.         1 ~`~`~``~~`~[PRE150]~~`~`~~~`~~~~ 1
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 122.         1 ~`~`~``~~`~[PRE150]~~`~`~~~`~~~~ 1
- en: 123.         2 `~`C``3`~~~~`C`~~~~[PRE151][PRE152]``~~~`~[PRE153]~``~ 4
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 123.         2 `~`C``3`~~~~`C`~~~~[PRE151][PRE152]``~~~`~[PRE153]~``~ 4
- en: '126.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '126.'
- en: 127.           012345678901234567890123456789012
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 127.           012345678901234567890123456789012
- en: 128.                     1         2         3
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 128.                     1         2         3
- en: 129\. (In the real game, the chests are not visible in the ocean.)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 129\. （在真正的游戏中，宝箱在海洋中是不可见的。）
- en: '130.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '130.'
- en: 131\. Press enter to continue...''')
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 131\. 按Enter键继续...''')
- en: 132.     input()
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 132.     input()
- en: '133.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '133.'
- en: 134.     print('''When you drop a sonar device directly on a chest, you
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 134.     print('''当你直接将声纳设备放在宝箱上时，你
- en: retrieve it and the other
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 检索它和其他
- en: 135\. sonar devices update to show how far away the next nearest chest is. The
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '135\. 声纳设备更新以显示下一个最近宝箱的距离。 '
- en: chests
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 宝箱
- en: 136\. are beyond the range of the sonar device on the left, so it shows an X.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 136\. 超出左侧声纳设备范围的宝箱，因此显示为X。
- en: '137.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '137.'
- en: 138.                     1         2         3
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 138.                     1         2         3
- en: 139.           012345678901234567890123456789012
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 139.           012345678901234567890123456789012
- en: '140.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '140.'
- en: 141.         0 ~~~~`~[PRE154]~~~[PRE155]``~~``~~~`` 2
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 141.         0 ~~~~`~[PRE154]~~~[PRE155]``~~``~~~`` 2
- en: 144.         3 [PRE156]``~~~[PRE157]``~`~``~` 3
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 144.         3 [PRE156]``~~~[PRE157]``~`~``~` 3
- en: 145.         4 ~`~~~~`~~`~~`C`~``~~`~~~`~[PRE158]
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 145.         4 ~`~~~~`~~`~~`C`~``~~`~~~`~[PRE158]
- en: '**Designing the Program**'
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**程序设计**'
- en: Before trying to understand the source code, play the game a few times to learn
    what is going on. The Sonar Treasure Hunt game uses lists of lists and other complicated
    variables, called *data structures*. Data structures store arrangements of values
    to represent something. For example, in [Chapter 10](#calibre_link-12), a Tic-Tac-Toe
    board data structure was a list of strings. The string represented an *X*, an
    *O*, or an empty space, and the index of the string in the list represented the
    space on the board. The Sonar Treasure Hunt game will have similar data structures
    for the locations of treasure chests and sonar devices.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试理解源代码之前，玩几次游戏以了解发生了什么。声纳寻宝游戏使用列表的列表和其他复杂的变量，称为*数据结构*。数据结构存储值的排列以表示某些东西。例如，在[第10章](#calibre_link-12)中，井字棋板数据结构是一个字符串列表。字符串代表*X*、*O*或空格，列表中字符串的索引代表棋盘上的空格。声纳寻宝游戏将有类似的数据结构来表示宝箱和声纳设备的位置。
- en: '**Importing the random, sys, and math Modules**'
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**导入random、sys和math模块**'
- en: 'At the start of the program, we import the `random`, `sys`, and `math` modules:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序开始时，我们导入`random`、`sys`和`math`模块：
- en: '[PRE159]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: The `sys` module contains the `exit()` function, which terminates the program
    immediately. None of the lines of code after the `sys.exit()` call will run; the
    program just stops as though it has reached the end. This function is used later
    in the program.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`sys`模块包含`exit()`函数，用于立即终止程序。`sys.exit()`调用后的代码行将不会运行；程序就像已经到达了结尾一样停止。此函数稍后在程序中使用。'
- en: The `math` module contains the `sqrt()` function, which is used to find the
    square root of a number. The math behind square roots is explained the “[Finding
    the Closest Treasure Chest](#calibre_link-75)” on [page 186](#calibre_link-76).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`math`模块包含`sqrt()`函数，用于找到一个数字的平方根。平方根背后的数学在[第186页](#calibre_link-76)的“[寻找最近的宝箱](#calibre_link-75)”中有解释。'
- en: '**Creating a New Game Board**'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**创建新游戏板**'
- en: The start of each new game requires a new `board` data structure, which is created
    by `getNewBoard()`. The Sonar Treasure Hunt game board is an ASCII art ocean with
    x- and y-coordinates around it.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 每个新游戏的开始都需要一个新的`board`数据结构，由`getNewBoard()`创建。声纳寻宝游戏板是一个ASCII艺术海洋，周围有x和y坐标。
- en: 'When we use the `board` data structure, we want to be able to access its coordinate
    system in the same way we access Cartesian coordinates. To do that, we’ll use
    a list of lists to call each coordinate on the board like this: `board[x][y]`.
    The x-coordinate comes before the y-coordinate—to get the string at coordinate
    (26, 12), you access `board[26][12]`, not `board[12][26]`.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`board`数据结构时，我们希望能够以与访问笛卡尔坐标相同的方式访问其坐标系统。为此，我们将使用一个列表的列表来调用棋盘上的每个坐标，如`board[x][y]`。x坐标在y坐标之前——要获取坐标（26,
    12）处的字符串，您访问`board[26][12]`，而不是`board[12][26]`。
- en: '[PRE160]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: The `board` data structure is a list of lists of strings. The first list represents
    the x-coordinate. Since the game’s board is 60 characters across, this first list
    needs to contain 60 lists. At line 10, we create a `for` loop that will append
    60 blank lists to it.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`board`数据结构是一个字符串列表的列表。第一个列表代表x坐标。由于游戏板宽60个字符，因此这个第一个列表需要包含60个列表。在第10行，我们创建了一个`for`循环，将60个空列表附加到其中。'
- en: But `board` is more than just a list of 60 blank lists. Each of the 60 lists
    represents an x-coordinate of the game board. There are 15 rows in the board,
    so each of these 60 lists must contain 15 strings. Line 12 is another `for` loop
    that adds 15 single-character strings that represent the ocean.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 但`board`不仅仅是60个空列表的列表。这60个列表中的每一个代表游戏板的一个x坐标。棋盘上有15行，因此这60个列表中的每一个必须包含15个字符串。第12行是另一个`for`循环，它添加了15个表示海洋的单字符字符串。
- en: The ocean will be a bunch of randomly chosen `'~'` and `'`'` strings. The tilde
    (`~`) and backtick ([PRE161]
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 海洋将是一堆随机选择的`'~'`和`'`'`字符串。波浪（`~`）和反引号（[PRE161]
- en: ~~~~`
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ~~~~`
- en: ~~~`~
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: ~~~`~
- en: '[PRE162]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'Finally, the function returns the value in the `board` variable on line 18:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，函数返回第18行的`board`变量中的值：
- en: '[PRE163]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '**Drawing the Game Board**'
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**绘制游戏板**'
- en: 'Next we’ll define the `drawBoard()` method that we call whenever we actually
    draw a new board:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将定义`drawBoard()`方法，每当我们实际绘制新棋盘时都会调用它：
- en: '[PRE164]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: 'The full game board with coordinates along the edges looks like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 带有边缘坐标的完整游戏板如下所示：
- en: '[PRE165][PRE166]~`~` 0'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE165][PRE166]~`~` 0'
- en: 1 `~`~[PRE167]~[PRE168]~`~~~``~~`~~~[PRE169]~`~``~~``~~`~~` 1
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 1 `~`~[PRE167]~[PRE168]~`~~~``~~`~~~[PRE169]~`~``~~``~~`~~` 1
- en: 2 [PRE170]py~~~``~[PRE171]~[PRE172]``~ 3
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 2 [PRE170]py~~~``~[PRE171]~[PRE172]``~ 3
- en: 4 ~[PRE173]`~~~~[PRE174]`~`~~`~`~~``~~`~``~`~``~~ 4
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 4 ~[PRE173]`~~~~[PRE174]`~`~~`~`~~``~~`~``~`~``~~ 4
- en: 5 `~[PRE175]~~``~[PRE176]~~``~`~`~~~~`~~``~~~~~~`~[PRE177]py``~[PRE178]~~~`~~`~~`~~`~~
    7
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 5 `~[PRE175]~~``~[PRE176]~~``~`~`~~~~`~~``~~~~~~`~[PRE177]py``~[PRE178]~~~`~~`~~`~~`~~
    7
- en: 8 ~~`~`~~[PRE179]~[PRE180]~~~~~~`~`~~~~` 8
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 8 ~~`~`~~[PRE179]~[PRE180]~~~~~~`~`~~~~` 8
- en: 9 [PRE181]~``~``~~~[PRE182]`~[PRE183] 9
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 9 [PRE181]~``~``~~~[PRE182]`~[PRE183] 9
- en: 10 `~~~~[PRE184]`~`~`~~``~`~~~~`~``~``~[PRE185][PRE186]`` 10
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 10 `~~~~[PRE184]`~`~`~~``~`~~~~`~``~``~[PRE185][PRE186]`` 10
- en: 11 ~~`~`~~`~``~`~~~[PRE187][PRE188]``~~[PRE189]~~~[PRE190][PRE191][PRE192][PRE193]~~~~[PRE194][PRE195]~``~`~~~~
    13
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 11 ~~`~`~~`~``~`~~~[PRE187][PRE188]``~~[PRE189]~~~[PRE190][PRE191][PRE192][PRE193]~~~~[PRE194][PRE195]~``~`~~~~
    13
- en: 14 ~~~``~[PRE196]``~~`~`~``~~`~``~`~~`~`~``~`~``~~``~`~``~[PRE197]
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 14 ~~~``~[PRE196]``~~`~`~``~~`~``~`~~`~`~``~`~``~~``~`~``~[PRE197]
- en: 'The drawing in the `drawBoard()` function has four steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`drawBoard()`函数中的绘制有四个步骤：'
- en: Create a string variable of the line with 1, 2, 3, 4, and 5 spaced out with
    wide gaps. These numbers mark the coordinates for 10, 20, 30, 40, and 50 on the
    x-axis.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个字符串变量，其中1、2、3、4和5之间用宽间隔分隔。这些数字标记了x轴上的10、20、30、40和50的坐标。
- en: Use that string to display the x-axis coordinates along the top of the screen.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用该字符串在屏幕顶部显示x轴坐标。
- en: Print each row of the ocean along with the y-axis coordinates on both sides
    of the screen.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印海洋的每一行以及屏幕两侧的y轴坐标。
- en: Print the x-axis again at the bottom. Having coordinates on all sides makes
    it easier to see where to place a sonar device.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在底部再次打印x轴。在所有侧面都有坐标使得更容易看到在哪里放置声纳设备。
- en: '***Drawing the X-Coordinates Along the Top of the Board***'
  id: totrans-119
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在棋盘顶部绘制x坐标***'
- en: The first part of `drawBoard()` prints the x-axis at the top of the board. Because
    we want each part of the board to be even, each coordinate label can take up only
    one character space. When the coordinate numbering reaches 10, there are two digits
    for each number, so we put the digits in the tens place on a separate line, as
    shown in [Figure 13-3](#calibre_link-77). The x-axis is organized so that the
    first line shows the tens-place digits and the second line shows the onesplace
    digits.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`drawBoard()`的第一部分在棋盘顶部打印x轴。因为我们希望棋盘的每个部分都是均匀的，所以每个坐标标签只能占用一个字符空间。当坐标编号达到10时，每个数字有两位数，因此我们将十位数放在单独的一行上，如[图13-3](#calibre_link-77)所示。x轴的组织方式是第一行显示十位数，第二行显示个位数。'
- en: '![image](../Images/695b5b710b72551c55e514b53df4c7e4.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/695b5b710b72551c55e514b53df4c7e4.png)'
- en: '*Figure 13-3: The spacing used for printing the top of the game board*'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13-3：用于打印游戏板顶部的间距*'
- en: 'Lines 22 to 24 create the string for the first line of the board, which is
    the tens-place part of the x-axis:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 22到24行创建了棋盘第一行的字符串，这是x轴的十位部分：
- en: '[PRE198]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'The numbers marking the tens position on the first line all have 9 spaces between
    them, and there are 13 spaces in front of the `1`. Lines 22 to 24 create a string
    with this line and store it in a variable named `tensDigitsLine`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行上标记十位数的数字之间都有9个空格，数字1前面有13个空格。22到24行创建了一个包含此行的字符串，并将其存储在名为`tensDigitsLine`的变量中：
- en: '[PRE199]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'To print the numbers across the top of the game board, first print the contents
    of the `tensDigitsLine` variable. Then, on the next line, print three spaces (so
    that this row lines up correctly), and then print the string `''0123456789''`
    six times: `(''0123456789'' * 6)`.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印游戏板顶部的数字，首先打印`tensDigitsLine`变量的内容。然后，在下一行打印三个空格（以便这一行正确对齐），然后打印字符串`'0123456789'`六次：`('0123456789'
    * 6)`。
- en: '***Drawing the Ocean***'
  id: totrans-128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***绘制海洋***'
- en: 'Lines 32 to 44 print each row of the ocean waves, including the numbers down
    the sides to label the y-axis:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 32到44行打印海洋波浪的每一行，包括沿着两侧标记y轴的数字：
- en: '[PRE200]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: The `for` loop prints rows 0 to 14, along with the row numbers on either side
    of the board.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环打印了0到14行，以及棋盘两侧的行号。'
- en: 'But we have the same problem that we had with the x-axis. Numbers with only
    one digit (such as 0, 1, 2, and so on) take up only one space when printed, but
    numbers with two digits (such as 10, 11, and 12) take up two spaces. The rows
    won’t line up if the coordinates have different sizes. The board would look like
    this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们与x轴遇到的问题相同。只有一位数字的数字（例如0,1,2等）在打印时只占用一个空间，但是两位数字（例如10,11和12）占用两个空间。如果坐标大小不同，行将不对齐。棋盘将如下所示：
- en: '[PRE201]~``~~``~~~``~~`~`~~`~`~[PRE202]~~~[PRE203]~``~`~~~`~~[PRE204]~[PRE205]~`~~`~~~~~`~``~~~~~[PRE206]~`~[PRE207]~~[PRE208]`~`~``~[PRE209][PRE210][PRE211]`~`~~``~`~~~~`~~~`~~`~
    11'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE201]〜``〜〜``〜〜`〜`〜`〜`〜[PRE202]〜〜[PRE203]〜``〜`〜〜[PRE204]〜[PRE205]〜`〜`〜〜〜`〜``〜〜〜〜[PRE206]〜`〜[PRE207]〜〜[PRE208]`〜`〜``〜[PRE209][PRE210][PRE211]`〜`〜``〜`〜〜`〜
    11'
- en: '[PRE212]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: 39.     # Create the string for this row on the board.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 39.     #为棋盘上的这一行创建字符串。
- en: 40.     boardRow = ''
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 40.     boardRow = ''
- en: '41.     for column in range(60):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 41.     对于列在范围(60)内：
- en: 42.         boardRow += board[column][row]
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 42.         boardRow += board[column][row]
- en: '43.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '43.'
- en: 44.     print('%s%s %s %s' % (extraSpace, row, boardRow, row))
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 44.     打印('%s%s %s %s' % (extraSpace, row, boardRow, row))
- en: '[PRE213]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: 46.     # Print the numbers across the bottom of the board.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 46.     #在棋盘底部打印数字。
- en: 47.     print()
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 47.     打印()
- en: 48.     print('   ' + ('0123456789' * 6))
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 48.     打印('   ' + ('0123456789' * 6))
- en: 49.     print(tensDigitsLine)
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 49.     打印(tensDigitsLine)
- en: '[PRE214]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '51\. def getRandomChests(numChests):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '51.     获取随机宝箱(numChests):'
- en: 52.     # Create a list of chest data structures (two-item lists of x, y int
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 52.     #创建宝箱数据结构的列表（x，y int的两个项目列表
- en: coordinates).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 坐标)。
- en: 53.     chests = []
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 53.     chests = []
- en: '54.     while len(chests) < numChests:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 54.     当宝箱数量小于numChests时：
- en: 55.         newChest = [random.randint(0, 59), random.randint(0, 14)]
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 55.         newChest = [random.randint(0, 59), random.randint(0, 14)]
- en: '56.         if newChest not in chests: # Make sure a chest is not already'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 56.         如果新宝箱不在宝箱中：#确保宝箱尚未
- en: here.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这里。
- en: 57.             chests.append(newChest)
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 57.             chests.append(newChest)
- en: 58.     return chests
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 58.     返回宝箱
- en: '[PRE215]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '60\. def isOnBoard(x, y):'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '60.     isOnBoard(x, y):'
- en: 61.     # Return True if the coordinates are on the board; otherwise, return
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 61.     # 如果坐标在棋盘上，则返回True；否则，返回
- en: False.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: False.
- en: 62.     return x >= 0 and x <= 59 and y >= 0 and y <= 14
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 62.     返回x >= 0 and x <= 59 and y >= 0 and y <= 14
- en: '[PRE216]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '64\. def makeMove(board, chests, x, y):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '64.     移动(board, chests, x, y):'
- en: 65.     # Change the board data structure with a sonar device character.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 65.     #用声纳设备字符更改棋盘数据结构。
- en: Remove treasure chests from the chests list as they are found.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在找到宝箱后，从宝箱列表中删除宝箱。
- en: 66.     # Return False if this is an invalid move.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 66.     #如果这是一个无效的移动，则返回False。
- en: 67.     # Otherwise, return the string of the result of this move.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 67.     # 否则，返回此移动的结果字符串。
- en: '[PRE217]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '68.     smallestDistance = 100 # Any chest will be closer than 100.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '68.     smallestDistance = 100 #任何宝箱都会比100更近。'
- en: '69.     for cx, cy in chests:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 69.     对于cx, cy在宝箱中：
- en: 70.         distance = math.sqrt((cx - x) * (cx - x) + (cy - y) * (cy - y))
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 70.         distance = math.sqrt((cx - x) * (cx - x) + (cy - y) * (cy - y))
- en: '71.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '71.'
- en: '72.         if distance < smallestDistance: # We want the closest treasure'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 72.         如果距离<最小距离：#我们想要最接近的宝藏
- en: chest.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 宝箱。
- en: 73.             smallestDistance = distance
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 73.             smallestDistance = distance
- en: '[PRE218]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '>>> import math'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> import math'
- en: '>>> math.sqrt(10)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> math.sqrt(10)'
- en: '3.1622776601683795'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '3.1622776601683795'
- en: '>>> 3.1622776601683795 * 3.1622776601683795'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> 3.1622776601683795 * 3.1622776601683795'
- en: '10.000000000000002'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '10.000000000000002'
- en: '[PRE219]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '68.     smallestDistance = 100 # Any chest will be closer than 100.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '68.     smallestDistance = 100 #任何宝箱都会比100更近。'
- en: '69.     for cx, cy in chests:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 69.     对于cx, cy在宝箱中：
- en: 70.         distance = math.sqrt((cx - x) * (cx - x) + (cy - y) * (cy - y))
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 70.         distance = math.sqrt((cx - x) * (cx - x) + (cy - y) * (cy - y))
- en: '[PRE220]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '72.         if distance < smallestDistance: # We want the closest treasure'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 72.         如果距离<最小距离：#我们想要最接近的宝藏
- en: chest.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 宝箱。
- en: 73.             smallestDistance = distance
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 73.             smallestDistance = distance
- en: '[PRE221]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '>>> x = [42, 5, 10, 42, 15, 42]'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x = [42, 5, 10, 42, 15, 42]'
- en: '>>> x.remove(10)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x.remove(10)'
- en: '>>> x'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x'
- en: '[42, 5, 42, 15, 42]'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[42, 5, 42, 15, 42]'
- en: '[PRE222]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '>>> x = [42, 5, 10, 42, 15, 42]'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x = [42, 5, 10, 42, 15, 42]'
- en: '>>> x.remove(42)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x.remove(42)'
- en: '>>> x'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x'
- en: '[5, 10, 42, 15, 42]'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '[5, 10, 42, 15, 42]'
- en: '[PRE223]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '>>> x = [5, 42]'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x = [5, 42]'
- en: '>>> x.remove(10)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x.remove(10)'
- en: 'Traceback (most recent call last):'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 'Traceback (most recent call last):'
- en: File "<stdin>", line 1, in <module>
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: File "<stdin>", line 1, in <module>
- en: 'ValueError: list.remove(x): x not in list'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 'ValueError: list.remove(x): x not in list'
- en: '[PRE224]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '77.     if smallestDistance == 0:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 77.     如果smallestDistance == 0：
- en: 78.         # xy is directly on a treasure chest!
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 78.         # xy直接在宝箱上！
- en: 79.         chests.remove([x, y])
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 79.         chests.remove([x, y])
- en: 80.         return 'You have found a sunken treasure chest!'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 80.         返回'你找到了一个沉没的宝箱！'
- en: '[PRE225]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '81.     else:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 81.     否则：
- en: '82.         if smallestDistance < 10:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 82.         如果最小距离小于10：
- en: 83.             board[x][y] = str(smallestDistance)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 83.             board[x][y] = str(smallestDistance)
- en: 84.             return 'Treasure detected at a distance of %s from the sonar
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 84.             返回'声纳探测到距离声纳设备%s的宝藏。' %（smallestDistance）
- en: device.' % (smallestDistance)
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: device.' % (smallestDistance)
- en: '85.         else:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 85.         否则：
- en: 86.             board[x][y] = 'X'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 86.             board[x][y] = 'X'
- en: 87.             return 'Sonar did not detect anything. All treasure chests
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 87.             返回“声纳未检测到任何东西。所有宝箱都是假的。
- en: out of range.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 超出范围。'
- en: '[PRE226]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '89\. def enterPlayerMove(previousMoves):'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '89.     输入玩家移动(previousMoves):'
- en: 90.     # Let the player enter their move. Return a two-item list of int
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 90.     # 让玩家输入他们的移动。返回一个包含两个整数的列表
- en: xy coordinates.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: xy坐标。
- en: 91.     print('Where do you want to drop the next sonar device? (0-59 0-14)
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 91.     打印('你想在哪里放置下一个声纳设备？（0-59 0-14）
- en: (or type quit)')
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: (或输入退出)')
- en: '92.     while True:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 92.     当为真时：
- en: 93.         move = input()
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 93.         move = input()
- en: '94.         if move.lower() == ''quit'':'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '94.         如果移动.lower() == ''退出'':'
- en: 95.             print('Thanks for playing!')
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 95.             打印('谢谢你的参与！')
- en: 96.             sys.exit()
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 96.             sys.exit()
- en: '[PRE227]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: 98.         move = move.split()
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 98.         move = move.split()
- en: 99.         if len(move) == 2 and move[0].isdigit() and move[1].isdigit() and
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 99.         如果len(move) == 2 and move[0].isdigit() and move[1].isdigit() and
- en: 'isOnBoard(int(move[0]), int(move[1])):'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 'isOnBoard(int(move[0]), int(move[1])):'
- en: '100.             if [int(move[0]), int(move[1])] in previousMoves:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 100.             如果[int(move[0]), int(move[1])]在previousMoves中：
- en: 101.                 print('You already moved there.')
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 101.                 打印('你已经在那里移动了。')
- en: 102.                 continue
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 102.                 继续
- en: 103.             return [int(move[0]), int(move[1])]
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 103.             return [int(move[0]), int(move[1])]
- en: '104.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '104.'
- en: 105.         print('Enter a number from 0 to 59, a space, then a number from
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 105.         print('输入0到59之间的数字，一个空格，然后是一个数字
- en: 0 to 14.')
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 0到14。')
- en: '[PRE228]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '>>> ''42''.isdigit()'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> ''42''.isdigit()'
- en: 'True'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 'True'
- en: '>>> ''forty''.isdigit()'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> ''forty''.isdigit()'
- en: 'False'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 'False'
- en: '>>> ''''.isdigit()'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> ''''.isdigit()'
- en: 'False'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 'False'
- en: '>>> ''hello''.isdigit()'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> ''hello''.isdigit()'
- en: 'False'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 'False'
- en: '>>> x = ''10'''
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x = ''10'''
- en: '>>> x.isdigit()'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '>>> x.isdigit()'
- en: 'True'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 'True'
- en: '[PRE229]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '107\. def showInstructions():'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '107. def showInstructions():'
- en: '108.     print(''''''Instructions:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 108.     print('''说明：
- en: 109\. You are the captain of the Simon, a treasure-hunting ship. Your current
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 109. 你是Simon号的船长，一艘寻宝船。你目前的
- en: mission
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 任务
- en: --snip--
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: --snip--
- en: 154\. Press enter to continue...''')
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 154. 按回车键继续...''')
- en: 155.     input()
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 155.     输入()
- en: '[PRE230]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: 159\. print('S O N A R !')
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 159. print('S O N A R !')
- en: 160\. print()
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 160. print()
- en: 161\. print('Would you like to view the instructions? (yes/no)')
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 161. print('你想查看说明吗？（是/否）')
- en: '162\. if input().lower().startswith(''y''):'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '162. 如果输入().lower().startswith(''y''):'
- en: 163\. showInstructions()
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 163. 显示说明()
- en: '164.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '164.'
- en: '165\. while True:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 165. 当真：
- en: 166.     # Game setup
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 166. 游戏设置
- en: 167.     sonarDevices = 20
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 167.     sonarDevices = 20
- en: 168.     theBoard = getNewBoard()
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 168.     theBoard = getNewBoard()
- en: 169.     theChests = getRandomChests(3)
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 169.     theChests = getRandomChests(3)
- en: 170.     drawBoard(theBoard)
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 170.     drawBoard(theBoard)
- en: 171.     previousMoves = []
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 171.     previousMoves = []
- en: '[PRE231]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '173.     while sonarDevices > 0:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 173.     当声纳设备> 0时：
- en: 174.         # Show sonar device and chest statuses.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 174.         # 显示声纳设备和宝藏状态。
- en: 175.         print('You have %s sonar device(s) left. %s treasure chest(s)
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 175.         print('你还有%s个声纳设备。 %s个宝藏
- en: remaining.' % (sonarDevices, len(theChests)))
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余。' % (sonarDevices, len(theChests)))
- en: '[PRE232]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: 177.         x, y = enterPlayerMove(previousMoves)
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 177.         x, y = enterPlayerMove(previousMoves)
- en: '178.         previousMoves.append([x, y]) # We must track all moves so that'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '178.         previousMoves.append([x, y]) # 我们必须跟踪所有移动，以便'
- en: sonar devices can be updated.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 声纳设备可以更新。
- en: '179.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '179.'
- en: 180.         moveResult = makeMove(theBoard, theChests, x, y)
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 180.         moveResult = makeMove(theBoard, theChests, x, y)
- en: '181.         if moveResult == False:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 181.         如果moveResult == False：
- en: 182.             continue
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 182.             继续
- en: '[PRE233]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '183.         else:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 183.         否则：
- en: '184.             if moveResult == ''You have found a sunken treasure chest!'':'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 184.             如果moveResult == '你找到了一个沉没的宝藏！'：
- en: 185.                 # Update all the sonar devices currently on the map.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 185.                 # 更新当前地图上的所有声纳设备。
- en: '186.                 for x, y in previousMoves:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '186.                 for x, y in previousMoves:'
- en: 187.                     makeMove(theBoard, theChests, x, y)
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 187.                     makeMove(theBoard, theChests, x, y)
- en: 188.                 drawBoard(theBoard)
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 188.                 drawBoard(theBoard)
- en: 189.                 print(moveResult)
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 189.                 print(moveResult)
- en: '[PRE234]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '191.         if len(theChests) == 0:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 191.         如果len(theChests) == 0：
- en: 192.             print('You have found all the sunken treasure chests!
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 192.             print('你已经找到了所有沉没的宝藏！
- en: Congratulations and good game!')
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 祝贺和游戏愉快！')
- en: 193.             break
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 193.             break
- en: '[PRE235]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: 195.         sonarDevices -= 1
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 195.         sonarDevices -= 1
- en: '[PRE236]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '197.     if sonarDevices == 0:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '197.     if sonarDevices == 0:'
- en: 198.         print('We\'ve run out of sonar devices! Now we have to turn the
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 198.         print('我们已经用完声纳设备了！现在我们必须转
- en: ship around and head')
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 船和头')
- en: 199.         print('for home with treasure chests still out there! Game
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 199.         print('还有宝藏在那里！游戏
- en: over.')
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 结束。')
- en: 200.         print('    The remaining chests were here:')
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 200.         print('    剩下的宝藏在这里：')
- en: '201.         for x, y in theChests:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '201.         for x, y in theChests:'
- en: 202.             print(' %s, %s' % (x, y))
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 202.             print(' %s, %s' % (x, y))
- en: '[PRE237]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: 204.     print('Do you want to play again? (yes or no)')
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 204.     print('你想再玩一次吗？（是或否）')
- en: '205.     if not input().lower().startswith(''y''):'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '205.     如果不是输入().lower().startswith(''y''):'
- en: 206.         sys.exit()
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 206.         sys.exit()
- en: '```'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Otherwise, execution jumps back to the beginning of the `while` loop on line
    165 and a new game begins.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，执行跳转回到第165行的`while`循环的开始，开始新的游戏。
- en: '**Summary**'
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Remember how our Tic-Tac-Toe game numbered the spaces on the Tic-Tac-Toe board
    1 through 9? This sort of coordinate system might have been okay for a board with
    fewer than 10 spaces. But the Sonar Treasure Hunt board has 900 spaces! The Cartesian
    coordinate system we learned about in [Chapter 12](#calibre_link-72) really makes
    all these spaces manageable, especially when our game needs to find the distance
    between two points on the board.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得我们的井字游戏是如何用1到9编号的吗？这种坐标系统对于少于10个空间的棋盘可能还可以。但是声纳寻宝棋盘有900个空间！我们在[第12章](#calibre_link-72)中学到的笛卡尔坐标系真的让所有这些空间都变得可管理，特别是当我们的游戏需要找到棋盘上两点之间的距离时。
- en: Locations in games that use a Cartesian coordinate system can be stored in a
    list of lists in which the first index is the x-coordinate and the second index
    is the y-coordinate. This makes it easy to access a coordinate using `board[x][y]`.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 使用笛卡尔坐标系的游戏中的位置可以存储在一个列表的列表中，其中第一个索引是x坐标，第二个索引是y坐标。这样就可以很容易地使用`board[x][y]`访问坐标。
- en: These data structures (such as the ones used for the ocean and treasure chest
    locations) make it possible to represent complex concepts as data, and your game
    programs become mostly about modifying these data structures.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据结构（比如用于海洋和宝藏位置的数据结构）使得能够将复杂的概念表示为数据，而你的游戏程序主要是关于修改这些数据结构。
- en: In the next chapter, we’ll represent letters as numbers. By representing text
    as numbers, we can perform math operations on them to encrypt or decrypt secret
    messages.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把字母表示为数字。通过将文本表示为数字，我们可以对其进行数学运算，以加密或解密秘密消息。
- en: '[Prev: Chapter 12 - The Cartesian Coordinate System](chapter12.html) | [Next:
    Chapter 14 - Caesar Cipher](chapter14.html)'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一页：第12章 - 笛卡尔坐标系](chapter12.html) | [下一页：第14章 - 凯撒密码](chapter14.html)'

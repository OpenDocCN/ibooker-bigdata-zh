- en: 'C Programming, Part 4: Strings and Structs'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C编程，第4部分：字符串和结构
- en: Strings, Structs, and Gotcha's
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串、结构和陷阱
- en: So what's a string?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么什么是字符串？
- en: '![Crash String](../Images/b6620ef95e96fee4fcdff893eabdf95c.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![Crash String](../Images/b6620ef95e96fee4fcdff893eabdf95c.jpg)'
- en: In C we have [Null Terminated](https://en.wikipedia.org/wiki/Null-terminated_string)
    strings rather than [Length Prefixed](https://en.wikipedia.org/wiki/String_(computer_science)#Length-prefixed)
    for historical reasons. What that means for your average everyday programming
    is that you need to remember the null character! A string in C is defined as a
    bunch of bytes until you reach '\0' or the Null Byte.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在C中，���们使用[空终止](https://en.wikipedia.org/wiki/Null-terminated_string)字符串，而不是[长度前缀](https://en.wikipedia.org/wiki/String_(computer_science)#Length-prefixed)，出于历史原因。对于你平常的编程来说，这意味着你需要记住空字符！在C中，字符串被定义为一堆字节，直到你达到'\0'或空字节为止。
- en: Two places for strings
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串的两个位置
- en: Whenever you define a constant string (ie one in the form `char* str = "constant"`)
    That string is stored in the *data* or *code* segment that is **read-only** meaning
    that any attempt to modify the string will cause a segfault.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你定义一个常量字符串（即形式为`char* str = "constant"`的字符串）时，该字符串存储在*数据*或*代码*段中，这是**只读**的，这意味着任何尝试修改字符串都会导致段错误。
- en: If one however `malloc`'s space, one can change that string to be whatever they
    want.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果有人`malloc`空间，就可以更改该字符串为他们想要的任何内容。
- en: Memory Mismanagement
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存管理不善
- en: One common gotcha is when you write the following
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的陷阱是当你写下面的内容时
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What did we do? We allocated space for 14 bytes, reassigned the pointer and
    successfully segfaulted! Remember to keep track of what your pointers are doing.
    What you probably wanted to do was use a `string.h` function `strcpy`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做了什么？我们为14个字节分配了空间，重新分配了指针，成功地导致了段错误！记住跟踪你的指针在做什么。你可能想要做的是使用`string.h`函数`strcpy`。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Remember the NULL byte!
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 记住空字节！
- en: Forgetting to NULL terminate a string is a big affect on the strings! Bounds
    checking is important. The heartbleed bug mentioned earlier in the wikibook is
    partially because of this.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 忘记对字符串进行空终止会对字符串产生重大影响！边界检查很重要。前面在wikibook中提到的heartbleed漏洞部分是因为这个原因。
- en: Where can I find an In-Depth and Assignment-Comprehensive explanation of all
    of these functions?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我在哪里可以找到所有这些函数的深入和全面的解释？
- en: '[Right Here!](https://linux.die.net/man/3/string)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[就在这里！](https://linux.die.net/man/3/string)'
- en: 'String Information/Comparison: `strlen` `strcmp`'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串信息/比较：`strlen` `strcmp`
- en: '`int strlen(const char *s)` returns the length of the string not including
    the null byte'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`int strlen(const char *s)` 返回字符串的长度，不包括空字节'
- en: '`int strcmp(const char *s1, const char *s2)` returns an integer determining
    the lexicographic order of the strings. If s1 where to come before s2 in a dictionary,
    then a -1 is returned. If the two strings are equal, then 0\. Else, 1\.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`int strcmp(const char *s1, const char *s2)` 返回一个整数，确定字符串的词典顺序。如果s1在字典中出现在s2之前，则返回-1。如果两个字符串相等，则返回0。否则返回1。'
- en: With most of these functions, they expect the strings to be readable and not
    NULL but there is undefined behavior when you pass them NULL.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数这些函数，它们期望字符串是可读的，而不是`NULL`，但是当你传递`NULL`时会出现未定义的行为。
- en: 'String Alteration: `strcpy` `strcat` `strdup`'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串修改：`strcpy` `strcat` `strdup`
- en: '`char *strcpy(char *dest, const char *src)` Copies the string at `src` to `dest`.
    **assumes dest has enough space for src**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`char *strcpy(char *dest, const char *src)` 将`src`的字符串复制到`dest`。**假设dest有足够的空间容纳src**'
- en: '`char *strcat(char *dest, const char *src)` Concatenates the string at `src`
    to the end of destination. **This function assumes that there is enough space
    for `src` at the end of destination including the NULL byte**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`char *strcat(char *dest, const char *src)` 将`src`的字符串连接到目的地的末尾。**此函数假定目的地末尾有足够的空间容纳`src`，包括空字节**'
- en: '`char *strdup(const char *dest)` Returns a `malloc`''ed copy of the string.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`char *strdup(const char *dest)` 返回字符串的`malloc`副本。'
- en: 'String Search: `strchr` `strstr`'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串搜索：`strchr` `strstr`
- en: '`char *strchr(const char *haystack, int needle)` Returns a pointer to the first
    occurrence of `needle` in `haystack`. If none found, `NULL` is returned.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`char *strchr(const char *haystack, int needle)` 返回`haystack`中`needle`第一次出现的指针。如果找不到，则返回`NULL`。'
- en: '`char *strstr(const char *haystack, const char *needle)` Same as above but
    this time a string!'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`char *strstr(const char *haystack, const char *needle)` 与上面相同，但这次是一个字符串！'
- en: 'String Tokenize: `strtok`'
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串标记化：`strtok`
- en: A dangerous but useful function strtok takes a string and tokenizes it. Meaning
    that it will transform the strings into separate strings. This function has a
    lot of specs so please read the man pages a contrived examples is below.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一个危险但有用的函数`strtok`接受一个字符串并对其进行标记化。这意味着它将把字符串转换为单独的字符串。这个函数有很多规范，所以请阅读man页面，下面是一个人为的例子。
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What happens when I change `upped` like this?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当我像这样改变`upped`时会发生什么？
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Memory Movement: `memcpy` and `memmove`'
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存移动：`memcpy`和`memmove`
- en: Why are `memcpy` and `memmove` both in `<string.h>`? Because strings are essentially
    raw memory with a null byte at the end of them!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么`memcpy`和`memmove`都在`<string.h>`中？因为字符串本质上是带有空字节的原始内存！
- en: '`void *memcpy(void *dest, const void *src, size_t n)` moves `n` bytes starting
    at `str` to `dest`. **Be careful** There is undefined behavior when the memory
    regions overlap. This is one of the classic works on my machine examples because
    many times valgrind won''t be able to pick it up because it will look like it
    works on your machine. When the autograder hits, fail. Consider the safer version
    which is.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`void *memcpy(void *dest, const void *src, size_t n)` 将从`str`开始的`n`个字节移动到`dest`。**小心**
    当内存区域重叠时会出现未定义的行为。这是一个经典的“在我的机器上工作”的例子，因为很多时候valgrind无法检测到它，因为在你的机器上它看起来是有效的。当自动评分器出现时，会失败。考虑更安全的版本。'
- en: '`void *memmove(void *dest, const void *src, size_t n)` does the same thing
    as above, but if the memory regions overlap then it is guaranteed that all the
    bytes will get copied over correctly.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`void *memmove(void *dest, const void *src, size_t n)` 做与上述相同的事情，但如果内存区域重叠，则保证所有字节都会正确复制过去。'
- en: So what's a `struct`?
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么`struct`是什么？
- en: '![Struct Example](../Images/921a3e0534d1220fea61c43535dadd2c.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![Struct Example](../Images/921a3e0534d1220fea61c43535dadd2c.jpg)'
- en: In low level terms, a struct is just a piece of contiguous memory, nothing more.
    Just like an array, a struct has enough space to keep all of its members. But
    unlike an array, it can store different types. Consider the contact struct declared
    above
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从低级别来看，一个结构体只是一块连续的内存，仅此而已。就像数组一样，结构体有足够的空间来存储所有的成员。但与数组不同，它可以存储不同的类型。考虑上面声明的contact结构。
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Brief aside**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**简短的插曲**'
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you compile the code without any optimizations and reordering, you can expect
    the addresses of each of the variables to look like this.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在没有任何优化和重新排序的情况下编译代码，你可以期望每个变量的地址看起来像这样。
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Because all your compiler does is say 'hey reserve this much space, and I will
    go and calculate the offsets of whatever variables you want to write to'.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你的编译器所做的就是说'嘿，保留这么多空间，我会去计算你想要写入的任何变量的偏移量'。
- en: What do these offsets mean?
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这些偏移量是什么意思？
- en: The offsets are where the variable starts at. The phone variables starts at
    the `0x128`th bytes and continues for sizeof(int) bytes, but not always. **Offsets
    don't determine where the variable ends though**. Consider the following hack
    that you see in a lot of kernel code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 偏移量是变量开始的地方。电话变量从第`0x128`字节开始，持续sizeof(int)字节，但并非总是如此。**偏移量并不决定变量的结束位置**。考虑在许多内核代码中看到的以下黑客行为。
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: But not all structs are perfect
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 但并不是所有的结构都是完美的
- en: Structs may require something called [padding](http://www.catb.org/esr/structure-packing/)
    (tutorial). **We do not expect you to pack structs in this course, just know that
    it is there This is because in the early days (and even now) when you have to
    an address from memory you have to do it in 32bit or 64bit blocks. This also meant
    that you could only request addresses that were multiples of that. Meaning that
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 结构体可能需要一些叫做[填充](http://www.catb.org/esr/structure-packing/)（教程）的东西。**我们不指望你在这门课程中对结构体进行打包，只是知道它存在。这是因为在早期（甚至现在）当你必须从内存中获取一个地址时，你必须以32位或64位块的方式进行。这也意味着你只能请求那些是它的倍数的地址。这意味着
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Would conceptually may look like this
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 概念上可能看起来像这样
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: (This is on a 64bit system) This is not always the case because sometimes your
    processor supports unaligned accesses. What does this mean? Well there are two
    options you can set an attribute
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: （这是在64位系统上）这并不总是这样，因为有时处理器支持不对齐访问。这是什么意思？嗯，有两种选择你可以设置一个属性
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: But now every time I want to access `data` or `encoding`, I have to do two memory
    accesses. The other thing you can do is reorder the struct, although this is not
    always possible
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在每次我想要访问`data`或`encoding`，我都必须进行两次内存访问。你可以做的另一件事是重新排列结构，尽管这并不总是可能的
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[Back: C Programming, Part 3: Common Gotchas](https://github.com/angrave/SystemProgramming/wiki/C-Programming,-Part-3:-Common-Gotchas)
    | [Next: C Programming, Part 5: Debugging](https://github.com/angrave/SystemProgramming/wiki/C-Programming%2C-Part-5%3A-Debugging)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回：C编程，第3部分：常见陷阱](https://github.com/angrave/SystemProgramming/wiki/C-Programming,-Part-3:-Common-Gotchas)
    | [下一个：C编程，第5部分：调试](https://github.com/angrave/SystemProgramming/wiki/C-Programming%2C-Part-5%3A-Debugging)'

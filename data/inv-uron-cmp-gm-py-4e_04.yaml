- en: 3 GUESS THE NUMBER
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3 猜数字
- en: 原文：[https://inventwithpython.com/invent4thed/chapter3.html](https://inventwithpython.com/invent4thed/chapter3.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://inventwithpython.com/invent4thed/chapter3.html](https://inventwithpython.com/invent4thed/chapter3.html)
- en: '[Prev: Chapter 2 - Writing Programs](chapter2.html) | [Next: Chapter 4 - A
    Joke-Telling Program](chapter4.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一章：第2章 - 编写程序](chapter2.html) | [下一章：第4章 - 讲笑话的程序](chapter4.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
- en: In this chapter, you’re going to make a Guess the Number game. The computer
    will think of a secret number from 1 to 20 and ask the user to guess it. After
    each guess, the computer will tell the user whether the number is too high or
    too low. The user wins if they can guess the number within six tries.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将制作一个猜数字游戏。计算机会想一个从1到20的秘密数字，并要求用户猜测。每次猜测后，计算机会告诉用户数字是太高还是太低。如果用户能在六次内猜中数字，他们就赢了。
- en: This is a good game to code because it covers many programming concepts in a
    short program. You’ll learn how to convert values to different data types and
    when you would need to do this. Since this program is a game, from now on we’ll
    call the user the *player*.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的编程游戏，因为它涵盖了短程序中的许多编程概念。你将学习如何将值转换为不同的数据类型，以及何时需要这样做。由于这个程序是一个游戏，从现在开始我们将称用户为*玩家*。
- en: '**TOPICS COVERED IN THIS CHAPTER**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**本章涵盖的主题**'
- en: • `import` statements
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: • `import` 语句
- en: • Modules
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: • 模块
- en: • The `randint()` function
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • `randint()` 函数
- en: • `for` statements
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: • `for` 语句
- en: • Blocks
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • 块
- en: • The `str()`, `int()`, and `float()` functions
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: • `str()`、`int()` 和 `float()` 函数
- en: • Booleans
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: • 布尔值
- en: • Comparison operators
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: • 比较运算符
- en: • Conditions
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: • 条件
- en: • The difference between `=` and `==`
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: • `=` 和 `==` 之间的区别
- en: • `if` statements
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: • `if` 语句
- en: • `break` statements
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: • `break` 语句
- en: '**Sample Run of Guess the Number**'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**猜数字的示例运行**'
- en: Here’s what the Guess the Number program looks like to the player when it’s
    run. The player’s input is marked in bold.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行猜数字程序时，玩家的输入如下所示。玩家的输入以粗体标记。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Source Code for Guess the Number**'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**猜数字的源代码**'
- en: Open a new file editor window by clicking **File** ![image](../Images/6213f577c15feb006bdab7161d1cfc75.png)
    **New Window**. In the blank window that appears, enter the source code and save
    it as *guess.py*. Then run the program by pressing F5.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单击**文件** ![image](../Images/6213f577c15feb006bdab7161d1cfc75.png) **新建窗口**
    打开一个新的文件编辑器窗口。在出现的空白窗口中，输入源代码并将其保存为 *guess.py*。然后按 F5 运行程序。
- en: '![image](../Images/9aeb9e7f33da708d95f05f369b449cba.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/9aeb9e7f33da708d95f05f369b449cba.png)'
- en: When you enter this code into the file editor, be sure to pay attention to the
    spacing at the front of the lines. Some lines need to be indented four or eight
    spaces.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当你把这段代码输入到文件编辑器中时，一定要注意行首的空格。有些行需要缩进四个或八个空格。
- en: If you get errors after entering this code, compare the code you typed to the
    book’s code with the online diff tool at *[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入此代码后出现错误，请使用在线差异工具将你输入的代码与本书代码进行比较，网址为 *[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*。
- en: '*guess.py*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*guess.py*'
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Importing the random Module**'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**导入 random 模块**'
- en: 'Let’s take a look at the first two lines of this program:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个程序的前两行：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first line is a comment, which you saw in [Chapter 2](#calibre_link-6).
    Remember that Python will ignore everything after the `#` character. The comment
    here just reminds us what this program does.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行是一个注释，你在[第2章](#calibre_link-6)中见过。记住 Python 会忽略 `#` 字符后的所有内容。这里的注释只是提醒我们这个程序的作用是什么。
- en: The second line is an `import` statement. Remember, statements are instructions
    that perform some action but don’t evaluate to a value like expressions do. You’ve
    already seen the assignment statement, which stores a value in a variable.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行是一个 `import` 语句。记住，语句是执行某些操作的指令，但不像表达式那样求值。你已经见过赋值语句，它将一个值存储在一个变量中。
- en: While Python includes many built-in functions, some functions are written in
    separate programs called *modules*. You can use these functions by importing their
    modules into your program with an `import` statement.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Python 包含许多内置函数，但有些函数是写在称为*模块*的单独程序中的。你可以通过使用 `import` 语句将这些函数的模块导入到你的程序中来使用这些函数。
- en: Line 2 imports the `random` module so that the program can call the `randint()`
    function. This function will come up with a random number for the player to guess.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第2行导入了 `random` 模块，以便程序可以调用 `randint()` 函数。这个函数将为玩家生成一个随机数来猜测。
- en: Now that you’ve imported the `random` module, you need to set up some variables
    to store values your program will use later.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经导入了 `random` 模块，需要设置一些变量来存储程序稍后将使用的值。
- en: 'Line 4 creates a new variable named `guessesTaken`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 第4行创建了一个名为 `guessesTaken` 的新变量：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You’ll store the number of guesses the player has made in this variable. Since
    the player hasn’t made any guesses at this point in the program, store the integer
    `0` here.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你将把玩家猜测的次数存储在这个变量中。由于在程序的这一点上玩家还没有进行任何猜测，所以在这里存储整数 `0`。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Lines 6 and 7 are the same as the lines in the Hello World program in [Chapter
    2](#calibre_link-6). Programmers often reuse code from other programs to save
    themselves work.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 第6行和第7行与[第2章](#calibre_link-6)中的Hello World程序中的行相同。程序员经常重用其他程序中的代码来节省工作量。
- en: Line 6 is a function call to `print()`. Remember that a function is like a mini-program
    inside your program. When your program calls a function, it runs this mini-program.
    The code inside `print()` displays the string argument you passed it on the screen.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第6行是对 `print()` 的函数调用。记住，函数就像你程序中的一个小型程序。当你的程序调用一个函数时，它会运行这个小程序。`print()` 中的代码会在屏幕上显示你传递给它的字符串参数。
- en: Line 7 lets the player enter their name and stores it in the `myName` variable.
    Remember, the string might not really be the player’s name; it’s just whatever
    string the player types. Computers are dumb and follow their instructions, no
    matter what.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第7行让玩家输入他们的名字并将其存储在 `myName` 变量中。记住，这个字符串可能并不是玩家的真实姓名；它只是玩家输入的任何字符串。计算机是愚蠢的，会按照它们的指令执行，不管怎样。
- en: '**Generating Random Numbers with the random.randint() Function**'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用random.randint()函数生成随机数
- en: 'Now that your other variables are set up, you can use the `random` module’s
    function to set the computer’s secret number:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的其他变量都设置好了，你可以使用`random`模块的函数来设置计算机的秘密数字：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Line 9 calls a new function named `randint()` and stores the return value in
    `number`. Remember, function calls can be part of expressions because they evaluate
    to a value.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第9行调用了一个名为`randint()`的新函数，并将返回值存储在`number`中。记住，函数调用可以是表达式的一部分，因为它们会评估为一个值。
- en: The `randint()` function is provided by the `random` module, so you must call
    it with `random.randint()` (don’t forget the period!) to tell Python that the
    function `randint()` is in the `random` module.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`randint()`函数由`random`模块提供，所以你必须使用`random.randint()`（别忘了句号！）告诉Python函数`randint()`在`random`模块中。'
- en: '`randint()` will return a random integer between (and including) the two integer
    arguments you pass it. Line 9 passes `1` and `20`, separated by commas, between
    the parentheses that follow the function name. The random integer that `randint()`
    returns is stored in a variable named `number`—this is the secret number the player
    is trying to guess.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`randint()`将返回两个整数参数之间（包括这两个整数）的随机整数。第9行在函数名后的括号内传递了用逗号分隔的`1`和`20`。`randint()`返回的随机整数存储在一个名为`number`的变量中——这就是玩家试图猜测的秘密数字。'
- en: Just for a moment, go back to the interactive shell and enter `import random`
    to import the `random` module. Then enter `random.randint(1, 20)` to see what
    the function call evaluates to. It will return an integer between `1` and `20`.
    Repeat the code again, and the function call will return another integer. The
    `randint()` function returns a random integer each time, just as rolling a die
    will result in a random number each time. For example, enter the following into
    the interactive shell. The results you get when you call the `randint()` function
    will probably be different (it is random, after all!).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 只需片刻，回到交互式shell，输入`import random`导入`random`模块。然后输入`random.randint(1, 20)`看看函数调用的结果。它将返回一个介于`1`和`20`之间的整数。再次重复代码，函数调用将返回另一个整数。`randint()`函数每次返回一个随机整数，就像掷骰子每次都会得到一个随机数一样。例如，输入以下内容到交互式shell。当你调用`randint()`函数时得到的结果可能会不同（毕竟是随机的！）。
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can also try different ranges of numbers by changing the arguments. For
    example, enter `random.randint(1, 4)` to get only integers between `1` and `4`
    (including both `1` and `4`). Or try `random.randint(1000, 2000)` to get integers
    between `1000` and `2000`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过改变参数尝试不同范围的数字。例如，输入`random.randint(1, 4)`来获得介于`1`和`4`之间的整数（包括`1`和`4`）。或者尝试`random.randint(1000,
    2000)`来获得介于`1000`和`2000`之间的整数。
- en: 'Enter this code in the interactive shell and see what numbers you get:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互式shell中输入此代码，看看你得到了什么数字：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can change the game’s code slightly to make the game behave differently.
    In our original code, we use an integer between `1` and `20`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以稍微改变游戏的代码，使游戏的行为有所不同。在我们的原始代码中，我们使用介于`1`和`20`之间的整数：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Try changing the integer range to `(1, 100)` instead:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将整数范围改为`(1, 100)`：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now the computer will think of an integer between `1` and `100` instead of `1`
    and `20`. Changing line 9 will change the range of the random number, but remember
    to also change line 10 so that the game tells the player the new range instead
    of the old one.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在计算机将想一个介于`1`和`100`之间的整数，而不是`1`和`20`。改变第9行将改变随机数的范围，但记得同时改变第10行，以便游戏告诉玩家新的范围而不是旧的范围。
- en: You can use the `randint()` function whenever you want to add randomness to
    your games. You’ll use randomness in many games. (Think of how many board games
    use dice.)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在游戏中随时使用`randint()`函数添加随机性。你会在许多游戏中使用随机性。（想想有多少桌游使用骰子。）
- en: '**Welcoming the Player**'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 欢迎玩家
- en: 'After the computer assigns `number` a random integer, it greets the player:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机给`number`分配一个随机整数后，会向玩家打招呼：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: On line 10, `print()` welcomes the player by name and tells them that the computer
    is thinking of a random number.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在第10行，`print()`欢迎玩家，并告诉他们计算机正在想一个随机数。
- en: At first glance, it may look like there’s more than one string argument in line
    10, but examine the line carefully. The `+` operators between the three strings
    concatenate them into one string. And that one string is the argument passed to
    `print()`. If you look closely, you’ll see that the commas are inside the quotes
    and part of the strings themselves.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，第10行可能看起来有多个字符串参数，但仔细检查一下。三个字符串之间的`+`运算符将它们连接成一个字符串。而这个字符串是传递给`print()`的参数。如果你仔细看，你会发现逗号在引号内并且是字符串的一部分。
- en: '**Flow Control Statements**'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流程控制语句
- en: In previous chapters, the program execution started at the top instruction in
    the program and moved straight down, executing each instruction in order. But
    with the `for`, `if`, `else`, and `break` statements, you can make the execution
    loop or skip instructions based on conditions. These kinds of statements are *flow
    control statements*, since they change the flow of the program execution as it
    moves around your program.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，程序执行从程序顶部的指令开始，直接向下移动，按顺序执行每个指令。但是通过`for`、`if`、`else`和`break`语句，你可以根据条件使执行循环或跳过指令。这些类型的语句是*流程控制语句*，因为它们改变程序执行的流程，使其在程序中移动时改变。
- en: '***Using Loops to Repeat Code***'
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用循环重复代码
- en: 'Line 12 is a `for` statement, which indicates the beginning of a `for` loop:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第12行是一个`for`语句，表示`for`循环的开始：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Loops* let you execute code over and over again. Line 12 will repeat its code
    six times. A `for` statement begins with the `for` keyword, followed by a new
    variable name, the `in` keyword, a call to the `range()` function that specifies
    the number of loops it should do, and a colon. Let’s go over a few additional
    concepts so that you can work with loops.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*循环*让你可以一遍又一遍地执行代码。第12行将重复其代码六次。`for`语句以`for`关键字开始，后面跟着一个新的变量名、`in`关键字、调用`range()`函数指定它应该执行的循环次数，以及一个冒号。让我们再讨论一些其他概念，这样你就可以使用循环了。'
- en: '***Grouping with Blocks***'
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用块进行分组
- en: Several lines of code can be grouped together in a *block*. Every line in a
    block of code begins with at least the number of spaces as the first line in the
    block. You can tell where a block begins and ends by looking at the number of
    spaces at the front of the lines. This is the line’s *indentation*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 几行代码可以组合在一起形成一个*块*。代码块中的每一行都至少以与块中第一行相同数量的空格开头。通过查看行首的空格数量，可以确定块的开始和结束。这就是所谓的*缩进*。
- en: Python programmers typically use four *additional* spaces of indentation to
    begin a block. Any following line that’s indented by that same amount is part
    of the block. The block ends when there’s a line of code with the *same indentation
    as before* the block started. There can also be blocks within other blocks. [Figure
    3-1](#calibre_link-7) shows a code diagram with the blocks outlined and numbered.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Python程序员通常使用四个*额外*空格来开始一个块。任何后续的行，只要缩进相同，都是块的一部分。当有一行代码的缩进*与块开始之前的缩进相同时*，块就结束了。也可以在其他块内有块。[图3-1](#calibre_link-7)显示了一个带有轮廓和编号的代码图。
- en: '![image](../Images/517d867c9fd532de28c6a4e8f4ca9972.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/517d867c9fd532de28c6a4e8f4ca9972.png)'
- en: '*Figure 3-1: An example of blocks and their indentation. The gray dots represent
    spaces.*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-1：块及其缩进的示例。灰色点代表空格。*'
- en: In [Figure 3-1](#calibre_link-7), line 12 has no indentation and isn’t inside
    any block. Line 13 has an indentation of four spaces. Since this line is indented
    more than the previous line, a new block starts here. Every line following this
    one with the same amount of indentation or more is considered part of block ➊.
    If Python encounters another line with less indentation than the block’s first
    line, the block has ended. Blank lines are ignored.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图3-1](#calibre_link-7)中，第12行没有缩进，也不在任何块内。第13行缩进了四个空格。由于这一行的缩进比上一行多，一个新的块从这里开始。之后的每一行，只要缩进相同或更多，都被视为块
    ➊ 的一部分。如果Python遇到另一行的缩进少于块的第一行，那么块已经结束。空行会被忽略。
- en: Line 18 has an indentation of eight spaces, which starts block ➋. This block
    is *inside* block ➊. But the next line, line 20, is indented only four spaces.
    Because the indentation has decreased, you know that line 18’s block ➋ has ended,
    and because line 20 has the same indentation as line 13, you know it’s in block
    ➊.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 第18行缩进了八个空格，开始了块 ➋。这个块是*在*块 ➊ *内*的。但是下一行，第20行，只缩进了四个空格。由于缩进减少，您知道第18行的块 ➋ 已经结束了，并且因为第20行的缩进与第13行相同，所以它在块
    ➊ 中。
- en: 'Line 21 increases the indentation to eight spaces again, so another new block
    within a block has started: block ➌. At line 23, we exit block ➌, and at line
    24 we enter the final block within a block, block ➍. Both block ➊ and block ➍
    end on line 24.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 第21行再次增加缩进到八个空格，因此又开始了一个新的块：块 ➌。在第23行，我们退出了块 ➌，在第24行，我们进入了块 ➍。块 ➊ 和块 ➍ 都在第24行结束。
- en: '***Looping with for Statements***'
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用for语句进行循环***'
- en: The `for` statement marks the beginning of a loop. Loops execute the same code
    repeatedly. When the execution reaches a `for` statement, it enters the block
    that follows the `for` statement. After running all the code in this block, the
    execution moves back to the top of the block to run the code all over again.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`语句标志着循环的开始。循环重复执行相同的代码。当执行到达`for`语句时，它进入`for`语句后面的块。在运行完块中的所有代码后，执行将返回到块的顶部，重新运行所有代码。'
- en: 'Enter the following into the interactive shell:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互式shell中输入以下内容：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice that after you typed `for i in range(3):` and pressed ENTER, the interactive
    shell didn’t show another `>>>` prompt because it was expecting you to type a
    block of code. Press ENTER again after the last instruction to tell the interactive
    shell you are done entering the block of code. (This applies only when you are
    working in the interactive shell. When writing *.py* files in the file editor,
    you don’t need to insert a blank line.)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在输入`for i in range(3):`并按ENTER后，交互式shell没有显示另一个`>>>`提示，因为它期望您输入一块代码。在输入最后一条指令后再次按ENTER，告诉交互式shell您已经输入完代码块了。（这仅适用于在交互式shell中工作时。在文件编辑器中编写*.py*文件时，不需要插入空行。）
- en: 'Let’s look at the `for` loop on line 12 of *guess.py*:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下*guess.py*第12行的`for`循环：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In Guess the Number, the `for` block begins at the `for` statement on line 12,
    and the first line after the `for` block is line 26.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在猜数字游戏中，`for`块从第12行的`for`语句开始，而`for`块之后的第一行是第26行。
- en: A `for` statement always has a colon (`:`) after the condition. Statements that
    end with a colon expect a new block on the next line. This is illustrated in [Figure
    3-2](#calibre_link-8).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`语句的条件后总是有一个冒号（`:`）。以冒号结尾的语句期望下一行有一个新的块。这在[图3-2](#calibre_link-8)中有所体现。'
- en: '![image](../Images/54be08b5ca0d842b7117ae04e94ca1d8.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/54be08b5ca0d842b7117ae04e94ca1d8.png)'
- en: '*Figure 3-2: The* for *loop’s flow of execution*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-2：*循环执行流*
- en: '[Figure 3-2](#calibre_link-8) shows how the execution flows. The execution
    will enter the `for` block at line 13 and keep going down. Once the program reaches
    the end of the `for` block, instead of going down to the next line, the execution
    loops back up to the start of the `for` block at line 13\. It does this six times
    because of the `range(6)` function call in the `for` statement. Each time the
    execution goes through the loop is called an *iteration*.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-2](#calibre_link-8)显示了执行流程。执行将进入第13行的`for`块并继续向下进行。一旦程序到达`for`块的末尾，执行不会继续向下执行，而是会循环回到第13行`for`块的开始。这样做了六次，因为`for`语句中调用了`range(6)`函数。执行循环的每一次称为*迭代*。'
- en: Think of the `for` statement as saying, “Execute the code in the following block
    a certain number of times.”
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将`for`语句视为“执行以下代码块一定次数”。
- en: '**Getting the Player’s Guess**'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**获取玩家的猜测**'
- en: 'Lines 13 and 14 ask the player to guess what the secret number is and let them
    enter their guess:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 第13行和第14行要求玩家猜测秘密数字，并让他们输入他们的猜测：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: That number the player enters is stored in a variable named `guess`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家输入的数字存储在名为`guess`的变量中。
- en: '**Converting Values with the int(), float(), and str() Functions**'
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用int()、float()和str()函数转换值**'
- en: 'Line 15 calls a new function called `int()`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 第15行调用了一个名为`int()`的新函数：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `int()` function takes one argument and returns the argument’s value as
    an integer.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`int()`函数接受一个参数，并将参数的值作为整数返回。'
- en: 'Enter the following into the interactive shell to see how the `int()` function
    works:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互式shell中输入以下内容，以查看`int()`函数的工作原理：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `int('42')` call will return the integer value `42`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`int(''42'')`调用将返回整数值`42`。'
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `3 + int(''2'')` line shows an expression that uses the return value of
    `int()` as part of an expression. It evaluates to the integer value `5`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`3 + int(''2'')`这一行显示了一个使用`int()`返回值作为表达式一部分的表达式。它评估为整数值`5`：'
- en: '![image](../Images/7d79ece6fe0eb2a197fbd3a277dfc23b.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/7d79ece6fe0eb2a197fbd3a277dfc23b.png)'
- en: 'Even though you can pass a string to `int()`, you cannot pass it just any string.
    Passing `''forty-two''` to `int()` will result in an error:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管你可以将字符串传递给`int()`，但你不能传递任意字符串。将`'forty-two'`传递给`int()`将导致错误：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The string you pass to `int()` must be made of numbers.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给`int()`的字符串必须由数字组成。
- en: 'In Guess the Number, we get the player’s number using the `input()` function.
    Remember, the `input()` function always returns a *string* of text the player
    entered. If the player types `5`, the `input()` function will return the string
    value `''5''`, not the integer value `5`. But we’ll need to compare the player’s
    number with an integer later, and Python cannot use the `<` and `>` comparison
    operators to compare a string and an integer value:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在猜数字游戏中，我们使用`input()`函数获取玩家的数字。记住，`input()`函数总是返回玩家输入的文本的*字符串*。如果玩家输入`5`，`input()`函数将返回字符串值`'5'`，而不是整数值`5`。但是我们稍后需要将玩家的数字与整数进行比较，Python不能使用`<`和`>`比较运算符来比较字符串和整数值：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Therefore, we need to convert the string into an integer:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要将字符串转换为整数：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: On line 14, we assign the `guess` variable to the string value of whatever number
    the player typed. Line 15 overwrites the string value in `guess` with the integer
    value returned by `int()`. The code `int(guess)` returns a new integer value based
    on the string it was provided, and `guess =` assigns that new value to `guess`.
    This lets the code later in the program compare whether `guess` is greater than,
    less than, or equal to the secret number in the `number` variable.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在第14行，我们将`guess`变量赋值为玩家输入的数字的字符串值。第15行用`int()`返回的整数值覆盖了`guess`中的字符串值。代码`int(guess)`返回了一个基于提供的字符串的新整数值，`guess
    =`将该新值赋给了`guess`。这样，程序后面的代码可以比较`guess`是否大于、小于或等于`number`变量中的秘密数字。
- en: 'The `float()` and `str()` functions will similarly return float and string
    versions of the arguments passed to them. Enter the following into the interactive
    shell:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`float()`和`str()`函数同样会返回传递给它们的参数的浮点数和字符串版本。在交互式shell中输入以下内容：'
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: When the string `'42'` or the integer `42` is passed to `float()`, the float
    `42.0` is returned.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当字符串`'42'`或整数`42`传递给`float()`时，将返回浮点数`42.0`。
- en: 'Now try using the `str()` function:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试使用`str()`函数：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When the integer `42` is passed to `str()`, the string `'42'` is returned. But
    when the float `42.0` is passed to `str()`, the string `'42.0'` is returned.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当整数`42`传递给`str()`时，将返回字符串`'42'`。但是当浮点数`42.0`传递给`str()`时，将返回字符串`'42.0'`。
- en: Using the `int()`, `float()`, and `str()` functions, you can take a value of
    one data type and return it as a value of a different data type.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`int()`、`float()`和`str()`函数，你可以将一个数据类型的值转换为另一个数据类型的值。
- en: '**The Boolean Data Type**'
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**布尔数据类型**'
- en: 'Every value in Python belongs to one data type. The data types that have been
    introduced so far are integers, floats, strings, and now Booleans. The *Boolean*
    data type has only two values: `True` or `False`. Boolean values must be entered
    with an uppercase `T` or `F` and the rest of the value’s name in lowercase.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的每个值都属于一个数据类型。到目前为止介绍的数据类型有整数、浮点数、字符串，现在还有布尔值。*布尔*数据类型只有两个值：`True`或`False`。布尔值必须用大写的`T`或`F`输入，其余值的名称用小写。
- en: 'Boolean values can be stored in variables just like the other data types:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔值可以像其他数据类型一样存储在变量中：
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In this example, you set `spam` to `True` and `eggs` to `False`. Remember to
    capitalize the first letter.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你将`spam`设置为`True`，将`eggs`设置为`False`。记得将第一个字母大写。
- en: You will use Boolean values (called *bools* for short) with comparison operators
    to form conditions. We’ll cover comparison operators first and then go over conditions.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用布尔值（简称*bools*）与比较运算符一起形成条件。我们将先讨论比较运算符，然后再讨论条件。
- en: '***Comparison Operators***'
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***比较运算符***'
- en: '*Comparison operators* compare two values and evaluate to a `True` or `False`
    Boolean value. [Table 3-1](#calibre_link-9) lists all of the comparison operators.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*比较运算符*比较两个值，并评估为`True`或`False`布尔值。[表3-1](#calibre_link-9)列出了所有比较运算符。'
- en: '**Table 3-1:** Comparison Operators'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**表3-1：**比较运算符'
- en: '| **Operator** | **Operation** |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| **运算符** | **操作** |'
- en: '| --- | --- |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `<` | Less than |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `<` | 小于 |'
- en: '| `>` | Greater than |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `>` | 大于 |'
- en: '| `<=` | Less than or equal to |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `<=` | 小于或等于 |'
- en: '| `>=` | Greater than or equal to |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `>=` | 大于或等于 |'
- en: '| `==` | Equal to |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `==` | 等于 |'
- en: '| `!=` | Not equal to |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `!=` | 不等于 |'
- en: You’ve already read about the `+`, `-`, `*`, and `/` math operators. Like any
    operator, comparison operators combine with values to form expressions such as
    `guessesTaken < 6`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经了解了`+`、`-`、`*`和`/`数学运算符。像任何运算符一样，比较运算符与值结合形成表达式，比如`guessesTaken < 6`。
- en: 'Line 17 of the Guess the Number program uses the less than comparison operator:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 猜数字程序的第17行使用了小于比较运算符：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We’ll discuss `if` statements in more detail shortly; for now, let’s just look
    at the expression that follows the `if` keyword (the `guess < number` part). This
    expression contains two values (the values in the variables `guess` and `number`)
    connected by an operator (the `<`, or less than, sign).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将很快更详细地讨论`if`语句；现在，让我们只看一下跟在`if`关键字后面的表达式（`guess < number`部分）。这个表达式包含两个值（变量`guess`和`number`中的值）由一个运算符（`<`，或小于号）连接而成。
- en: '***Checking for True or False with Conditions***'
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用条件检查True或False***'
- en: A *condition* is an expression that combines two values with a comparison operator
    (such as `<` or `>`) and evaluates to a Boolean value. A condition is just another
    name for an expression that evaluates to `True` or `False`. One place we use conditions
    is in `if` statements.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '*条件*是一个将两个值与比较运算符（如`<`或`>`）组合的表达式，并评估为布尔值。条件只是另一个名称，用于评估为`True`或`False`的表达式。我们使用条件的一个地方是在`if`语句中。'
- en: For example, the condition `guess < number` on line 17 asks, “Is the value stored
    in `guess` less than the value stored in `number`?” If so, then the condition
    evaluates to `True`. If not, the condition evaluates to `False`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，第17行的条件`guess < number`询问：“`guess`中存储的值是否小于`number`中存储的值？”如果是，则条件评估为`True`。如果不是，则条件评估为`False`。
- en: 'Say that `guess` stores the integer `10` and `number` stores the integer `16`.
    Because `10` is less than `16`, this condition evaluates to the Boolean value
    of `True`. The evaluation would look like this:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`guess`存储整数`10`，`number`存储整数`16`。因为`10`小于`16`，所以这个条件评估为布尔值`True`。评估如下所示：
- en: '![image](../Images/04f57b09fda5f223c2d2834f199bae9e.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/04f57b09fda5f223c2d2834f199bae9e.png)'
- en: '***Experimenting with Booleans, Comparison Operators, and Conditions***'
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***尝试布尔值、比较运算符和条件***'
- en: 'Enter the following expressions in the interactive shell to see their Boolean
    results:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互式shell中输入以下表达式以查看它们的布尔结果：
- en: '[PRE25]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The condition `0 < 6` returns the Boolean value `True` because the number `0`
    is less than the number `6`. But because `6` isn’t less than `0`, the condition
    `6 < 0` evaluates to `False`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 条件`0 < 6`返回布尔值`True`，因为数字`0`小于数字`6`。但是因为`6`不小于`0`，所以条件`6 < 0`评估为`False`。
- en: 'Notice that `10 < 10` evaluates to `False` because the number `10` isn’t smaller
    than the number `10`:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`10 < 10`评估为`False`，因为数字`10`不小于数字`10`：
- en: '[PRE26]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The values are the same. If Alice were the same height as Bob, you wouldn’t
    say that Alice is taller than Bob or that Alice is shorter than Bob. Both of those
    statements would be false.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值是相同的。如果Alice和Bob的身高相同，你不会说Alice比Bob高或Alice比Bob矮。这两个陈述都是错误的。
- en: 'Now enter these expressions into the interactive shell:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将这些表达式输入到交互式shell中：
- en: '[PRE27]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In this example, `10` is equal to `10`, so `10 == 10` evaluates to `True`. But
    `10` is not equal to `11`, so `10 == 11` is `False`. Even if the order is flipped,
    `11` is still not equal to `10`, so `11 == 10` is `False`. Finally, `10` is equal
    to `10`, so `10 != 10` is `False`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`10`等于`10`，所以`10 == 10`评估为`True`。但`10`不等于`11`，所以`10 == 11`是`False`。即使顺序颠倒，`11`仍然不等于`10`，所以`11
    == 10`是`False`。最后，`10`等于`10`，所以`10 != 10`是`False`。
- en: 'You can also evaluate string expressions with comparison operators:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用比较运算符评估字符串表达式：
- en: '[PRE28]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '`''Hello''` is equal to `''Hello''`, so `''Hello'' == ''Hello''` is `True`.
    `''Goodbye''` is not equal to `''Hello''`, so `''Goodbye'' != ''Hello''` is also
    `True`.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`''Hello''`等于`''Hello''`，所以`''Hello'' == ''Hello''`是`True`。`''Goodbye''`不等于`''Hello''`，所以`''Goodbye''
    != ''Hello''`也是`True`。'
- en: Notice that the last line evaluates to `False`. Upper- and lowercase letters
    are not the same in Python, so `'Hello'` is not equal to `'HELLO'`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，最后一行评估为`False`。在Python中，大写和小写字母不相同，所以`'Hello'`不等于`'HELLO'`。
- en: 'String and integer values will never be equal to each other. For example, enter
    the following into the interactive shell:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串和整数值永远不会相等。例如，将以下内容输入到交互式shell中：
- en: '[PRE29]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the first example, `42` is an integer and `'Hello'` is a string, so the values
    are not equal and the expression evaluates to `False`. In the second example,
    the string `'42'` is still not an integer, so the expression “the integer `42`
    is not equal to the string `'42'`” evaluates to `True`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个例子中，`42`是一个整数，`'Hello'`是一个字符串，所以这些值不相等，表达式评估为`False`。在第二个例子中，字符串`'42'`仍然不是一个整数，所以表达式“整数`42`不等于字符串`'42'`”评估为`True`。
- en: '***The Difference Between = and ==***'
  id: totrans-164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***=和==之间的区别***'
- en: Be careful not to confuse the assignment operator, `=`, and the equal to comparison
    operator, `==`. The equal sign, `=`, is used in assignment statements to store
    a value to a variable, whereas the double equal sign, `==`, is used in expressions
    to see whether two values are equal. It’s easy to accidentally use one when you
    mean to use the other.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要小心不要混淆赋值运算符`=`和等于比较运算符`==`。等号`=`用于赋值语句将值存储到变量中，而双等号`==`用于表达式，以查看两个值是否相等。很容易在本意使用一个时意外使用另一个。
- en: It might help to remember that both the equal to comparison operator, `==`,
    and the not equal to comparison operator, `!=`, have two characters.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 也许有助于记住等于比较运算符`==`和不等于比较运算符`!=`都有两个字符。
- en: '**if Statements**'
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**if语句**'
- en: 'Line 17 is an `if` statement:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 第17行是一个`if`语句：
- en: '[PRE30]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The code block following the `if` statement will run if the `if` statement’s
    condition evaluates to `True`. If the condition is `False`, the code in the `if`
    block is skipped. Using `if` statements, you can make the program run certain
    code only when you want it to.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句后面的代码块将在`if`语句的条件评估为`True`时运行。如果条件为`False`，则跳过`if`块中的代码。使用`if`语句，您可以使程序仅在需要时运行特定代码。'
- en: Line 17 checks whether the player’s guess is less than the computer’s secret
    number. If so, then the execution moves inside the `if` block on line 18 and prints
    a message telling the player their guess was too low.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 第17行检查玩家的猜测是否小于计算机的秘密数字。如果是，则执行移动到第18行的`if`块内，并打印一条消息告诉玩家他们的猜测太低了。
- en: 'Line 20 checks whether the player’s guess is greater than the secret number:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 第20行检查玩家的猜测是否大于秘密数字：
- en: '[PRE31]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: If this condition is `True`, then the `print()` function call tells the player
    that their guess is too high.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个条件为`True`，那么`print()`函数调用会告诉玩家他们的猜测太高。
- en: '**Leaving Loops Early with the break Statement**'
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用break语句提前离开循环**'
- en: 'The `if` statement on line 23 checks whether the number the player guessed
    is equal to the secret number. If it is, the program runs the `break` statement
    on line 24:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 第23行的`if`语句检查玩家猜测的数字是否等于秘密数字。如果是，程序会执行第24行的`break`语句：
- en: '[PRE32]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: A `break` statement tells the execution to jump immediately out of the `for`
    block to the first line after the end of the `for` block. The `break` statement
    is found only inside loops, such as in a `for` block.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`break`语句告诉执行立即跳出`for`块，到达`for`块结束后的第一行。`break`语句只在循环内找到，比如在`for`块中。'
- en: '**Checking Whether the Player Won**'
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**检查玩家是否赢了**'
- en: 'The `for` block ends at the next line of code with no indentation, which is
    line 26:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`块在没有缩进的下一行代码结束，即第26行：'
- en: '[PRE33]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The execution leaves the `for` block either because it has looped six times
    (when the player runs out of guesses) or because the `break` statement on line
    24 has executed (when the player guesses the number correctly).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 执行离开`for`块，要么是因为它已经循环了六次（当玩家猜错次数用尽时），要么是因为第24行的`break`语句已经执行（当玩家猜对了数字）。
- en: 'Line 26 checks whether the player guessed correctly. If so, the execution enters
    the `if` block at line 27:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 第26行检查玩家是否猜对了。如果是，执行进入第27行的`if`块：
- en: '[PRE34]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Lines 27 and 28 execute only if the condition in the `if` statement on line
    26 is `True` (that is, if the player correctly guessed the computer’s number).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 第27行和第28行只有在第26行的`if`语句的条件为`True`时执行（也就是说，如果玩家正确猜到了计算机的数字）。
- en: Line 27 calls the `str()` function, which returns the string form of `guessesTaken
    + 1` (since the range function goes from 0 to 5 instead of 1 to 6). Line 28 concatenates
    strings to tell the player they have won and how many guesses it took. Only string
    values can concatenate to other strings. This is why line 27 had to change `guessesTaken
    + 1` to the string form. Otherwise, trying to concatenate a string with an integer
    would cause Python to display an error.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 第27行调用`str()`函数，它返回`guessesTaken + 1`的字符串形式（因为`range`函数从0到5而不是从1到6）。第28行连接字符串，告诉玩家他们赢了多少次猜测。只有字符串值可以连接到其他字符串。这就是为什么第27行必须将`guessesTaken
    + 1`更改为字符串形式。否则，尝试将字符串与整数连接会导致Python显示错误。
- en: '**Checking Whether the Player Lost**'
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**检查玩家是否输了**'
- en: 'If the player runs out of guesses, the execution will go to this line of code:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家猜错次数用尽，执行将到达这行代码：
- en: '[PRE35]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Line 30 uses the not equal to comparison operator `!=` to check whether the
    player’s last guess is not equal to the secret number. If this condition evaluates
    to `True`, the execution moves into the `if` block on line 31.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 第30行使用不等于比较运算符`!=`来检查玩家的最后一次猜测是否不等于秘密数字。如果这个条件计算为`True`，执行将进入第31行的`if`块。
- en: 'Lines 31 and 32 are inside the `if` block, executing only if the condition
    on line 30 is `True`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 第31行和第32行在`if`块内，只有在第30行的条件为`True`时执行：
- en: '[PRE36]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In this block, the program tells the player what the secret number was. This
    requires concatenating strings, but `number` stores an integer value. Line 31
    overwrites `number` with a string so that it can be concatenated to the `'Nope.
    The number I was thinking of was '` and `'.'` strings on line 32.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个块中，程序告诉玩家秘密数字是多少。这需要连接字符串，但`number`存储的是一个整数值。第31行用一个字符串覆盖`number`，这样它就可以与第32行的`'Nope.
    The number I was thinking of was '`和`'.'`字符串连接起来。
- en: At this point, the execution has reached the end of the code, and the program
    terminates. Congratulations! You’ve just programmed your first real game!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，执行已经到达代码的末尾，程序终止。恭喜！你刚刚编写了你的第一个真正的游戏！
- en: 'You can adjust the game’s difficulty by changing the number of guesses the
    player gets. To give the player only four guesses, change the code on line 12:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过改变玩家获得的猜测次数来调整游戏的难度。要让玩家只有四次猜测，改变第12行的代码：
- en: '[PRE37]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: By passing `4` to `range()`, you ensure that the code inside the loop runs only
    four times instead of six. This makes the game much more difficult. To make the
    game easier, pass a larger integer to the `range()` function call. This will cause
    the loop to run a few *more* times and accept *more* guesses from the player.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`4`传递给`range()`，你确保循环内的代码只运行四次，而不是六次。这会使游戏变得更加困难。要使游戏变得更容易，传递一个更大的整数给`range()`函数调用。这将导致循环运行几次*更多*，并接受*更多*玩家的猜测。
- en: '**Summary**'
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**摘要**'
- en: Programming is just the action of writing code for programs—that is, creating
    programs that can be executed by a computer.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 编程只是为程序编写代码的行为，也就是创建可以由计算机执行的程序。
- en: When you see someone using a computer program (for example, playing your Guess
    the Number game), all you see is some text appearing on the screen. The program
    decides what text to display on the screen (the program’s *output*) based on its
    instructions and on the text that the player typed with the keyboard (the program’s
    *input*). A program is just a collection of instructions that act on the user’s
    input.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看到有人使用计算机程序（例如，玩你的猜数字游戏），你只会看到一些文本出现在屏幕上。程序根据它的指令和玩家用键盘输入的文本（程序的*输入*）决定在屏幕上显示什么文本（程序的*输出*）。程序只是一系列根据用户输入进行操作的指令。
- en: 'There are a few kinds of instructions:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种指令：
- en: • **Expressions** are values connected by operators. Expressions are all evaluated
    down to a single value. For example, `2 + 2` evaluates to `4` or `'Hello' + '
    ' + 'World'` evaluates to `'Hello World'`. When expressions are next to the `if`
    and `for` keywords, you can also call them *conditions*.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: • **表达式**是由运算符连接的值。表达式都被计算为单个值。例如，`2 + 2`计算为`4`或`'Hello' + ' ' + 'World'`计算为`'Hello
    World'`。当表达式紧邻`if`和`for`关键字时，你也可以称它们为*条件*。
- en: • **Assignment statements** store values in variables so you can remember the
    values later in the program.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: • **赋值语句**将值存储在变量中，以便以后在程序中记住这些值。
- en: • **The** `if`, `for`**, and** `break` **statements** are flow control statements
    that can make the execution skip instructions, loop over instructions, or break
    out of loops. Function calls also change the flow of execution by jumping to the
    instructions inside of a function.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: • **if**、**for** 和 **break** **语句**是流程控制语句，可以使执行跳过指令、循环执行指令或跳出循环。函数调用也通过跳转到函数内部的指令来改变执行流程。
- en: • **The** `print()` **and** `input()` **functions** display text on the screen
    and get text from the keyboard. Instructions that deal with the *input* and *output*
    of the program are called *I/O* (pronounced *eye oh*).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: • **print()** 和 **input()** **函数**在屏幕上显示文本并从键盘获取文本。处理程序的*输入*和*输出*的指令称为*I/O*（发音为*eye
    oh*）。
- en: That’s it—just those four things. Of course, there are many details to be learned
    about those four types of instructions. In later chapters, you’ll read about more
    data types and operators, more flow control statements, and many other functions
    that come with Python. There are also different types of I/O beyond text, such
    as input from the mouse and sound and graphics output.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样 - 就这四样东西。当然，关于这四种类型的指令还有许多细节需要学习。在后面的章节中，你将了解更多的数据类型和运算符，更多的流程控制语句，以及许多其他与Python一起使用的函数。除了文本之外，还有不同类型的I/O，比如鼠标输入和声音和图形输出。
- en: '[Prev: Chapter 2 - Writing Programs](chapter2.html) | [Next: Chapter 4 - A
    Joke-Telling Program](chapter4.html)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一页：第2章 - 编写程序](chapter2.html) | [下一页：第4章 - 一个讲笑话的程序](chapter4.html)'

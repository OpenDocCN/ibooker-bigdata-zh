- en: 'Pipes, Part 1: Introduction to pipes'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道，第1部分：管道介绍
- en: What is IPC?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是IPC？
- en: Inter process communication is any way for one process to talk to another process.
    You've already seen one form of this virtual memory! A piece of virtual memory
    can be shared between parent and child, leading to communication. You may want
    to wrap that memory in `pthread_mutexattr_setpshared(&attrmutex, PTHREAD_PROCESS_SHARED);`
    mutex (or a process wide mutex) to prevent race conditions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 进程间通信是一个进程与另一个进程交流的任何方式。你已经看到了这种虚拟内存的一种形式！一块虚拟内存可以在父进程和子进程之间共享，从而进行通信。你可能想把那块内存包装在`pthread_mutexattr_setpshared(&attrmutex,
    PTHREAD_PROCESS_SHARED);`互斥锁（或者进程范围的互斥锁）中，以防止竞争条件。
- en: There are more standard ways of IPC, like pipes! Consider if you type the following
    into your terminal
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多标准的IPC方式，比如管道！考虑一下，如果你在终端中输入以下内容
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What does the following code do (It doesn't really matter so you can skip this
    if you want)? Well it `ls`'s the current directory (the -1 means that it outputs
    one entry per line). The `cut` command then takes everything before the first
    period. Uniq makes sure all the lines are uniq, sort sorts them and tee outputs
    to a file.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码做了什么（如果你愿意，你可以跳过这个）？好吧，它`ls`当前目录（-1表示它每行输出一个条目）。然后`cut`命令取得第一个句点之前的所有内容。Uniq确保所有行都是唯一的，sort对它们进行排序，tee输出到一个文件。
- en: The important part is that bash creates **5 separate processes** and connects
    their standard outs/stdins with pipes the trail looks something like this.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的部分是bash创建了**5个单独的进程**并将它们的标准输出/标准输入与管道连接起来，轨迹看起来像这样。
- en: (0) ls (1)------>(0) cut (1)------->(0) uniq (1)------>(0) sort (1)------>(0)
    tee (1)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: (0) ls (1)------>(0) cut (1)------->(0) uniq (1)------>(0) sort (1)------>(0)
    tee (1)
- en: The numbers in the pipes are the file descriptors for each process and the arrow
    represents the redirect or where the output of the pipe is going.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 管道中的数字是每个进程的文件描述符，箭头表示重定向或管道输出的位置。
- en: What is a pipe?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是管道？
- en: A POSIX pipe is almost like its real counterpart - you can stuff bytes down
    one end and they will appear at the other end in the same order. Unlike real pipes
    however, the flow is always in the same direction, one file descriptor is used
    for reading and the other for writing. The `pipe` system call is used to create
    a pipe.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX管道几乎像它的真实对应物 - 你可以把字节塞进一端，它们会按照相同的顺序出现在另一端。然而，与真实的管道不同，流动方向总是相同的，一个文件描述符用于读取，另一个用于写入。`pipe`系统调用用于创建管道。
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: These file descriptors can be used with `read` -
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件描述符可以与`read`一起使用 -
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And `write` -
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 和`write` -
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How can I use pipe to communicate with a child process?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我怎样使用管道与子进程通信？
- en: A common method of using pipes is to create the pipe before forking.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用管道的常见方法是在分叉之前创建管道。
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The child can then send a message back to the parent:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然后子进程可以向父进程发送消息：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Can I use pipes inside a single process?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以在单个进程中使用管道吗？
- en: 'Short answer: Yes, but I''m not sure why you would want to LOL!'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 简短回答：是的，但我不确定你为什么要这样做LOL！
- en: 'Here''s an example program that sends a message to itself:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个向自己发送消息的示例程序：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The problem with using a pipe in this fashion is that writing to a pipe can
    block i.e. the pipe only has a limited buffering capacity. If the pipe is full
    the writing process will block! The maximum size of the buffer is system dependent;
    typical values from 4KB upto 128KB.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式使用管道的问题在于写入管道可能会阻塞，即管道只有有限的缓冲容量。如果管道已满，写入进程将被阻塞！缓冲区的最大大小取决于系统；典型值从4KB到128KB。
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'See [Pipes, Part 2: Pipe programming secrets](/angrave/SystemProgramming/wiki/Pipes%2C-Part-2%3A-Pipe-programming-secrets)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[Pipes，第2部分：管道编程秘密](/angrave/SystemProgramming/wiki/Pipes%2C-Part-2%3A-Pipe-programming-secrets)

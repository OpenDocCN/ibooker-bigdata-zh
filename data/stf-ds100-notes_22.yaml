- en: 21  SQL II
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 21 SQL II
- en: 原文：[https://ds100.org/course-notes/sql_II/sql_II.html](https://ds100.org/course-notes/sql_II/sql_II.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://ds100.org/course-notes/sql_II/sql_II.html](https://ds100.org/course-notes/sql_II/sql_II.html)
- en: '*Learning Outcomes* ***   Introduce the ability to filter groups'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*学习成果* ***   介绍过滤组的能力'
- en: Perform data cleaning and text manipulation in SQL
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在SQL中执行数据清理和文本操作
- en: Join data across tables**  **In this lecture, we’ll continue our work from last
    time to introduce some advanced SQL syntax.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨表连接数据** **在本讲座中，我们将继续上次的工作，介绍一些高级的SQL语法。
- en: First, let’s load in the database from last lecture.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们加载上一堂课的数据库。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 21.1 Filtering Groups
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 21.1 过滤组
- en: '`HAVING` filters groups by applying some condition across all rows in each
    group. We interpret it as a a way to keep only the groups `HAVING` some condition.
    Note the difference between `WHERE` and `HAVING`: we use `WHERE` to filter rows,
    whereas we use `HAVING` to filter groups. `WHERE` precedes `HAVING` in terms of
    how SQL executes a query.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`HAVING`通过在每个组的所有行上应用一些条件来过滤组。我们将其解释为只保留具有某些条件的组的一种方式。请注意`WHERE`和`HAVING`之间的区别：我们使用`WHERE`来过滤行，而我们使用`HAVING`来过滤组。在SQL执行查询时，`WHERE`在`HAVING`之前。'
- en: Let’s take a look at the `Dish` table to see how we can use `HAVING`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`Dish`表，看看我们如何使用`HAVING`。
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '| name | type | cost |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 费用 |'
- en: '| --- | --- | --- |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| ravioli | entree | 10 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 意面 | 主菜 | 10 |'
- en: '| ramen | entree | 13 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 拉面 | 主菜 | 13 |'
- en: '| taco | entree | 7 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 墨西哥卷饼 | 主菜 | 7 |'
- en: '| edamame | appetizer | 4 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 毛豆 | 开胃菜 | 4 |'
- en: '| fries | appetizer | 4 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 薯条 | 开胃菜 | 4 |'
- en: '| potsticker | appetizer | 4 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 锅贴 | 开胃菜 | 4 |'
- en: '| ice cream | dessert | 5 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 冰淇淋 | 甜点 | 5 |'
- en: The code below groups the different dishes by type, and only keeps those groups
    wherein the max cost is still less than 8.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码按类型对不同的菜品进行分组，并仅保留那些最大费用仍然小于8的组。
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '| type | COUNT(*) |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | COUNT(*) |'
- en: '| --- | --- |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| appetizer | 3 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 开胃菜 | 3 |'
- en: '| dessert | 1 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 甜点 | 1 |'
- en: In contrast, the code below first filters for rows where the cost is less than
    8, and then does the grouping. Note the difference in outputs - in this case,
    “taco” is also included, whereas other entries in the same group having cost greater
    than or equal to 8 are not included.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，下面的代码首先过滤成本小于8的行，然后进行分组。请注意输出的差异 - 在这种情况下，“taco”也被包括在内，而同一组中其他成本大于或等于8的条目则不被包括在内。
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '| type | COUNT(*) |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | COUNT(*) |'
- en: '| --- | --- |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| appetizer | 3 |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 开胃菜 | 3 |'
- en: '| dessert | 1 |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 甜点 | 1 |'
- en: '| entree | 1 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 主菜 | 1 |'
- en: 21.2 EDA in SQL
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 21.2 SQL中的探索性数据分析
- en: In the last lecture, we mostly worked under the assumption that our data had
    already been cleaned. However, as we saw in our first pass through the data science
    lifecycle, we’re very unlikely to be given data that is free of formatting issues.
    With this in mind, we’ll want to learn how to clean and transform data in SQL.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一堂课中，我们大多是在假设我们的数据已经被清理过的情况下工作。然而，正如我们在数据科学生命周期的第一遍中看到的那样，我们很少会得到没有格式问题的数据。考虑到这一点，我们将学习如何在SQL中清理和转换数据。
- en: 'Our typical workflow when working with “big data” is:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在处理“大数据”时的典型工作流程是：
- en: Use SQL to query data from a database
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用SQL查询数据库中的数据
- en: Use `python` (with `pandas`) to analyze this data in detail
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`python`（带有`pandas`）详细分析这些数据
- en: We can, however, still perform simple data cleaning and re-structuring using
    SQL directly. To do so, we’ll use the `Title` table from the `imdbmini` database.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们仍然可以直接使用SQL执行简单的数据清理和重组。为此，我们将使用`imdbmini`数据库中的`Title`表。
- en: 21.2.1 Matching Text using `LIKE`
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 21.2.1 使用`LIKE`匹配文本
- en: One common task we encountered in our first look at EDA was needing to match
    string data. For example, we might want to remove entries beginning with the same
    prefix as part of the data cleaning process.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在首次进行探索性数据分析时遇到的一个常见任务是需要匹配字符串数据。例如，我们可能希望在数据清理过程中删除以相同前缀开头的条目。
- en: In SQL, we use the `LIKE` operator to (you guessed it) look for strings that
    are *like* a given string pattern.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL中，我们使用`LIKE`运算符来（你猜对了）查找与给定字符串模式*相似*的字符串。
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '| titleType | primaryTitle |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| titleType | primaryTitle |'
- en: '| --- | --- |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| movie | Star Wars: Episode I - The Phantom Menace |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 星球大战：第一集 - 幽灵的威胁 |'
- en: What if we wanted to find *all* Star Wars movies? `%` is the wildcard operator,
    it means “look for any character, any number of times”. This makes it helpful
    for identifying strings that are similar to our desired pattern, even when we
    don’t know the full text of what we aim to extract. In contrast, `_` means “look
    for exactly 1 character”, as you can see in the Harry Potter example that follows.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要找到*所有*星球大战电影呢？`%`是通配符运算符，它表示“查找任意字符，任意次数”。这使得它有助于识别与我们期望提取的模式相似的字符串，即使我们不知道我们的目标模式的完整文本是什么。相比之下，`_`表示“查找正好1个字符”，正如你在随后的哈利波特示例中所看到的。
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '| titleType | primaryTitle |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| titleType | primaryTitle |'
- en: '| --- | --- |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| movie | Star Wars: Episode IV - A New Hope |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 星球大战：第四集 - 新希望 |'
- en: '| movie | Star Wars: Episode V - The Empire Strikes Back |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 星球大战：第五集 - 帝国反击战 |'
- en: '| movie | Star Wars: Episode VI - Return of the Jedi |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 星球大战：第六集 - 绝地归来 |'
- en: '| movie | Star Wars: Episode I - The Phantom Menace |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 星球大战：第一集 - 幽灵的威胁 |'
- en: '| movie | Star Wars: Episode II - Attack of the Clones |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 星球大战：第二集 - 克隆人的进攻 |'
- en: '| movie | Star Wars: Episode III - Revenge of the Sith |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 星球大战：第三集 - 西斯的复仇 |'
- en: '| tvSeries | Star Wars: Clone Wars |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 电视剧 | 星球大战：克隆战争 |'
- en: '| tvSeries | Star Wars: The Clone Wars |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 电视剧 | 星球大战：克隆战争 |'
- en: '| movie | Star Wars: The Clone Wars |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 星球大战：克隆战争 |'
- en: '| movie | Star Wars: Episode VII - The Force Awakens |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 星球大战：第七集 - 原力觉醒 |'
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '| titleType | primaryTitle |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| titleType | primaryTitle |'
- en: '| --- | --- |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| movie | Harry Potter and the Deathly Hallows: Part 1 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 哈利波特与死亡圣器（上） |'
- en: '| movie | Harry Potter and the Deathly Hallows: Part 2 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 哈利波特与死亡圣器（下） |'
- en: 21.2.2 `CAST`ing Data Types
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 21.2.2 数据类型转换
- en: A common data cleaning task is converting data to the correct variable type.
    The `CAST` keyword is used to generate a new output column. Each entry in this
    output column is the result of converting the data in an existing column to a
    new data type. For example, we may wish to convert numeric data stored as a string
    to an integer.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的数据清理任务是将数据转换为正确的变量类型。`CAST`关键字用于生成新的输出列。此输出列中的每个条目都是将现有列中的数据转换为新数据类型的结果。例如，我们可能希望将存储为字符串的数字数据转换为整数。
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '| primaryTitle | CAST(runtimeMinutes AS INT) | CAST(startYear AS INT) |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| primaryTitle | CAST(runtimeMinutes AS INT) | CAST(startYear AS INT) |'
- en: '| --- | --- | --- |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| A Trip to the Moon | 13 | 1902 |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 月球之旅 | 13 | 1902 |'
- en: '| The Birth of a Nation | 195 | 1915 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 一个国家的诞生 | 195 | 1915 |'
- en: '| The Cabinet of Dr. Caligari | 76 | 1920 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 卡里加里博士的橱柜 | 76 | 1920 |'
- en: '| The Kid | 68 | 1921 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 小子 | 68 | 1921 |'
- en: '| Nosferatu | 94 | 1922 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| Nosferatu | 94 | 1922 |'
- en: We use `CAST` when `SELECT`ing colunns for our output table. In the example
    above, we want to `SELECT` the columns of integer year and runtime data that is
    created by the `CAST`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在为输出表`SELECT`列时使用`CAST`。在上面的例子中，我们希望`SELECT`由`CAST`创建的整数年份和运行时间数据的列。
- en: SQL will automatically name a new column according to the command used to `SELECT`
    it, which can lead to unwieldy column names. We can rename the `CAST`ed column
    using the `AS` keyword.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: SQL将根据用于`SELECT`它的命令自动命名一个新列，这可能导致笨拙的列名。我们可以使用`AS`关键字重命名`CAST`列。
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '| title | minutes | year |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 标题 | 分钟 | 年 |'
- en: '| --- | --- | --- |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| A Trip to the Moon | 13 | 1902 |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 月球之旅 | 13 | 1902 |'
- en: '| The Birth of a Nation | 195 | 1915 |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 一个国家的诞生 | 195 | 1915 |'
- en: '| The Cabinet of Dr. Caligari | 76 | 1920 |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 卡里加里博士的橱柜 | 76 | 1920 |'
- en: '| The Kid | 68 | 1921 |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 小子 | 68 | 1921 |'
- en: '| Nosferatu | 94 | 1922 |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| Nosferatu | 94 | 1922 |'
- en: 21.2.3 Using Conditional Statements with `CASE`
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 21.2.3 使用`CASE`的条件语句
- en: When working with `pandas`, we often ran into situations where we wanted to
    generate new columns using some form of conditional statement. For example, say
    we wanted to describe a film title as “old,” “mid-aged,” or “new,” depending on
    the year of its release.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`pandas`时，我们经常遇到希望使用某种形式的条件语句生成新列的情况。例如，假设我们想根据其发行年份将电影标题描述为“老”、“中年”或“新”。
- en: 'In SQL, conditional operations are performed using a `CASE` clause. Conceptually,
    `CASE` behaves much like the `CAST` operation: it creates a new column that we
    can then `SELECT` to appear in the output. The syntax for a `CASE` clause is as
    follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL中，使用`CASE`子句执行条件操作。在概念上，`CASE`的行为很像`CAST`操作：它创建一个新列，然后我们可以`SELECT`它以出现在输出中。`CASE`子句的语法如下：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Scanning through the skeleton code above, you can see that the logic is similar
    to that of an `if` statement in `python`. The conditional statement is first opened
    by calling `CASE`. Each new condition is specified by `WHEN`, with `THEN` indicating
    what value should be filled if the condition is met. `ELSE` specifies the value
    that should be filled if no other conditions are met. Lastly, `END` indicates
    the end of the conditional statement; once `END` has been called, SQL will continue
    evaluating the query as usual.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通过扫描上面的骨架代码，您可以看到逻辑与`python`中的`if`语句类似。条件语句首先通过调用`CASE`打开。每个新条件由`WHEN`指定，`THEN`指示满足条件时应填充的值。`ELSE`指定如果没有满足其他条件应填充的值。最后，`END`指示条件语句的结束；一旦调用了`END`，SQL将继续像往常一样评估查询。
- en: Let’s see this in action. In the example below, we give the new column created
    by the `CASE` statement the name `movie_age`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个例子。在下面的例子中，我们给`CASE`语句创建的新列命名为`movie_age`。
- en: '[PRE21]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '| titleType | startYear | movie_age |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| titleType | startYear | movie_age |'
- en: '| --- | --- | --- |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| short | 1902 | old |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 短片 | 1902 | 老 |'
- en: '| movie | 1915 | old |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 1915 | 老 |'
- en: '| movie | 1920 | old |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 1920 | 老 |'
- en: '| movie | 1921 | old |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 1921 | 老 |'
- en: '| movie | 1922 | old |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 1922 | 老 |'
- en: '| movie | 1924 | old |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 1924 | 老 |'
- en: '| movie | 1925 | old |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 1925 | 老 |'
- en: '| movie | 1925 | old |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 1925 | 老 |'
- en: '| movie | 1927 | old |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 电影 | 1927 | 老 |'
- en: '| movie | 1926 | old |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: 电影 | 1926 | 老 |
- en: 21.3 `JOIN`ing Tables
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 21.3 `JOIN`表
- en: At this point, we’re well-versed in using SQL as a tool to clean, manipulate,
    and transform data in a table. Notice that this sentence referred to one *table*,
    specifically. What happens if the data we need is distributed across multiple
    tables? This is an important consideration when using SQL – recall that we first
    introduced SQL as a language to query from databases. Databases often store data
    in a multidimensional structure. In other words, information is stored across
    several tables, with each table containing a small subset of all the data housed
    by the database.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经熟练地使用SQL作为清理、操作和转换表中数据的工具。请注意，这句话特指一个*表*。如果我们需要的数据分布在多个表中会发生什么？这是在使用SQL时需要考虑的重要问题——回想一下，我们最初将SQL介绍为一种从数据库查询的语言。数据库通常以多维结构存储数据。换句话说，信息存储在多个表中，每个表包含数据库存储的所有数据的一个小子集。
- en: A common way of organizing a database is by using a **star schema**. A star
    schema is composed of two types of tables. A **fact table** is the central table
    of the database – it contains the information needed to link entries across several
    **dimension tables**, which contain more detailed information about the data.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 组织数据库的一种常见方式是使用**星型模式**。星型模式由两种类型的表组成。**事实表**是数据库的中心表，它包含了跨多个**维度表**的条目链接所需的信息，维度表包含有关数据的更详细的信息。
- en: Say we were working with a database about boba offerings in Berkeley. The dimension
    tables of the database might contain information about tea varieties and boba
    toppings. The fact table would be used to link this information across the various
    dimension tables.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在处理一个关于伯克利波霸供应的数据库。数据库的维度表可能包含有关茶品种和波霸配料的信息。事实表将用于在各种维度表之间链接这些信息。
- en: '![multidimensional](../Images/e0c89507ac8893171873d0411e0f926d.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![multidimensional](../Images/e0c89507ac8893171873d0411e0f926d.png)'
- en: If we explicitly mark the relationships between tables, we start to see the
    star-like structure of the star schema.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们明确标记表之间的关系，我们开始看到星型模式的结构。
- en: '![star](../Images/7a667669232631f22775e4e9f9f12495.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![星星](../Images/7a667669232631f22775e4e9f9f12495.png)'
- en: To join data across multiple tables, we’ll use the (creatively named) `JOIN`
    keyword. We’ll make things easier for now by first considering the simpler `cats`
    dataset, which consists of the tables `s` and `t`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要跨多个表连接数据，我们将使用（创造性地命名的）`JOIN`关键字。我们首先考虑更简单的`cats`数据集，其中包含表`s`和`t`。
- en: '![cats](../Images/be80731ef571efb1977e668ab5c8290f.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![猫咪](../Images/be80731ef571efb1977e668ab5c8290f.png)'
- en: To perform a join, we amend the `FROM` clause. You can think of this as saying,
    “`SELECT` my data `FROM` tables that have been `JOIN`ed together.”
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行连接，我们修改`FROM`子句。您可以将其视为说：“`SELECT`我的数据`FROM`已连接在一起的表。”
- en: 'Remember: SQL does not consider newlines or whitespace when interpreting queries.
    The indentation given in the example below is to help improve readability. If
    you wish, you can write code that does not follow this formatting.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 记住：SQL在解释查询时不考虑换行或空格。下面示例中给出的缩进是为了帮助提高可读性。如果愿意，可以编写不遵循此格式的代码。
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We also need to specify what column from each table should be used to determine
    matching entries. By defining these keys, we provide SQL with the information
    it needs to pair rows of data together.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要指定应从每个表中使用哪个列来确定匹配的条目。通过定义这些键，我们为SQL提供了它需要的信息，以便将数据行配对在一起。
- en: In a **cross join**, *all* possible combinations of rows appear in the output
    table, regardless of whether or not rows share a matching key. Because all rows
    are joined, even if there is no matching key, it is not necessary to specify what
    keys to consider in an `ON` statement. A cross join is also known as a cartesian
    product.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在**交叉连接**中，输出表中出现*所有*可能的行组合，无论行是否共享匹配键。因为所有行都被连接，即使没有匹配键，也不需要在`ON`语句中指定要考虑的键。交叉连接也称为笛卡尔积。
- en: '![cross](../Images/e1c2528fd671397878dc58738046411e.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![交叉连接](../Images/e1c2528fd671397878dc58738046411e.png)'
- en: The most commonly used type of SQL `JOIN` is the **inner join**. It turns out
    you’re already familiar with what an inner join does, and how it works – this
    is the type of join we’ve been using in `pandas` all along! In an inner join,
    we combine every row in our first table with its matching entry in the second
    table. If a row from either table does not have a match in the other table, it
    is omitted from the output.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的SQL `JOIN`类型是**内连接**。原来你已经熟悉内连接的作用和工作原理 - 这就是我们一直在`pandas`中使用的连接类型！在内连接中，我们将第一个表中的每一行与第二个表中的匹配条目组合在一起。如果任一表中的行在另一表中没有匹配项，则将其从输出中省略。
- en: '![inner](../Images/752324b184d03660cc4fd56684e717bf.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![内连接](../Images/752324b184d03660cc4fd56684e717bf.png)'
- en: 'Another way of interpreting the inner join: perform a cross join, then remove
    all rows that do not share a matching key. Notice that the output of the inner
    join above contains all rows of the cross join example that contain a single color
    across the entire row.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 解释内连接的另一种方法：执行交叉连接，然后删除所有不共享匹配键的行。请注意，上面内连接的输出包含交叉连接示例的所有行，该示例在整个行中包含单个颜色。
- en: 'In a **full outer join**, all rows that have a match between the two tables
    are joined together. If a row has no match in the second table, then the values
    of the columns for that second table are filled with null. In other words, a full
    outer join performs an inner join *while still keeping* rows that have no match
    in the other table. This is best understood visually:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在**全外连接**中，将两个表之间有匹配的所有行连接在一起。如果一行在第二个表中没有匹配项，则该第二个表的列的值将填充为null。换句话说，全外连接执行内连接*同时保留*在另一表中没有匹配的行。这最好通过可视化理解：
- en: '![full](../Images/7fbe2b3450ae09842220f4cdff71531a.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![全外连接](../Images/7fbe2b3450ae09842220f4cdff71531a.png)'
- en: We have kept the same output achieved using an inner join, with the addition
    of partially null rows for entries in `s` and `t` that had no match in the second
    table. Note that `FULL OUTER JOIN` is not supported by SQLite, the “flavor” of
    SQL that will be used in lab and homework.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用内连接实现了相同的输出，同时为在第二个表中没有匹配的`S`和`t`条目添加了部分空行。请注意，SQLite不支持`FULL OUTER JOIN`，这是实验和作业中将使用的SQL“风格”。
- en: A **left outer join** is similar to a full outer join. In a left outer join,
    *all* rows in the left table are kept in the output table. If a row in the right
    table shares a match with the left table, this row will be kept; otherwise, the
    rows in the right table are omitted from the output.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**左外连接**类似于全外连接。在左外连接中，输出表中保留了左表中的*所有*行。如果右表中的行与左表共享匹配，则将保留此行；否则，右表中的行将从输出中省略。'
- en: '![left](../Images/f630b5d974c16a9962f5493f417b8c02.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![左外连接](../Images/f630b5d974c16a9962f5493f417b8c02.png)'
- en: A **right outer join** keeps all rows in the right table. Rows in the left table
    are only kept if they share a match in the right table. Right outer joins are
    not supported by SQLite.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**右外连接**保留右表中的所有行。只有左表中的行在右表中有匹配时才会保留。SQLite不支持右外连接。'
- en: '![right](../Images/9f6fefea2c904bc748c009a96276cd0b.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![右外连接](../Images/9f6fefea2c904bc748c009a96276cd0b.png)'
- en: In the examples above, we performed our joins by checking for equality between
    the two tables (i.e., by setting `s.id = t.id`). SQL also supports joining rows
    on *inequalities*, which is something we weren’t able to do when working in `pandas`.
    Consider a new dataset that contains information about students and teachers.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们通过检查两个表之间的相等性（即通过设置`s.id = t.id`）执行了连接。SQL还支持在*不等式*上连接行，这是我们在`pandas`中无法做到的。考虑一个包含有关学生和教师信息的新数据集。
- en: '![student](../Images/40046f8ed4ef3b6ef49120742c846e9f.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![学生](../Images/40046f8ed4ef3b6ef49120742c846e9f.png)'
- en: Often, we wish to compare the relative values of rows in different tables, rather
    than check that they are exactly equal. For example, we may want to join rows
    where students are older than the corresponding teacher. We can do so by specifying
    an inequality in our `ON` statement.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们希望比较不同表中行的相对值，而不是检查它们是否完全相等。例如，我们可能希望连接学生比相应的老师年龄大的行。我们可以通过在`ON`语句中指定不等式来实现这一点。
- en: '![inequality](../Images/0abafe2c9b4d6625d1b5c07af9bfdd8d.png)**'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '![不等式](../Images/0abafe2c9b4d6625d1b5c07af9bfdd8d.png)**'

- en: 'Deadlock, Part 3: Dining Philosophers'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 死锁，第3部分：餐桌上的哲学家
- en: Backstory
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 背景故事
- en: '![](../Images/c17a56237998885b1dd4cd23e86f4c90.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c17a56237998885b1dd4cd23e86f4c90.jpg)'
- en: So you have your philosophers sitting around a table all wanting to eat some
    pasta (or whatever that is) and they are really hungry. Each of the philosophers
    are essentially the same, meaning that each philosopher has the same instruction
    set based on the other philosopher ie you can't tell every even philosopher to
    do one thing and every odd philosopher to do another thing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你的哲学家们围坐在桌子周围，都想吃点意大利面（或者其他什么），他们真的很饿。每个哲学家本质上都是一样的，这意味着每个哲学家都有相同的指令集，基于其他哲学家，也就是说你不能让每个偶数哲学家做一件事，每个奇数哲学家做另一件事。
- en: Failed Solutions
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 失败的解决方案
- en: Left-Right Deadlock
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 左右死锁
- en: What do we do? Let's try a simple solution
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们该怎么办？让我们尝试一个简单的解决方案
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: But this runs into a problem! What if everyone picks up their left fork and
    is waiting on their right fork? We have deadlocked the program. It is important
    to note that deadlock doesn't happen all the time and the probability that this
    solution deadlocks goes down as the number of philosophers goes up. What is really
    important to note is that eventually that this solution will deadlock, letting
    threads starve which is bad.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这会遇到一个问题！如果每个人都拿起他们的左手叉子，正在等待他们的右手叉子呢？我们已经死锁了程序。重要的是要注意，死锁并不总是发生，而且这个解决方案死锁的概率随着哲学家的数量增加而降低。真正重要的是，最终这个解决方案会死锁，让线程挨饿，这是不好的。
- en: Trylock? More like livelock
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Trylock？更像是活锁
- en: So now you are thinking about breaking one of the coffman conditions. We have
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在你在考虑打破柯夫曼条件之一。我们有
- en: Mutual Exclusion
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互斥
- en: No Preemption
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有抢占
- en: Hold and wait
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持有并等待
- en: Circular Wait
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环等待
- en: Well we can't have two philosophers use a fork at the same time, mutual exclusion
    is out of the picture. In our current, simple model, we can't have the philosopher
    let go of the mutex lock once he/she has a hold of it, so we will take this solution
    out right now -- there are some notes at the bottom of the page about this solution.
    Let's break Hold and Wait!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我们不能让两个哲学家同时使用一个叉子，互斥被排除在外。在我们当前的简单模型中，我们不能让哲学家一旦拿到互斥锁就放开它，所以我们现在就排除这个解决方案——关于这个解决方案有一些注释在页面底部。让我们打破持有并等待！
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now our philosopher picks up the left fork and tries to grab the right. If it's
    available, they eats. If it's not available, they put the left fork down and try
    again. No deadlock!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的哲学家拿起左边的叉子，试图抓住右边的叉子。如果右边的叉子可用，他们就吃。如果不可用，他们放下左边的叉子再试一次。没有死锁！
- en: But, there is a problem. What if all the philosophers pick up their left at
    the same time, try to grab their right, put their left down, pick up their left,
    try to grab their right.... We have now livelocked our solution! Our poor philosopher
    are still starving, so let's give them some proper solutions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，有一个问题。如果所有的哲学家同时拿起他们的左手，试图抓住他们的右手，放下他们的左手，再拿起他们的左手，试图抓住他们的右手……我们现在活锁了我们的解决方案！我们可怜的哲学家们仍然饿着，所以让我们给他们一些合适的解决方案。
- en: Viable Solutions
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可行的解决方案
- en: Arbitrator (Naive and Advanced).
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仲裁者（天真和高级）。
- en: The naive arbitrator solution is have one arbitrator (a mutex for example).
    Have each of the philosopher ask the arbitrator for permission to eat. This solution
    allows one philosopher to eat at a time. When they are done, another philosopher
    can ask for permission to eat.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 天真的仲裁者解决方案是有一个仲裁者（例如一个互斥锁）。让每个哲学家请求仲裁者的许可来吃饭。这个解决方案一次只允许一个哲学家吃饭。当他们吃完后，另一个哲学家可以请求吃饭的许可。
- en: This prevents deadlock because there is no circular wait! No philosopher has
    to wait on any other philosopher.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以防止死锁，因为没有循环等待！没有哲学家需要等待其他哲学家。
- en: The advanced arbitrator solution is to implement a class that determines if
    the philosopher's forks are in the arbitrator's possession. If they are, they
    give them to the philosopher, let him eat, and take the forks back. This has the
    added bonus of being able to have multiple philosopher eat at the same time.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 高级仲裁者解决方案是实现一个类，确定哲学家的叉子是否在仲裁者的控制下。如果是，他们把叉子给哲学家，让他吃，然后拿回叉子。这有一个额外的好处，就是能够让多个哲学家同时吃饭。
- en: 'Problems:'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题：
- en: These solutions are slow
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些解决方案很慢
- en: They have a single point of failure, the arbitrator making it a bottleneck
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们有一个单一的故障点，仲裁者使其成为一个瓶颈
- en: The arbitrator needs to also be fair, and be able to determine deadlock in the
    second solution
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仲裁者在第二个解决方案中也需要公平，并且能够确定死锁
- en: In practical systems, the arbitrator tends to give the forks repeatedly to philosophers
    that just ate because of process scheduling
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实际系统中，仲裁者倾向于重复地将叉子交给刚刚吃过的哲学家，因为进程调度
- en: Leaving the Table (Stallings' Solution)
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 离开桌子（Stallings的解决方案）
- en: Why does the first solution deadlock? Well there are n philosophers and n chopsticks.
    What if there is only 1 philsopher at the table? Can we deadlock? No.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么第一个解决方案会死锁？嗯，有n个哲学家和n根筷子。如果桌子上只有1个哲学家怎么办？我们会死锁吗？不会。
- en: How about 2 philsophers? 3? ... You can see where this is going. Stallings'
    solutions says to remove philosophers from the table until deadlock is not possible
    -- think about what the magic number of philosophers at the table is. The way
    to do this in actual system is through semaphores and letting a certain number
    of philosopher through.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 2个哲学家怎么样？3个？……你可以看出这是怎么回事。Stallings的解决方案是从桌子上移除哲学家，直到死锁不可能发生——想想桌子上的哲学家的魔数是多少。在实际系统中，通过信号量来实现这一点，并让一定数量的哲学家通过。
- en: 'Problems:'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题：
- en: The solution requires a lot of context switching which is very expensive for
    the CPU
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案需要大量的上下文切换，这对CPU来说非常昂贵
- en: You need to know about the number of resources before hand in order to only
    let that number of philosophers
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要提前知道资源的数量，以便只让那么多的哲学家
- en: Again priority is given to the processes who have already eaten.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次优先考虑那些已经吃过的进程。
- en: Partial Ordering (Dijkstra's Solution)
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部分排序（Dijkstra的解决方案）
- en: This is Dijkstra's solution (he was the one to propose this problem on an exam).
    Why does the first solution deadlock? Dijkstra thought that the last philosopher
    who picks up his left fork (causing the solution to deadlock) should pick up his
    right. He accomplishes it by number the forks 1..n, and tells each of the philosopher
    to pick up his lower number fork.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Dijkstra的解决方案（他是在考试中提出这个问题的人）。为什么第一个解决方案会死锁？Dijkstra认为最后一个拿起他左边叉子的哲学家（导致解决方案死锁）应该拿起他的右边叉子。他通过给叉子编号1..n，并告诉每个哲学家拿起他较小编号的叉子来实现这一点。
- en: Let's run through the deadlock condition again. Everyone tries to pick up their
    lower number fork first. Philosopher 1 gets fork 1, Philosopher 2 gets fork 2,
    and so on until we get to Philosopher n. They have to choose between fork 1 and
    n. fork 1 is already held up by philosopher 1, so they can't pick up that fork,
    meaning he won't pick up fork n. We have broken circular wait! Meaning deadlock
    isn't possible.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次运行死锁条件。每个人都试图先拿起他们较小编号的叉子。哲学家1拿到叉子1，哲学家2拿到叉子2，依此类推，直到我们到达哲学家n。他们必须在叉子1和n之间做出选择。叉子1已经被哲学家1拿起，所以他们不能拿起那个叉子，这意味着他不会拿起叉子n。我们打破了循环等待！这意味着死锁是不可能的。
- en: 'Problems:'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题：
- en: The philosopher needs to know the set of resources in order before grabbing
    any resources.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哲学家在抓取任何资源之前需要知道资源的集合顺序。
- en: You need to define a partial order to all of the resources.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要为所有资源定义一个偏序。
- en: Prioritizes philosopher who have already eaten.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优先考虑已经吃过饭的哲学家。
- en: Advanced Solutions
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级解决方案
- en: There are many more advanced solutions a non-exhaustive list includes
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多更高级的解决方案，非穷尽列表包括
- en: Clean/Dirty Forks (Chandra/Misra Solution)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 干净/脏叉子（钱德拉/米斯拉解决方案）
- en: Actor Model (other Message passing models)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 演员模型（其他消息传递模型）
- en: Super Arbitrators (Complicated pipelines)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超级仲裁者（复杂的管道）

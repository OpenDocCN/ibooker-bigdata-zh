- en: 'Synchronization, Part 4: The Critical Section Problem'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步，第4部分：关键部分问题
- en: Candidate Solutions
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 候选解决方案
- en: What is the Critical Section Problem?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是关键部分问题？
- en: 'As already discussed in [Synchronization, Part 3: Working with Mutexes And
    Semaphores](/angrave/SystemProgramming/wiki/Synchronization%2C-Part-3%3A-Working-with-Mutexes-And-Semaphores),
    there are critical parts of our code that can only be executed by one thread at
    a time. We describe this requirement as ''mutual exclusion''; only one thread
    (or process) may have access to the shared resource.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '如已在[Synchronization, Part 3: Working with Mutexes And Semaphores](/angrave/SystemProgramming/wiki/Synchronization%2C-Part-3%3A-Working-with-Mutexes-And-Semaphores)中讨论的，我们的代码中有一些关键部分只能由一个线程同时执行。我们将这种要求描述为“互斥排他”；只有一个线程（或进程）可以访问共享资源。'
- en: 'In multi-threaded programs we can wrap a critical section with mutex lock and
    unlock calls:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在多线程程序中，我们可以使用互斥锁和解锁调用来包装关键部分：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How would we implement these lock and unlock calls? Can we create an algorithm
    that assures mutual exclusion? An incorrect implementation is shown below,
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何实现这些锁定和解锁调用？我们能创建一个保证互斥的算法吗？下面显示了一个不正确的实现，
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: At first glance, the code appears to work; if one thread attempts to locks the
    mutex, a later thread must wait until the lock is cleared. However this implementation
    *does not satisfy Mutual Exclusion*. Let's take a close look at this 'implementation'
    from the point of view of two threads running around the same time. In the table
    below times runs from top to bottom-
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，代码似乎是有效的；如果一个线程尝试锁定互斥量，稍后的线程必须等到锁被释放。然而，这种实现*不能满足互斥*。让我们从两个大致同时运行的线程的角度仔细观察这个“实现”。在下表中，时间从上到下依次进行-
- en: '| Time | Thread 1 | Thread 2 |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 时间 | 线程1 | 线程2 |'
- en: '| --- | --- | --- |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 1 | `while(lock) {}` |  |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 1 | `while(lock) {}` |  |'
- en: '| 2 |  | `while(lock) {}` |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 2 |  | `while(lock) {}` |'
- en: '| 3 | lock = 1 | lock = 1 |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 3 | lock = 1 | lock = 1 |'
- en: Ooops! There is a race condition. In the unfortunate case both threads checked
    the lock and read a false value and so were able to continue.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！存在竞争条件。不幸的是，两个线程都检查了锁并读取了一个错误的值，因此能够继续执行。
- en: Candidate solutions to the critical section problem.
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键部分问题的候选解决方案。
- en: To simplify the discussion we consider only two threads. Note these arguments
    work for threads and processes and the classic CS literature discusses these problem
    in terms of two processes that need exclusive access (i.e. mutual exclusion) to
    a critical section or shared resource.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化讨论，我们只考虑两个线程。请注意，这些论点适用于线程和进程，经典的CS文献讨论了这些问题，涉及到需要对关键部分或共享资源进行独占访问（即互斥）的两个进程。
- en: Raising a flag represents a thread/process's intention to enter the critical
    section.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 提高标志表示线程/进程进入关键部分的意图。
- en: Remember that the psuedo-code outlined below is part of a larger program; the
    thread or process will typically need to enter the critical section many times
    during the lifetime of the process. So imagine each example as wrapped inside
    a loop where for a random amount of time the thread or process is working on something
    else.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，下面概述的伪代码是较大程序的一部分；线程或进程通常需要在进程的生命周期中多次进入关键部分。因此，想象每个示例都包裹在一个循环中，在循环中线程或进程在其他事务上工作了一段随机时间。
- en: Is there anything wrong with candidate solution described below?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下面描述的候选解决方案有什么问题吗？
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Answer: Candidate solution #1 also suffers a race condition i.e. it does not
    satisfy Mutual Exclusion because both threads/processes could read each other''s
    flag value (=lowered) and continue.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 答案：候选解决方案＃1也存在竞争条件，即它不能满足互斥排他，因为两个线程/进程都可以读取对方的标志值（=降低）并继续。
- en: 'This suggests we should raise the flag *before* checking the other thread''s
    flag - which is candidate solution #2 below.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明我们应该在检查其他线程的标志之前*提高*标志 - 这是下面的候选解决方案＃2。
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Candidate #2 satisfies mutual exclusion - it is impossible for two threads
    to be inside the critical section at the same time. However this code suffers
    from deadlock! Suppose two threads wish to enter the critical section at the same
    time:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 候选方案＃2满足互斥 - 不可能同时有两个线程在关键部分内。然而，这段代码存在死锁问题！假设两个线程希望同时进入关键部分：
- en: '| Time | Thread 1 | Thread 2 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 时间 | 线程1 | 线程2 |'
- en: '| --- | --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 1 | raise flag |  |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 提高标志 |  |'
- en: '| 2 |  | raise flag |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 2 |  | 提高标志 |'
- en: '| 3 | wait ... | wait ... |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 等待... | 等待... |'
- en: Ooops both threads / processes are now waiting for the other one to lower their
    flags. Neither one will enter the critical section as both are now stuck forever!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，现在两个线程/进程都在等待对方降低他们的标志。现在两者都将永远无法进入关键部分！
- en: This suggests we should use a turn-based variable to try to resolve who should
    proceed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明我们应该使用轮流变量来尝试解决谁应该继续的问题。
- en: Turn-based solutions
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轮流解决方案
- en: 'The following candidate solution #3 uses a turn-based variable to politely
    allow one thread and then the other to continue'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下候选解决方案＃3使用轮流变量礼貌地允许一个线程，然后另一个线程继续
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Candidate #3 satisfies mutual exclusion (each thread or process gets exclusive
    access to the Critical Section), however both threads/processes must take a strict
    turn-based approach to using the critical section; i.e. they are forced into an
    alternating critical section access pattern. For example, if thread 1 wishes to
    read a hashtable every millisecond but another thread writes to a hashtable every
    second, then the reading thread would have to wait another 999ms before being
    able to read from the hashtable again. This ''solution'' is not effective, because
    our threads should be able to make progress and enter the critical section if
    no other thread is currently in the critical section.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 候选方案＃3满足互斥（每个线程或进程都可以独占访问关键部分），但是两个线程/进程必须采取严格的轮流方式来使用关键部分；即它们被迫进入交替的关键部分访问模式。例如，如果线程1希望每毫秒读取一个哈希表，但另一个线程每秒写入一个哈希表，那么读取线程必须再等待999毫秒才能再次从哈希表中读取。这种“解决方案”是不有效的，因为我们的线程应该能够取得进展并在没有其他线程当前在关键部分时进入关键部分。
- en: Desired properties for solutions to the Critical Section Problem?
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对关键部分问题的解决方案的期望属性？
- en: There are three main desirable properties that we desire in a solution the critical
    section problem
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决关键部分问题中，我们希望的有三个主要的理想属性
- en: Mutual Exclusion - the thread/process gets exclusive access; others must wait
    until it exits the critical section.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互斥 - 线程/进程获得独占访问权；其他线程/进程必须等待，直到它退出关键部分。
- en: Bounded Wait - if the thread/process has to wait, then it should only have to
    wait for a finite, amount of time (infinite waiting times are not allowed!). The
    exact definition of bounded wait is that there is an upper (non-infinite) bound
    on the number of times any other process can enter its critical section before
    the given process enters.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有界等待 - 如果线程/进程必须等待，那么它只能等待有限的时间（不允许无限等待时间！）。有界等待的确切定义是，在给定进程进入之前，任何其他进程可以进入其关键部分的次数有一个上限（非无限）。
- en: Progress - if no thread/process is inside the critical section, then the thread/process
    should be able to proceed (make progress) without having to wait.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进度 - 如果没有线程/进程在关键部分内，那么线程/进程应该能够继续进行（取得进展）而无需等待。
- en: With these ideas in mind let's examine another candidate solution that uses
    a turn-based flag only if two threads both required access at the same time.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑这些想法的基础上，让我们检查另一个候选解决方案，只有在两个线程同时需要访问时才使用基于轮换的标志。
- en: Turn and Flag solutions
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轮换和标志解决方案
- en: Is the following a correct solution to CSP?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是CSP的正确解决方案吗？
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'One instructor and another CS faculty member initially thought so! However,
    analyzing these solutions is tricky. Even peer-reviewed papers on this specific
    subject contain incorrect solutions! At first glance it appears to satisfy Mutual
    Exclusion, Bounded Wait and Progress: The turn-based flag is only used in the
    event of a tie (so Progress and Bounded Wait is allowed) and mutual exclusion
    appears to be satisfied. However.... Perhaps you can find a counter-example?'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一位教师和另一位CS教师最初也是这样认为的！然而，分析这些解决方案是棘手的。甚至关于这个特定主题的同行评审论文中也包含不正确的解决方案！乍一看，它似乎满足互斥、有界等待和进度：基于轮换的标志仅在出现平局时使用（因此允许进度和有界等待），并且似乎满足互斥。然而....也许你可以找到一个反例？
- en: 'Candidate #4 fails because a thread does not wait until the other thread lowers
    their flag. After some thought (or inspiration) the following scenario can be
    created to demonstrate how Mutual Exclusion is not satisfied.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 候选#4失败，因为一个线程不会等到另一个线程降低他们的标志。经过一番思考（或灵感），可以创建以下场景来演示互斥不满足。
- en: Imagine the first thread runs this code twice (so the the turn flag now points
    to the second thread). While the first thread is still inside the Critical Section,
    the second thread arrives. The second thread can immediately continue into the
    Critical Section!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 想象第一个线程运行这段代码两次（所以轮换标志现在指向第二个线程）。当第一个线程仍然在关键部分内时，第二个线程到达。第二个线程可以立即继续进入关键部分！
- en: '| Time | Turn | Thread #1 | Thread #2 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 时间 | 轮换 | 线程#1 | 线程#2 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 1 | 2 | raise my flag |  |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 2 | 提升我的标志 |  |'
- en: '| 2 | 2 | if your flag is raised, wait until my turn | raise my flag |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 2 | 如果你的标志被提升，等到轮到我了 | 提升我的标志 |'
- en: '| 3 | 2 | // Do Critical Section stuff | if your flag is raised, wait until
    my turn(TRUE!) |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 2 | // 执行关键部分操作 | 如果你的标志被提升，等到轮到我了（真的！） |'
- en: '| 4 | 2 | // Do Critical Section stuff | // Do Critical Section stuff - OOPS
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 2 | // 执行关键部分操作 | // 执行关键部分操作 - 糟糕 |'
- en: Working Solutions
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有效的解决方案
- en: What is Peterson's solution?
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Peterson的解决方案是什么？
- en: 'Peterson published his novel and surprisingly simple solution in a 2 page paper
    in 1981\. A version of his algorithm is shown below that uses a shared variable
    `turn`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Peterson在1981年的一篇两页论文中发表了他的小说和令人惊讶的简单解决方案。下面显示了他算法的一个版本，使用了共享变量`turn`：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This solution satisfies Mutual Exclusion, Bounded Wait and Progress. If thread
    #2 has set turn to 2 and is currently inside the critical section. Thread #1 arrives,
    *sets the turn back to 1* and now waits until thread 2 lowers the flag.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该解决方案满足互斥、有界等待和进度。如果线程#2将轮换设置为2并且当前在关键部分内。线程#1到达，*将轮换设置回1*，现在等待直到线程2降低标志。
- en: 'Link to Peterson''s original article pdf: [G. L. Peterson: "Myths About the
    Mutual Exclusion Problem", Information Processing Letters 12(3) 1981, 115–116](http://dl.acm.org/citation.cfm?id=945527)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 'Peterson原始文章pdf的链接：[G. L. Peterson: "关于互斥问题的神话"，信息处理通讯 12(3) 1981, 115–116](http://dl.acm.org/citation.cfm?id=945527)'
- en: Was Peterson's solution the first solution?
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Peterson的解决方案是第一个解决方案吗？
- en: No, Dekkers Algorithm (1962) was the first provably correct solution. A version
    of the algorithm is below.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 不，Dekkers算法（1962年）是第一个可以证明正确的解决方案。以下是该算法的一个版本。
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice how the process's flag is always raised during the critical section no
    matter if the loop is iterated zero, once or more times. Further the flag can
    be interpreted as an immediate intent to enter the critical section. Only if the
    other process has also raised the flag will one process defer, lower their intent
    flag and wait.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，无论循环迭代零次、一次还是多次，进程的标志在关键部分始终被提升。此外，该标志可以被解释为立即意图进入关键部分。只有在另一个进程也提升了标志时，一个进程才会推迟，降低他们的意图标志并等待。
- en: Can I just implement Peterson's (or Dekkers) algorithm in C or assembler?
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以只在C或汇编中实现Peterson的（或Dekkers）算法吗？
- en: 'Yes - and with a bit searching it is possible even today to find it in production
    for specific simple mobile processors: Peterson''s algorithm is used to implement
    low-level Linux Kernel locks for the Tegra mobile processor (a system-on-chip
    ARM process and GPU core by Nvidia) [https://android.googlesource.com/kernel/tegra.git/+/android-tegra-3.10/arch/arm/mach-tegra/sleep.S#58](https://android.googlesource.com/kernel/tegra.git/+/android-tegra-3.10/arch/arm/mach-tegra/sleep.S#58)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 是的 - 通过一点搜索，甚至今天也可以在特定简单的移动处理器上找到它的生产应用：Peterson的算法用于实现Tegra移动处理器的低级Linux内核锁（由Nvidia的系统级芯片ARM处理器和GPU核心）[https://android.googlesource.com/kernel/tegra.git/+/android-tegra-3.10/arch/arm/mach-tegra/sleep.S#58](https://android.googlesource.com/kernel/tegra.git/+/android-tegra-3.10/arch/arm/mach-tegra/sleep.S#58)
- en: However in general, CPUs and C compilers can re-order CPU instructions or use
    CPU-core-specific local cache values that are stale if another core updates the
    shared variables. Thus a simple pseudo-code to C implementation is too naive for
    most platforms. You can stop reading now.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一般来说，CPU和C编译器可以重新排序CPU指令或使用CPU核心特定的本地缓存值，如果另一个核心更新共享变量，则这些值可能是过时的。因此，对于大多数平台来说，简单的伪代码到C的实现太天真了。你现在可以停止阅读了。
- en: Oh... you decided to keep reading. Well, here be dragons! Don't say we didn't
    warn you. Consider this advanced and gnarly topic but (spoiler alert) a happy
    ending.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 哦... 你决定继续阅读。好吧，这里有龙！别说我们没警告过你。考虑这是一个高级和棘手的话题，但（剧透）有一个美好的结局。
- en: Consider the following code,
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码，
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: An efficient compiler would infer that `flag2` variable is never changed inside
    the loop, so that test can be optimized to `while(true)` Using `volatile` goes
    someway to prevent compiler optimizations of this kind.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一个高效的编译器会推断`flag2`变量在循环内部永远不会改变，因此测试可以优化为`while(true)`。使用`volatile`可以在一定程度上防止这种类型的编译器优化。
- en: Independent instructions can be re-ordered by an optimizing compiler or at runtime
    by an out-of-order execution optimization by the CPU. These sophisticated optimizations
    if the code requires variables to be modified and checked and a precise order.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 独立指令可以被优化编译器重新排序，或者在运行时由CPU的乱序执行优化重新排序。如果代码需要变量被修改和检查以及精确的顺序，这些复杂的优化。
- en: A related challenge is that CPU cores include a data cache to store recently
    read or modified main memory values. Modified values may not be written back to
    main memory or re-read from memory immediately. Thus data changes, such as the
    state of a flag and turn variable in the above examples, may not be shared between
    two CPU codes.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一个相关的挑战是CPU核心包括数据缓存，用于存储最近读取或修改的主内存值。修改后的值可能不会立即写回主内存或重新从内存中读取。因此，数据更改，例如上面示例中的标志和转换变量的状态，可能不会在两个CPU核心之间共享。
- en: But there is happy ending. Fortunately, modern hardware addresses these issues
    using 'memory fences' (also known as memory barrier) CPU instructions to ensure
    that main memory and the CPUs' cache is in a reasonable and coherent state. Higher
    level synchronization primitives, such as `pthread_mutex_lock` are will call these
    CPU instructions as part of their implementation. Thus, in practice, surrounding
    critical section with a mutex lock and unlock calls is sufficient to ignore these
    lower-level problems.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 但是有一个美好的结局。幸运的是，现代硬件使用“内存栅栏”（也称为内存屏障）CPU指令来解决这些问题，以确保主内存和CPU缓存处于合理和一致的状态。更高级别的同步原语，如`pthread_mutex_lock`，将调用这些CPU指令作为其实现的一部分。因此，在实践中，使用互斥锁的临界区周围的锁定和解锁调用足以忽略这些低级问题。
- en: 'Further reading: we suggest the following web post that discusses implementing
    Peterson''s algorithm on an x86 process and the linux documentation on memory
    barriers.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步阅读：我们建议阅读以下网帖，讨论在x86进程上实现Peterson算法以及关于内存屏障的Linux文档。
- en: '[http://bartoszmilewski.com/2008/11/05/who-ordered-memory-fences-on-an-x86/](http://bartoszmilewski.com/2008/11/05/who-ordered-memory-fences-on-an-x86/)
    [http://lxr.free-electrons.com/source/Documentation/memory-barriers.txt](http://lxr.free-electrons.com/source/Documentation/memory-barriers.txt)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://bartoszmilewski.com/2008/11/05/who-ordered-memory-fences-on-an-x86/](http://bartoszmilewski.com/2008/11/05/who-ordered-memory-fences-on-an-x86/)
    [http://lxr.free-electrons.com/source/Documentation/memory-barriers.txt](http://lxr.free-electrons.com/source/Documentation/memory-barriers.txt)'
- en: Hardware Solutions
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件解决方案
- en: How do we implement Critical Section Problem on hardware?
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何在硬件上实现临界区问题？
- en: We can use C11 Atomics to do that perfectly! A complete solution is detailed
    here (this is a spinlock mutex, [futex](https://locklessinc.com/articles/mutex_cv_futex/)
    implementations can be found online).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用C11原子操作来完美地做到这一点！完整的解决方案在这里详细说明（这是一个自旋锁互斥体，[futex](https://locklessinc.com/articles/mutex_cv_futex/)的实现可以在网上找到）。
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is the initialization code, nothing fancy here. We set the state of the
    mutex to unlocked and set the owner to locked.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这是初始化代码，这里没有什么花哨的。我们将互斥体的状态设置为未锁定，并将所有者设置为已锁定。
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Yikes! What does this code do? Well to start it it initializes a variable that
    we will keep as the unlocked state. [Atomic Compare and Exchange](https://en.wikipedia.org/wiki/Compare-and-swap)
    is an instruction supported by most modern architectures (on x86 it's `lock cmpxchg`).
    The pseudocode for this operation looks like this
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 天啊！这段代码是做什么的？首先，它初始化一个变量，我们将保持为未锁定状态。[原子比较和交换](https://en.wikipedia.org/wiki/Compare-and-swap)是大多数现代架构支持的指令（在x86上是`lock
    cmpxchg`）。这个操作的伪代码看起来像这样
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Except it is all done *atomically* meaning in one uninterruptible operation.
    What does the *weak* part mean? Well atomic instructions are also prone to **spurious
    failures** meaning that there are two versions to these atomic functions a *strong*
    and a *weak* part, strong guarantee the the success or failure while weak may
    fail. We are using weak because weak is faster and we are in a loop! That means
    we are okay if it fails a little bit more often because we will just keep spinning
    around anyway.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 除了它是*原子*完成的，意味着在一个不可中断的操作中完成。*弱*部分是什么意思？原子指令也容易出现**虚假失败**，这意味着这些原子函数有两个版本，一个*强*和一个*弱*，强保证成功或失败，而弱可能失败。我们使用弱部分是因为弱部分更快，而且我们在一个循环中！这意味着如果它失败得更频繁，我们也没关系，因为我们会继续旋转。
- en: What is this memory order business? We were talking about memory fences earlier,
    here it is! We won't go into detail because it is outside the scope of this course
    but not the scope of [this article](https://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个内存顺序是什么？我们之前讨论过内存栅栏，这就是它！我们不会详细讨论，因为这超出了本课程的范围，但不超出[本文](https://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync)的范围。
- en: Inside the while loop, we have failed to grab the lock! We reset zero to unlocked
    and sleep for a little while. When we wake up we try to grab the lock again. Once
    we successfully swap, we are in the critical section! We set the mutex's owner
    to the current thread for the unlock method and return successful.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在while循环内，我们未能获取到锁！我们将零重置为unlocked并睡一会儿。当我们醒来时，我们再次尝试获取锁。一旦成功交换，我们就进入了临界区！我们为解锁方法设置了互斥体的所有者，并返回成功。
- en: How does this guarantee mutual exclusion, when working with atomics we are not
    entirely sure! But in this simple example we can because the thread that is able
    to successfully expect the lock to be UNLOCKED (0) and swap it to a LOCKED (1)
    state is considered the winner. How do we implement unlock?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用原子操作时，这如何保证互斥性，我们并不完全确定！但在这个简单的例子中，我们可以，因为能够成功期望锁处于UNLOCKED（0）状态并将其交换到LOCKED（1）状态的线程被认为是赢家。我们如何实现解锁？
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To satisfy the api, you can't unlock the mutex unless you are the one who owns
    it. Then we unassign the mutex owner, because critical section is over after the
    atomic. We want a strong exchange because we don't want to block (pthread_mutex_unlock
    doesn't block). We expect the mutex to be locked, and we swap it to unlock. If
    the swap was successful, we unlocked the mutex. If the swap wasn't, that means
    that the mutex was UNLOCKED and we tried to switch it from UNLOCKED to UNLOCKED,
    preserving the non blocking of unlock.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了满足API，除非你是拥有它的人，否则你不能解锁互斥体。然后我们取消互斥体所有者，因为在原子操作之后临界区已经结束。我们希望进行强交换，因为我们不想阻塞（pthread_mutex_unlock不会阻塞）。我们期望互斥体被锁住，然后将其交换到解锁状态。如果交换成功，我们就解锁了互斥体。如果交换失败，这意味着互斥体是UNLOCKED，我们试图将其从UNLOCKED切换到UNLOCKED，保持解锁的非阻塞。

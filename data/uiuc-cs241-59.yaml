- en: 'Networking, Part 5: Shutting down ports, reusing ports and other tricks'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络，第5部分：关闭端口，重用端口和其他技巧
- en: What is the difference shutdown and close?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关闭和关闭之间有什么区别？
- en: Use the `shutdown` call when you no longer need to read any more data from the
    socket, write more data, or have finished doing both. When you shutdown a socket
    for further writing (or reading) that information is also sent to the other end
    of the connection. For example if you shutdown the socket for further writing
    at the server end, then a moment later,a blocked `read` call could return 0 to
    indicate that no more bytes are expected.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当您不再需要从套接字读取更多数据，写入更多数据或完成两者时，请使用`shutdown`调用。当您关闭套接字以进行进一步写入（或读取）时，该信息也会发送到连接的另一端。例如，如果您在服务器端关闭套接字以进行进一步写入，那么稍后，阻塞的`read`调用可能返回0，表示不再需要更多字节。
- en: Use `close` when your process no longer needs the socket file descriptor.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的进程不再需要套接字文件描述符时，请使用`close`。
- en: If you `fork`-ed after creating a socket file descriptor, all processes need
    to close the socket before the socket resources can be re-used. If you shutdown
    a socket for further read then all process are be affected because you've changed
    the socket, not just the file descriptor.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在创建套接字文件描述符后进行了`fork`，则所有进程都需要在套接字资源可以重新使用之前关闭套接字。如果您关闭套接字以进行进一步读取，那么所有进程都会受到影响，因为您已更改了套接字，而不仅仅是文件描述符。
- en: Well written code will `shutdown` a socket before calling `close` it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 良好编写的代码将在调用`close`之前`shutdown`套接字。
- en: When I re-run my server code it doesn't work! Why?
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当我重新运行我的服务器代码时，它不起作用！为什么？
- en: By default, after a socket is closed the port enters a time-out state during
    which time it cannot be re-used ('bound to a new socket').
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，套接字关闭后，端口进入超时状态，在此期间不能重新使用（“绑定到新套接字”）。
- en: 'This behavior can be disabled by setting the socket option REUSEPORT before
    bind-ing to a port:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在绑定到端口之前设置套接字选项REUSEPORT可以禁用此行为：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Can a TCP client bind to a particular port?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TCP客户端可以绑定到特定端口吗？
- en: Yes! In fact outgoing TCP connections are automatically bound to an unused port
    on the client. Usually it's unnecessary to explicitly set the port on the client
    because the system will intelligently find an unusued port on a reasonable interface
    (e.g. the wireless card, if currently connected by WiFi connection). However it
    can be useful if you needed to specifically choose a particular ethernet card,
    or if a firewall only allows outgoing connections from a particular range of port
    values.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！实际上，出站TCP连接会自动绑定到客户端上未使用的端口。通常情况下，不需要在客户端上显式设置端口，因为系统会智能地在合理的接口上找到一个未使用的端口（例如，如果当前通过WiFi连接，则是无线网卡）。但是，如果您需要明确选择特定的以太网卡，或者防火墙仅允许从特定范围的端口值进行出站连接，则可能会有用。
- en: To explicitly bind to an ethernet interface and port, call `bind` before `connect`
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要显式绑定到以太网接口和端口，请在`connect`之前调用`bind`
- en: Who connected to my server?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谁连接到我的服务器？
- en: The `accept` system call can optionally provide information about the remote
    client, by passing in a sockaddr struct. Different protocols have differently
    variants of the `struct sockaddr`, which are different sizes. The simplest struct
    to use is the `sockaddr_storage` which is sufficiently large to represent all
    possible types of sockaddr. Notice that C does not have any model of inheritance.
    Therefore we need to explicitly cast our struct to the 'base type' struct sockaddr.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`accept`系统调用可以选择性地通过传递sockaddr结构提供有关远程客户端的信息。不同的协议具有不同的`struct sockaddr`变体，它们的大小也不同。使用最简单的结构是`sockaddr_storage`，它足够大以表示所有可能类型的sockaddr。请注意，C没有任何继承模型。因此，我们需要将我们的结构明确转换为“基本类型”结构sockaddr。'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We've already seen `getaddrinfo` that can build a linked list of addrinfo entries
    (and each one of these can include socket configuration data). What if we wanted
    to turn socket data into IP and port addresses? Enter `getnameinfo` that can be
    used to convert a local or remote socket information into a domain name or numeric
    IP. Similarly the port number can be represented as a service name (e.g. "http"
    for port 80). In the example below we request numeric versions for the client
    IP address and client port number.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到`getaddrinfo`可以构建addrinfo条目的链表（每个条目都可以包含套接字配置数据）。如果我们想要将套接字数据转换为IP和端口地址怎么办？输入`getnameinfo`，它可以用于将本地或远程套接字信息转换为域名或数字IP。类似地，端口号可以表示为服务名称（例如端口80的“http”）。在下面的示例中，我们请求客户端IP地址和客户端端口号的数字版本。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Todo: Discuss NI_MAXHOST and NI_MAXSERV, and NI_NUMERICHOST'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 待办事项：讨论NI_MAXHOST和NI_MAXSERV，以及NI_NUMERICHOST
- en: 'getnameinfo Example: What''s my IP address?'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: getnameinfo示例：我的IP地址是多少？
- en: To obtain a linked list of IP addresses of the current machine use `getifaddrs`
    which will return a linked list of IPv4 and IPv6 IP addresses (and potentially
    other interfaces too). We can examine each entry and use `getnameinfo` to print
    the host's IP address. The ifaddrs struct includes the family but does not include
    the sizeof the struct. Therefore we need to manually determine the struct sized
    based on the family (IPv4 v IPv6)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取当前计算机的IP地址的IP地址链表，请使用`getifaddrs`，它将返回IPv4和IPv6 IP地址的链接列表（可能还包括其他接口）。我们可以检查每个条目并使用`getnameinfo`打印主机的IP地址。ifaddrs结构包括家族，但不包括结构的大小。因此，我们需要根据家族（IPv4
    v IPv6）手动确定结构的大小。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The complete code is shown below.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码如下所示。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: What's my machine's IP address (shell version)
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我的机器的IP地址是多少（shell版本）
- en: 'Answer: use `ifconfig` (or Windows''s ipconfig) However this command generates
    a lot of output for each interface, so we can filter the output using grep'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 答案：使用`ifconfig`（或Windows的ipconfig）。但是这个命令为每个接口生成大量输出，因此我们可以使用grep过滤输出。
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'

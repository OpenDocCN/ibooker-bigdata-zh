- en: 'Signals, Part 2: Pending Signals and Signal Masks'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号，第2部分：未决信号和信号掩码
- en: Signals In Depth
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信号深入解析
- en: How can I learn more about signals?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何了解更多关于信号的信息？
- en: 'The linux man pages discusses signal system calls in section 2\. There is also
    a longer article in section 7 (though not in OSX/BSD):'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Linux手册中讨论了第2节中的信号系统调用。第7节中还有一篇较长的文章（尽管在OSX/BSD中没有）：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Signal Terminology
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信号术语
- en: Generated - The signal is being created in the kernel by the kill system call.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成-信号是由kill系统调用在内核中创建的。
- en: Pending - Not delivered yet but soon to be delivered
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未决-尚未传递，但即将传递
- en: Blocked - Not delivered because no signal disposition lets the signal be delivered
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已屏蔽-因为没有信号处理方式允许信号被传递，所以尚未传递
- en: Delivered - Delivered to the process, the action described is being taken
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已传递-传递到进程，正在执行描述的操作
- en: Caught - When the process stops a signal from destroying it and does something
    else with it instead
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获-当进程阻止信号摧毁它并做其他事情时
- en: What is a process's signal disposition?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进程的信号处理方式是什么？
- en: For each process, each signal has a disposition which means what action will
    occur when a signal is delivered to the process. For example, the default disposition
    SIGINT is to terminate it. The signal disposition can be changed by calling signal()
    (which is simple but not portable as there are subtle variations in its implementation
    on different POSIX architectures and also not recommended for multi-threaded programs)
    or `sigaction` (discussed later). You can imagine the processes' disposition to
    all possible signals as a table of function pointers entries (one for each possible
    signal).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个进程，每个信号都有一个处理方式，这意味着当信号传递到进程时将发生什么操作。例如，默认的SIGINT处理方式是终止它。信号处理方式可以通过调用signal()（这很简单，但在不同的POSIX架构上实现上有微妙的变化，也不建议用于多线程程序）或`sigaction`（稍后讨论）来更改。您可以将进程对所有可能信号的处理方式想象成一个函数指针条目表（每个可能信号一个）。
- en: The default disposition for signals can be to ignore the signal, stop the process,
    continue a stopped process, terminate the process, or terminate the process and
    also dump a 'core' file. Note a core file is a representation of the processes'
    memory state that can be inspected using a debugger.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 信号的默认处理方式可以是忽略信号、停止进程、继续已停止的进程、终止进程，或者终止进程并转储一个“核心”文件。请注意，核心文件是进程内存状态的表示，可以使用调试器进行检查。
- en: Can multiple signals be queued?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可以排队多个信号吗？
- en: No - however it is possible to have signals that are in a pending state. If
    a signal is pending, it means it has not yet been delivered to the process. The
    most common reason for a signal to be pending is that the process (or thread)
    has currently blocked that particular signal.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 不是-但是可能有信号处于未决状态。如果信号处于未决状态，这意味着它尚未传递到进程。信号处于未决状态的最常见原因是进程（或线程）当前已阻止了该特定信号。
- en: If a particular signal, e.g. SIGINT, is pending then it is not possible to queue
    up the same signal again.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果特定信号，例如SIGINT，处于未决状态，则不可能再次排队相同的信号。
- en: It *is* possible to have more than one signal of a different type in a pending
    state. For example SIGINT and SIGTERM signals may be pending (i.e. not yet delivered
    to the target process)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*是*可能有多个不同类型的信号处于未决状态。例如，SIGINT和SIGTERM信号可能是未决的（即尚未传递到目标进程）'
- en: How do I block signals?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何屏蔽信号？
- en: Signals can be blocked (meaning they will stay in the pending state) by setting
    the process signal mask or, when you are writing a multi-threaded program, the
    thread signal mask.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 信号可以通过设置进程信号掩码或者在编写多线程程序时设置线程信号掩码来屏蔽（意味着它们将保持在未决状态）。
- en: Disposition in Threads/Children
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线程/子进程中的处理方式
- en: What happens when creating a new thread?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新线程时会发生什么？
- en: The new thread inherits a copy of the calling thread's mask
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 新线程继承了调用线程的掩码的副本
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What happens when forking?
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分叉时会发生什么？
- en: The child process inherits a copy of the parent's signal dispositions. In other
    words, if you have installed a SIGINT handler before forking, then the child process
    will also call the handler if a SIGINT is delivered to the child.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 子进程继承了父进程的信号处理方式。换句话说，如果在分叉之前安装了SIGINT处理程序，那么子进程在传递SIGINT时也会调用处理程序。
- en: Note pending signals for the child are *not* inherited during forking.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，分叉期间子进程的未决信号*不*会被继承。
- en: What happens during exec ?
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行期间会发生什么？
- en: Both the signal mask and the signal disposition carries over to the exec-ed
    program. [https://www.gnu.org/software/libc/manual/html_node/Executing-a-File.html#Executing-a-File](Source)
    Pending signals are preserved as well. Signal handlers are reset, because the
    original handler code has disappeared along with the old process.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 信号掩码和信号处理方式都会传递到exec-ed程序。[https://www.gnu.org/software/libc/manual/html_node/Executing-a-File.html#Executing-a-File](来源)
    未决信号也会被保留。信号处理程序会被重置，因为原始处理程序代码随着旧进程一起消失了。
- en: What happens during fork ?
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分叉期间会发生什么？
- en: The child process inherits a copy of the parent process's signal disposition
    and a copy of the parent's signal mask.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 子进程继承了父进程的信号处理方式和父进程的信号掩码的副本。
- en: For example if `SIGINT` is blocked in the parent it will be blocked in the child
    too. For example if the parent installed a handler (call-back function) for SIG-INT
    then the child will also perform the same behavior.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果在父进程中阻塞了`SIGINT`，那么在子进程中也会被阻塞。例如，如果父进程为SIG-INT安装了处理程序（回调函数），那么子进程也会执行相同的行为。
- en: Pending signals however are not inherited by the child.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但是未决信号不会被子进程继承。
- en: How do I block signals in a single-threaded program?
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在单线程程序中屏蔽信号？
- en: Use `sigprocmask`! With sigprocmask you can set the new mask, add new signals
    to be blocked to the process mask, and unblock currently blocked signals. You
    can also determine the existing mask (and use it for later) by passing in a non-null
    value for oldset.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`sigprocmask`！使用sigprocmask，您可以设置新的掩码，向进程掩码添加新的要屏蔽的信号，并解除当前被屏蔽的信号。您还可以通过传递非空值来确定现有掩码（并在以后使用）。
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: From the Linux man page of sigprocmask,
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 来自sigprocmask的Linux手册页，
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The sigset type behaves as a bitmap, except functions are used rather than explicitly
    setting and unsetting bits using & and |.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: sigset类型的行为类似于位图，只是使用函数而不是使用&和|来显式设置和取消位。
- en: It is a common error to forget to initialize the signal set before modifying
    one bit. For example,
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在修改一个位之前忘记初始化信号集是一个常见的错误。例如，
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Correct code initializes the set to be all on or all off. For example,
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的代码将集合初始化为全部打开或全部关闭。例如，
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How do I block signals in a multi-threaded program?
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在多线程程序中阻止信号？
- en: 'Blocking signals is similar in multi-threaded programs to single-threaded programs:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在多线程程序中阻止信号与单线程程序类似：
- en: Use pthread_sigmask instead of sigprocmask
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用pthread_sigmask而不是sigprocmask
- en: Block a signal in all threads to prevent its asynchronous delivery
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阻止所有线程中的信号，以防止其异步传递
- en: The easiest method to ensure a signal is blocked in all threads is to set the
    signal mask in the main thread before new threads are created
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 确保信号在所有线程中被阻止的最简单方法是在创建新线程之前在主线程中设置信号掩码
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Just as we saw with sigprocmask, pthread_sigmask includes a ''how'' parameter
    that defines how the signal set is to be used:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在sigprocmask中看到的那样，pthread_sigmask包括一个“how”参数，用于定义如何使用信号集：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How are pending signals delivered in a multi-threaded program?
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在多线程程序中如何传递待处理的信号？
- en: A signal is delivered to any signal thread that is not blocking that signal.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 信号被传递到任何未阻止该信号的信号线程。
- en: If the two or more threads can receive the signal then which thread will be
    interrupted is arbitrary!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个或更多线程可以接收信号，那么哪个线程将被中断是任意的！

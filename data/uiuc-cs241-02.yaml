- en: HW0
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HW0
- en: Welcome!
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 欢迎！
- en: If you are taking CS241 you can submit this homework at this [Google Form](https://docs.google.com/a/illinois.edu/forms/d/e/1FAIpQLScB-OomiGPRm8Q5u3rhDypIuGaOTYFzNqzNTtjs5g7-_1XBTw/viewform).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在上CS241课程，你可以在这个[Google表格](https://docs.google.com/a/illinois.edu/forms/d/e/1FAIpQLScB-OomiGPRm8Q5u3rhDypIuGaOTYFzNqzNTtjs5g7-_1XBTw/viewform)上提交作业。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: So you want to master System Programming? And get a better grade than B?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 所以你想精通系统编程？并且比B更好地得到一个好成绩？
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Watch the videos and write up your answers to the following questions.
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 观看视频并写下你对以下问题的答案。
- en: '[http://cs-education.github.io/sys/](http://cs-education.github.io/sys/)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://cs-education.github.io/sys/](http://cs-education.github.io/sys/)'
- en: There is also the course wikibook -
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 还有课程wikibook -
- en: '[https://github.com/angrave/SystemProgramming/wiki](https://github.com/angrave/SystemProgramming/wiki)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/angrave/SystemProgramming/wiki](https://github.com/angrave/SystemProgramming/wiki)'
- en: Questions? Comments? Use Piazza, [https://piazza.com/illinois/spring2017/cs241/home](https://piazza.com/illinois/spring2017/cs241/home)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有问题？评论？使用Piazza，[https://piazza.com/illinois/spring2017/cs241/home](https://piazza.com/illinois/spring2017/cs241/home)
- en: The in-browser virtual machine runs entirely in Javascript and is fastest in
    Chrome. Note the VM and any code you write is reset when you reload the page *So
    copy your code to a separate document.* The post-video challenges (e.g. Haiku
    poem) are not part of homework 0\.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器中的虚拟机完全在Javascript中运行，最快的是在Chrome中。请注意，当重新加载页面时，虚拟机和你写的任何代码都会被重置，所以把你的代码复制到一个单独的文档中。视频后的挑战（如俳句诗）不是作业0的一部分。
- en: Chapter 1
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一章
- en: Hello World (System call style)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hello World（系统调用风格）
- en: Write a program that uses `write()` to print out "Hi! My name is ".
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个程序，使用`write()`打印出“Hi! My name is”。
- en: Hello Standard Error Stream
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准错误流
- en: Write a program that uses `write()` to print out a triangle of height `n` to
    Standard Error
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个程序，使用`write()`将高度为n的三角形打印到标准错误
- en: n should be a variable and the triangle should look like this for n = 3
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: n应该是一个变量，三角形应该看起来像这样，n=3
- en: '[PRE2]'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Writing to files
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写入文件
- en: Take your program from "Hello World" and have it write to a file
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的程序从“Hello World”改成写入文件
- en: Make sure to to use some interesting flags and mode for `open()`
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保对`open()`使用一些有趣的标志和模式
- en: '`man 2 open` is your friend'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`man 2 open`是你的朋友'
- en: Not everything is a system call
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并不是所有的都是系统调用
- en: Take your program from "Writing to files" and replace it with `printf()` (Make
    sure to print to the file!)
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的程序从“写入文件”改成使用`printf()`（确保打印到文件！）
- en: Name some differences from `write()` and `printf()`
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列举一些`write()`和`printf()`的不同之处
- en: Chapter 2
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第二章
- en: Not all bytes are 8 bits?
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并不是所有的字节都是8位？
- en: How many bits are there in a byte?
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字节有多少位？
- en: How many bytes is a `char`?
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`char`有多少个字节？'
- en: 'Tell me how many bytes the following are on your machine: `int, double, float,
    long, long long`'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 告诉我你的机器上以下这些的字节数：`int, double, float, long, long long`
- en: Follow the int pointer
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟随int指针
- en: 'On a machine with 8 byte integers:'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个有8字节整数的机器上：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If the address of data is `0x7fbd9d40`, then what is the address of `data+2`?
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果数据的地址是`0x7fbd9d40`，那么`data+2`的地址是多少？
- en: What is `data[3]` equivalent to in C?
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在C中，`data[3]`等同于什么？
- en: '`sizeof` character arrays, incrementing pointers'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sizeof`字符数组，增加指针'
- en: Remember the type of a string constant `"abc"` is an array.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住字符串常量`"abc"`的类型是数组。
- en: Why does this segfault?
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么会出现段错误？
- en: '[PRE4]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: What does `sizeof("Hello\0World")` return?
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sizeof("Hello\0World")`返回什么？'
- en: What does `strlen("Hello\0World")` return?
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strlen("Hello\0World")`返回什么？'
- en: Give an example of X such that `sizeof(X)` is 3
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给出一个例子X，使得`sizeof(X)`为3
- en: Give an example of Y such that `sizeof(Y)` might be 4 or 8 depending on the
    machine.
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给出一个例子Y，使得`sizeof(Y)`可能是4或8，取决于机器。
- en: Chapter 3
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第三章
- en: Program arguments `argc` `argv`
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序参数`argc` `argv`
- en: Name me two ways to find the length of `argv`
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 告诉我两种找到`argv`长度的方法
- en: What is `argv[0]`
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argv[0]`是什么'
- en: Environment Variables
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境变量
- en: Where are the pointers to environment variables stored?
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境变量的指针存储在哪里？
- en: String searching (Strings are just char arrays)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串搜索（字符串只是字符数组）
- en: 'On a machine where pointers are 8 bytes and with the following code:'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个指针为8字节的机器上，并且有以下代码：
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What is the results of `sizeof(ptr)` and `sizeof(array)`? Explain why.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`sizeof(ptr)`和`sizeof(array)`的结果是什么？为什么？'
- en: Lifetime of automatic variables
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动变量的生命周期
- en: What datastucture is managing the lifetime of automatic variables?
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪种数据结构管理自动变量的生命周期？
- en: Chapter 4
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第四章
- en: Memory allocation using `malloc`, heap and time
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`malloc`、堆和时间进行内存分配
- en: If I want to use data after the lifetime of the function it was created in,
    then where should I put it and how do I put it there?
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我想在函数结束后使用数据，那么我应该把它放在哪里，怎么放？
- en: 'Fill in the blank. In a good C program: "For every malloc there is a ___".'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填空。在一个好的C程序中：“对于每一个malloc，都有一个___”。
- en: Heap allocation Gotchas
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆分配陷阱
- en: Name one reason `malloc` can fail.
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`malloc`失败的一个原因是什么。'
- en: Name some differences between `time()` and `ctime()`
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列举一些`time()`和`ctime()`之间的区别
- en: What is wrong with this code snippet?
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这段代码有什么问题？
- en: '[PRE6]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What is wrong with this code snippet?
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这段代码有什么问题？
- en: '[PRE7]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How can one avoid the previous 2 mistakes?
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何避免前两个错误？
- en: struct, typedefs and a linked list
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构体、typedef和链表
- en: Create a struct that represents a Person and typedef, so that "struct Person"
    can be replaced with a single word.
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个表示人的结构体并进行typedef，这样“struct Person”可以用一个单词替换。
- en: 'A person should contain the following information: name, age, friends (pointer
    to an array of pointers to People).'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个人应该包含以下信息：姓名，年龄，朋友（指向People指针数组的指针）。
- en: Now make two persons "Agent Smith" and "Sonny Moore" on the heap who are 128
    and 256 years old respectively and are friends with each other.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在在堆上创建两个人“Agent Smith”和“Sonny Moore”，分别为128岁和256岁，并且彼此是朋友。
- en: Duplicating strings, memory allocation and deallocation of structures
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制字符串，内存分配和结构的释放
- en: Create functions to create and destroy a Person (Person's and their names should
    live on the heap).
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建函数来创建和销毁一个人（人和他们的名字应该存在于堆上）。
- en: '`create()` should take a name and make a copy of the name and also an age.
    Use malloc to reserve sufficient memory. Be sure initialize all fields (why?).'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create()`应该接受一个名称并复制该名称，还应该接受一个年龄。使用malloc来保留足够的内存。确保初始化所有字段（为什么？）。'
- en: '`destroy()` should free up not only the memory of the person struct but also
    free all its attributes that are stored on the heap (the array if it exists and
    the string). Destroying one person however should not destroy any others.'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`destroy()`应该释放人员结构体的内存，还应该释放存储在堆上的所有属性的内存（如果存在数组和字符串）。然而，销毁一个人员不应该销毁其他人员。'
- en: Chapter 5
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第5章
- en: Reading characters, Trouble with gets
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读字符，gets出现问题
- en: What functions can be used for getting characters for `stdin` and writing them
    to `stdout`?
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以用于从`stdin`获取字符并将其写入`stdout`的函数有哪些？
- en: Name one issue with `gets()`
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gets()`存在一个问题'
- en: Introducing `sscanf` and friends
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍`sscanf`和朋友们
- en: Write code that parses a the string "Hello 5 World" and initializes 3 variables
    to ("Hello", 5, "World") respectively.
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写代码，解析字符串“Hello 5 World”，并分别将3个变量初始化为（“Hello”，5，“World”）。
- en: '`getline` is useful'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getline`很有用'
- en: What does one need to define before using `getline()`?
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用`getline()`之前需要定义什么？
- en: Write a C program to print out the content of a file line by line using `getline()`
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个C程序，使用`getline()`逐行打印文件内容
- en: C Development (A web search is useful here)
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C开发（在这里进行网页搜索很有用）
- en: What compiler flag is used to generate a debug build?
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于生成调试构建的编译器标志是什么？
- en: You modify the makefile to generate debug builds and type `make` again. Explain
    why this is insufficient to generate a new build.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您修改makefile以生成调试构建，并再次输入`make`。解释为什么这不足以生成新的构建。
- en: Are tabs or spaces used in Makefiles?
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Makefiles中使用制表符还是空格？
- en: What are the differences between heap and stack memory?
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆和栈内存之间有什么区别？
- en: Are there other kinds of memory in a process?
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程中还有其他种类的内存吗？
- en: Optional (Just for fun)
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可选（只是为了好玩）
- en: Convert your a song lyrics into System Programming and C code covered in this
    wiki book and share on Piazza.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的一首歌歌词转换为本维基书中涵盖的系统编程和C代码，并在Piazza上分享
- en: Find, in your opinion the best and worst C code on the web and post the link
    to Piazza
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找到您认为是网络上最好和最差的C代码，并将链接发布到Piazza
- en: Write a short C program with a deliberate subtle C bug and post it on Piazza
    to see if others can spot your bug
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个有意识的微妙C错误的简短C程序，并在Piazza上发布，看看其他人是否能发现您的错误

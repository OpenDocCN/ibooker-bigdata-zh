- en: 14 CAESAR CIPHER
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 14 凯撒密码
- en: 原文：[https://inventwithpython.com/invent4thed/chapter14.html](https://inventwithpython.com/invent4thed/chapter14.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://inventwithpython.com/invent4thed/chapter14.html](https://inventwithpython.com/invent4thed/chapter14.html)
- en: '[Prev: Chapter 13 - Sonar Treasure Hunt](chapter13.html) | [Next: Chapter 15
    - The Reversegam Game](chapter15.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一章：第13章 - 声纳寻宝游戏](chapter13.html) | [下一章：第15章 - 反转游戏](chapter15.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
- en: The program in this chapter isn’t really a game, but it is fun nevertheless.
    The program will convert normal English into a secret code. It can also convert
    secret codes back into regular English. Only someone who knows the key to the
    secret codes will be able to understand the messages.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的程序并不是一个真正的游戏，但它仍然很有趣。该程序将把普通英语转换成秘密代码。它还可以将秘密代码转换回普通英语。只有知道秘密代码的人才能理解这些消息。
- en: Because this program manipulates text to convert it into secret messages, you’ll
    learn several new functions and methods for manipulating strings. You’ll also
    learn how programs can do math with text strings just as they can with numbers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个程序操纵文本将其转换为秘密消息，你将学习几个新的用于操纵字符串的函数和方法。你还将学习程序如何能够像处理数字一样处理文本字符串。
- en: '**TOPICS COVERED IN THIS CHAPTER**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**本章涉及的主题**'
- en: • Cryptography and ciphers
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: • 密码学和密码
- en: • Ciphertext, plaintext, keys, and symbols
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: • 密文、明文、密钥和符号
- en: • Encrypting and decrypting
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • 加密和解密
- en: • The Caesar cipher
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: • 凯撒密码
- en: • The `find()` string method
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • `find()`字符串方法
- en: • Cryptanalysis
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: • 密码分析
- en: • The brute-force technique
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: • 穷举法技术
- en: '**Cryptography and Encryption**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**密码学和加密**'
- en: The science of writing secret codes is called *cryptography*. For thousands
    of years, cryptography has made it possible to send secret messages that only
    the sender and recipient could read, even if someone captured the messenger and
    read the coded message. A secret code system is called a *cipher*. The cipher
    used by the program in this chapter is called the *Caesar cipher*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 编写秘密代码的科学称为*密码学*。几千年来，密码学使得发送只有发件人和收件人能够阅读的秘密消息成为可能，即使有人捕获信使并阅读了编码消息。秘密代码系统称为*密码*。本章程序使用的密码称为*凯撒密码*。
- en: 'In cryptography, we call the message that we want to keep secret the *plaintext*.
    Let’s say we have a plaintext message that looks like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在密码学中，我们称要保密的消息为*明文*。假设我们有一条看起来像这样的明文消息：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Converting the plaintext into the encoded message is called *encrypting* the
    plaintext. The plaintext is encrypted into the *ciphertext*. The ciphertext looks
    like random letters, so we can’t understand what the original plaintext was just
    by looking at the ciphertext. Here is the previous example encrypted into ciphertext:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 将明文转换为编码消息称为*加密*明文。明文被加密成*密文*。密文看起来像随机字母，所以我们不能通过查看密文来理解原始明文是什么。以下是前面的示例加密成密文：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you know the cipher used to encrypt the message, you can *decrypt* the ciphertext
    back to the plaintext. (Decryption is the opposite of encryption.)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你知道用于加密消息的密码，你可以将*密文*解密回明文。（解密是加密的反向操作。）
- en: Many ciphers use *keys*, which are secret values that let you decrypt ciphertext
    that was encrypted with a specific cipher. Think of the cipher as being like a
    door lock. You can only unlock it with a particular key.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 许多密码使用*密钥*，这些密钥是让你解密使用特定密码加密的密文的秘密值。可以将密码看作是门锁。只有用特定的钥匙才能打开它。
- en: If you’re interested in writing cryptography programs, you can read my book
    *Hacking Secret Ciphers with Python*. It’s free to download from *[http://inventwithpython.com/hacking/](https://inventwithpython.com/hacking/)*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对编写密码学程序感兴趣，可以阅读我的书*使用Python黑客秘密密码*。可以从*[http://inventwithpython.com/hacking/](https://inventwithpython.com/hacking/)*免费下载。
- en: '**How the Caesar Cipher Works**'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**凯撒密码的工作原理**'
- en: The Caesar cipher was one of the earliest ciphers ever invented. In this cipher,
    you encrypt a message by replacing each letter in it with a “shifted” letter.
    In cryptography, the encrypted letters are called *symbols* because they can be
    letters, numbers, or any other signs. If you shift the letter A by one space,
    you get the letter B. If you shift the letter A by two spaces, you get the letter
    C. [Figure 14-1](#calibre_link-42) shows some letters shifted by three spaces.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 凯撒密码是有史以来最早的密码之一。在这种密码中，你通过用“移位”字母替换消息中的每个字母来加密消息。在密码学中，加密的字母称为*符号*，因为它们可以是字母、数字或任何其他符号。如果你将字母A向后移动一个空格，你会得到字母B。如果你将字母A向后移动两个空格，你会得到字母C。[图14-1](#calibre_link-42)显示了一些字母向后移动三个空格的示例。
- en: '![image](../Images/7ee09993362ebc9bda67632dcd8a45a2.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/7ee09993362ebc9bda67632dcd8a45a2.png)'
- en: '*Figure 14-1: A Caesar cipher shifting letters by three spaces. Here, B becomes
    E.*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14-1：凯撒密码将字母向后移动三个空格。这里，B变成了E。*'
- en: To get each shifted letter, draw a row of boxes with each letter of the alphabet.
    Then draw a second row of boxes under it, but start your letters a certain number
    of spaces over. When you get to the end of the plaintext alphabet, wrap back around
    to A. [Figure 14-2](#calibre_link-43) shows an example with the letters shifted
    by three spaces.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得每个移位后的字母，可以画一排方框，每个方框内写上字母表中的每个字母。然后在下面再画一排方框，但是从某个特定的空格开始写字母。当你到达明文字母表的末尾时，回到A。[图14-2](#calibre_link-43)显示了一个字母向后移动三个空格的示例。
- en: '![image](../Images/85954891d97cca3756d1607fdd5ad23b.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/85954891d97cca3756d1607fdd5ad23b.png)'
- en: '*Figure 14-2: The entire alphabet shifted by three spaces*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14-2：整个字母表向后移动三个空格*'
- en: The number of spaces you shift your letters (between 1 and 26) is the key in
    the Caesar cipher. Unless you know the key (the number used to encrypt the message),
    you won’t be able to decrypt the secret code. The example in [Figure 14-2](#calibre_link-43)
    shows the letter translations for the key 3.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 凯撒密码中，你将字母移动的空格数（在1到26之间）就是密钥。除非你知道密钥（用于加密消息的数字），否则你将无法解密秘密代码。[图14-2](#calibre_link-43)中的示例显示了密钥3的字母转换。
- en: '**NOTE**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*While there are 26 possible keys, encrypting your message with 26 will result
    in a ciphertext that is exactly the same as the plaintext!*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*虽然有26个可能的密钥，但使用26加密消息将导致密文与明文完全相同！*'
- en: 'If you encrypt the plaintext word HOWDY with a key of 3, then:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用密钥3加密明文单词HOWDY，则：
- en: • The letter H becomes K.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: • 字母H变成K。
- en: • The letter O becomes R.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: • 字母O变成R。
- en: • The letter W becomes Z.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: • 字母W变成Z。
- en: • The letter D becomes G.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: • 字母D变成G。
- en: • The letter Y becomes B.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: • 字母Y变成B。
- en: So, the ciphertext of HOWDY with the key 3 becomes KRZGB. To decrypt KRZGB with
    the key 3, we go from the bottom boxes back to the top.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用密钥3的HOWDY的密文变为KRZGB。要使用密钥3解密KRZGB，我们从底部的框返回到顶部。
- en: If you would like to include lowercase letters as distinct from uppercase letters,
    then add another 26 boxes to the ones you already have and fill them with the
    26 lowercase letters. Now with a key of 3, the letter Y becomes b, as shown in
    [Figure 14-3](#calibre_link-44).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想将小写字母与大写字母区分开，那么请将另外26个框添加到已有的框中，并用26个小写字母填充它们。现在使用密钥3，字母Y变成b，如[图14-3](#calibre_link-44)所示。
- en: '![image](../Images/02150d1a7f201a576e002dd1bd03dfb0.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/02150d1a7f201a576e002dd1bd03dfb0.png)'
- en: '*Figure 14-3: The entire alphabet, now including lowercase letters, shifted
    by three spaces*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14-3：整个字母表，现在包括小写字母，向后移动三个空格*'
- en: The cipher works the same way as it did with just uppercase letters. In fact,
    if you want to use letters from another language’s alphabet, you can write boxes
    with those letters to create your cipher.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 密码的工作方式与仅使用大写字母时相同。实际上，如果您想要使用另一种语言字母表的字母，您可以写下这些字母的框，以创建您的密码。
- en: '**Sample Run of Caesar Cipher**'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**凯撒密码的示例运行**'
- en: 'Here is a sample run of the Caesar Cipher program encrypting a message:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是凯撒密码程序加密消息的示例运行：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now run the program and decrypt the text that you just encrypted:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行程序并解密刚刚加密的文本：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you do not decrypt with the correct key, the text will not decrypt properly:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有使用正确的密钥解密，文本将无法正确解密：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Source Code for Caesar Cipher**'
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**凯撒密码的源代码**'
- en: Enter this source code for the Caesar Cipher program and then save the file
    as *cipher.py*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 输入此凯撒密码程序的源代码，然后将文件保存为*cipher.py*。
- en: If you get errors after entering this code, compare the code you typed to the
    book’s code with the online diff tool at *[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在输入此代码后出现错误，请使用在线差异工具将您输入的代码与本书代码进行比较，网址为*[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*。
- en: '![image](../Images/b4e69b1df0320a5805abf50d4a776e32.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/b4e69b1df0320a5805abf50d4a776e32.png)'
- en: '*cipher.py*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*cipher.py*'
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Setting the Maximum Key Length**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**设置最大密钥长度**'
- en: 'The encryption and decryption processes are the reverse of each other, but
    they share much of the same code. Let’s look at how each line works:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 加密和解密过程是彼此的相反，但它们共享大部分相同的代码。让我们看看每行是如何工作的：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`MAX_KEY_SIZE` is a constant that stores the length of `SYMBOLS` (`52`). This
    constant reminds us that in this program, the key used in the cipher should always
    be between 1 and 52.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`MAX_KEY_SIZE`是一个常量，存储`SYMBOLS`的长度（`52`）。这个常量提醒我们，在这个程序中，密码中使用的密钥应该始终在1和52之间。'
- en: '**Deciding to Encrypt or Decrypt the Message**'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**决定加密或解密消息**'
- en: 'The `getMode()` function lets the user decide whether they want to use the
    program’s encryption or decryption mode:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`getMode()`函数让用户决定他们想要使用程序的加密或解密模式：'
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Line 8 calls `input()` to let the user enter the mode they want. The `lower()`
    method is then called on this string to return a lowercase version of the string.
    The value returned from `input().lower()` is stored in `mode`. The `if` statement’s
    condition checks whether the string stored in `mode` exists in the `['encrypt',
    'e', 'decrypt', 'd']` list.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第8行调用`input()`让用户输入他们想要的模式。然后在这个字符串上调用`lower()`方法，以返回字符串的小写版本。从`input().lower()`返回的值存储在`mode`中。`if`语句的条件检查存储在`mode`中的字符串是否存在于`['encrypt',
    'e', 'decrypt', 'd']`列表中。
- en: This function will return the string in `mode` as long as `mode` is equal to
    `'encrypt'`, `'e'`, `'decrypt'`, or `'d'`. Therefore, `getMode()` will return
    the string `mode`. If the user types something that is not `'encrypt'`, `'e'`,
    `'decrypt'`, or `'d'`, then the `while` loop will ask them again.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 只要`mode`等于`'encrypt'`、`'e'`、`'decrypt'`或`'d'`，此函数将返回`mode`中的字符串。因此，`getMode()`将返回字符串`mode`。如果用户输入的内容不是`'encrypt'`、`'e'`、`'decrypt'`或`'d'`，则`while`循环将再次询问他们。
- en: '**Getting the Message from the Player**'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**从玩家获取消息**'
- en: 'The `getMessage()` function simply gets the message to encrypt or decrypt from
    the user and returns it:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`getMessage()`函数只是从用户那里获取要加密或解密的消息并返回它：'
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The call for `input()` is combined with `return` so that we use only one line
    instead of two.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`input()`的调用与`return`结合在一起，这样我们只使用一行而不是两行。'
- en: '**Getting the Key from the Player**'
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**从玩家获取密钥**'
- en: 'The `getKey()` function lets the player enter the key they will use to encrypt
    or decrypt the message:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`getKey()`函数让玩家输入他们将用于加密或解密消息的密钥：'
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `while` loop ensures that the function keeps looping until the user enters
    a valid key. A valid key here is one between the integer values `1` and `52` (remember
    that `MAX_KEY_SIZE` is `52` because there are 52 characters in the `SYMBOLS` variable).
    The `getKey()` function then returns this key. Line 22 sets `key` to the integer
    version of what the user entered, so `getKey()` returns an integer.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环确保函数保持循环，直到用户输入有效的密钥。这里的有效密钥是介于整数值`1`和`52`之间的值（记住`MAX_KEY_SIZE`是`52`，因为`SYMBOLS`变量中有52个字符）。`getKey()`函数然后返回这个密钥。第22行将`key`设置为用户输入的整数版本，因此`getKey()`返回一个整数。'
- en: '**Encrypting or Decrypting the Message**'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**加密或解密消息**'
- en: 'The `getTranslatedMessage()` function does the actual encrypting and decrypting:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`getTranslatedMessage()`函数执行实际的加密和解密：'
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It has three parameters:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 它有三个参数：
- en: '`mode` This sets the function to encryption mode or decryption mode.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`mode`这将设置函数为加密模式或解密模式。'
- en: '`message` This is the plaintext (or ciphertext) to be encrypted (or decrypted).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`message`这是要加密（或解密）的明文（或密文）。'
- en: '`key` This is the key that is used in this cipher.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`key`这是在这个密码中使用的密钥。'
- en: Line 27 checks whether the first letter in the `mode` variable is the string
    `'d'`. If so, then the program is in decryption mode. The only difference between
    decryption and encryption mode is that in decryption mode, the key is set to the
    negative version of itself. For example, if `key` is the integer `22`, then decryption
    mode sets it to `-22`. The reason is explained in “[Encrypting or Decrypting Each
    Letter](#calibre_link-45)” on [page 205](#calibre_link-46).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 第27行检查`mode`变量中的第一个字母是否为字符串`'d'`。如果是，则程序处于解密模式。解密和加密模式之间唯一的区别是，在解密模式中，密钥设置为其负版本。例如，如果`key`是整数`22`，那么解密模式将其设置为`-22`。原因在“[加密或解密每个字母](#calibre_link-45)”中的[第205页](#calibre_link-46)中有解释。
- en: 'The `translated` variable will contain the string of the result: either the
    ciphertext (if you are encrypting) or the plaintext (if you are decrypting). It
    starts as a blank string and has encrypted or decrypted characters concatenated
    to the end of it. Before we can start concatenating the characters to `translated`,
    however, we need to encrypt or decrypt the text, which we’ll do in the rest of
    `getTranslatedMessage()`.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`translated`变量将包含结果的字符串：密文（如果您正在加密）或明文（如果您正在解密）。它起初为空字符串，并且已加密或解密的字符连接到其末尾。但是，在我们开始将字符连接到`translated`之前，我们需要加密或解密文本，我们将在`getTranslatedMessage()`的其余部分中进行。'
- en: '***Finding Passed Strings with the find() String Method***'
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用find()字符串方法查找传递的字符串***'
- en: 'In order to shift the letters around to do the encryption or decryption, we
    first need to convert them into numbers. The number for each letter in the `SYMBOLS`
    string will be the index where it appears. Since the letter A is at `SYMBOLS[0]`,
    the number `0` will represent the capital A. If we wanted to encrypt this with
    the key 3, we would simply use 0 + 3 to get the index of the encrypted letter:
    `SYMBOLS[3]` or `''D''`.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将字母移动以进行加密或解密，我们首先需要将它们转换为数字。`SYMBOLS`字符串中每个字母的数字将是它出现的索引。由于字母A在`SYMBOLS[0]`处，数字`0`将表示大写字母A。如果我们想要使用密钥3对其进行加密，我们只需使用0
    + 3来获取加密字母的索引：`SYMBOLS[3]`或`'D'`。
- en: 'We’ll use the `find()` string method, which finds the first occurrence of a
    passed string in the string on which the method is called. Enter the following
    in the interactive shell:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`find()`字符串方法，该方法在调用该方法的字符串中查找传递的字符串的第一次出现。在交互式shell中输入以下内容：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`''Hello world!''.find(''H'')` returns `0` because the `''H''` is found at
    the first index of the string `''Hello world!''`. Remember, indexes start at `0`,
    not `1`. The code `''Hello world!''.find(''o'')` returns `4` because the lowercase
    `''o''` is first found at the end of `''Hello''`. The `find()` method stops looking
    after the first occurrence, so the second `''o''` in `''world''` doesn’t matter.
    You can also find strings with more than one character. The string `''ell''` is
    found starting at index `1`.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`''Hello world!''.find(''H'')`返回`0`，因为在字符串`''Hello world!''`的第一个索引处找到了`''H''`。请记住，索引从`0`开始，而不是`1`。代码`''Hello
    world!''.find(''o'')`返回`4`，因为小写的`''o''`首次出现在`''Hello''`的末尾。`find()`方法在第一次出现后停止查找，所以`''world''`中的第二个`''o''`不重要。您还可以查找多于一个字符的字符串。字符串`''ell''`从索引`1`开始找到。'
- en: 'If the passed string cannot be found, the `find()` method returns `-1`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到传递的字符串，则`find()`方法返回`-1`：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let’s go back to the Caesar Cipher program. Line 31 is a `for` loop that iterates
    on each character in the `message` string:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到凯撒密码程序。第31行是一个`for`循环，它对`message`字符串中的每个字符进行迭代：
- en: '[PRE13]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `find()` method is used on line 32 to get the index of the string in `symbol`.
    If `find()` returns `-1`, the character in `symbol` will just be added to `translated`
    without any change. This means that any characters that aren’t part of the alphabet,
    such as commas and periods, won’t be changed.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`find()`方法用于第32行获取`symbol`中字符串的索引。如果`find()`返回`-1`，则`symbol`中的字符将被添加到`translated`中而不会发生任何更改。这意味着任何不属于字母表的字符，例如逗号和句号，都不会被更改。'
- en: '***Encrypting or Decrypting Each Letter***'
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***加密或解密每个字母***'
- en: Once you’ve found a letter’s index number, adding the key to the number will
    perform the shift and give you the index for the encrypted letter.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到了字母的索引号，将密钥添加到数字中将执行移位并为您提供加密字母的索引。
- en: Line 38 does this addition to get the encrypted (or decrypted) letter.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 第38行执行此加法以获得加密（或解密）字母。
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Remember that on line 28, we made the integer in `key` negative for decryption.
    The code that adds the key will now subtract it, since adding a negative number
    is the same as subtraction.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在第28行，我们将`key`中的整数变为负数以进行解密。现在添加密钥的代码将对其进行减法，因为添加负数与减法相同。
- en: 'However, if this addition (or subtraction, if `key` is negative) causes `symbolIndex`
    to go past the last index of `SYMBOLS`, we’ll need to wrap around to the beginning
    of the list at `0`. This is handled by the `if` statement starting at line 40:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果此加法（或减法，如果`key`为负数）导致`symbolIndex`超过`SYMBOLS`的最后一个索引，我们需要将其环绕到列表的开头`0`。这由从第40行开始的`if`语句处理：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Line 40 checks whether `symbolIndex` has gone past the last index by comparing
    it to the length of the `SYMBOLS` string. If it has, line 41 subtracts the length
    of `SYMBOLS` from `symbolIndex`. If `symbolIndex` is now negative, then the index
    needs to wrap around to the other side of the `SYMBOLS` string. Line 42 checks
    whether the value of `symbolIndex` is negative after adding the decryption key.
    If so, line 43 adds the length of `SYMBOLS` to `symbolIndex`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 第40行检查`symbolIndex`是否已经超过了`SYMBOLS`字符串的最后一个索引，方法是将其与`SYMBOLS`字符串的长度进行比较。如果是，第41行将`SYMBOLS`的长度从`symbolIndex`中减去。如果`symbolIndex`现在是负数，则索引需要环绕到`SYMBOLS`字符串的另一侧。第42行检查在添加解密密钥后`symbolIndex`的值是否为负数。如果是，第43行将`SYMBOLS`的长度添加到`symbolIndex`中。
- en: The `symbolIndex` variable now contains the index of the correctly encrypted
    or decrypted symbol. `SYMBOLS[symbolIndex]` will point to the character for this
    index, and this character is added to the end of `translated` on line 45.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`symbolIndex`变量现在包含了正确加密或解密符号的索引。`SYMBOLS[symbolIndex]`将指向这个索引的字符，并且这个字符将被添加到第45行的`translated`的末尾。'
- en: 'The execution loops back to line 31 to repeat this for the next character in
    `message`. Once the loop is done, the function returns the encrypted (or decrypted)
    string in `translated` on line 46:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 执行回到第31行，重复这个过程，直到`message`中的下一个字符。一旦循环结束，函数将在第46行返回加密（或解密）字符串`translated`：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The last line in the `getTranslatedMessage()` function returns the `translated`
    string.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`getTranslatedMessage()`函数中的最后一行返回`translated`字符串。'
- en: '**Starting the Program**'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**开始程序**'
- en: 'The start of the program calls each of the three functions defined previously
    to get the `mode`, `message`, and `key` from the user:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的开始调用了之前定义的三个函数，以从用户那里获取`mode`、`message`和`key`：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: These three values are passed to `getTranslatedMessage()`, whose return value
    (the `translated` string) is printed to the user.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个值被传递给`getTranslatedMessage()`，其返回值（`translated`字符串）被打印给用户。
- en: '**EXPANDING THE SYMBOLS**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**扩展符号**'
- en: 'If you want to encrypt numbers, spaces, and punctuation marks, just add them
    to the `SYMBOLS` string on line 2\. For example, you could have your cipher program
    encrypt numbers, spaces, and punctuation marks by changing line 2 to the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想加密数字、空格和标点符号，只需将它们添加到第2行的`SYMBOLS`字符串中。例如，你可以通过将第2行更改为以下内容，让你的密码程序加密数字、空格和标点符号：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note that the `SYMBOLS` string has a space character after the lowercase `z`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`SYMBOLS`字符串在小写字母`z`后面有一个空格字符。
- en: If you wanted, you could add even more characters to this list. And you don’t
    need to change the rest of your program, since all the lines of code that need
    the character list just use the `SYMBOLS` constant.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，你可以在这个列表中添加更多的字符。而且你不需要改变你的程序的其余部分，因为所有需要字符列表的代码行都只使用`SYMBOLS`常量。
- en: Just make sure that each character appears only once in the string. Also, you’ll
    need to decrypt your message with the same `SYMBOLS` string that it was encrypted
    with.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 只需确保每个字符在字符串中只出现一次。此外，您需要使用与加密时相同的`SYMBOLS`字符串来解密您的消息。
- en: '**The Brute-Force Technique**'
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**暴力破解技术**'
- en: That’s the entire Caesar cipher. However, while this cipher may fool some people
    who don’t understand cryptography, it won’t keep a message secret from someone
    who knows *cryptanalysis*. While cryptography is the science of making codes,
    cryptanalysis is the science of breaking codes.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是整个凯撒密码。然而，虽然这种密码可能会愚弄一些不懂密码学的人，但对于了解*密码分析*的人来说，它不会保密消息。虽然密码学是制作密码的科学，但密码分析是破译密码的科学。
- en: 'The whole point of cryptography is to make sure that if someone else gets their
    hands on the encrypted message, they cannot figure out the original text. Let’s
    pretend we are the code breaker and all we have is this encrypted text:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 密码学的整个目的是确保如果其他人拿到了加密消息，他们无法弄清原始文本。假设我们是密码破译者，我们手上只有这个加密文本：
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*Brute-forcing* is the technique of trying every possible key until you find
    the correct one. Because there are only 52 possible keys, it would be easy for
    a cryptanalyst to write a hacking program that decrypts with every possible key.
    Then they could look for the key that decrypts to plain English. Let’s add a brute-force
    feature to the program.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*暴力破解*是一种尝试每个可能的密钥直到找到正确密钥的技术。因为只有52个可能的密钥，所以对于密码分析家来说，编写一个解密每个可能密钥的黑客程序将是很容易的。然后他们可以寻找解密为普通英语的密钥。让我们给程序添加一个暴力破解的功能。'
- en: '**Adding the Brute-Force Mode**'
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加暴力破解模式**'
- en: 'First, change lines 7, 9, and 12—which are in the `getMode()` function—to look
    like the following (the changes are in bold):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，更改第7、9和12行，这些行在`getMode()`函数中，看起来像下面这样（修改部分用粗体标出）：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This code will let the user select brute force as a mode.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将允许用户选择暴力破解作为一种模式。
- en: 'Next, make the following changes to the main part of the program:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，对程序的主要部分进行以下更改：
- en: '[PRE21]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If the user is not in brute-force mode, they are asked for a key, the original
    `getTranslatedMessage()` call is made, and the translated string is printed.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户不处于暴力破解模式，他们会被要求输入一个密钥，然后进行原始的`getTranslatedMessage()`调用，并打印出翻译后的字符串。
- en: 'However, if the user is in brute-force mode, then the `getTranslatedMessage()`
    loop iterates from `1` all the way up to `MAX_KEY_SIZE` (which is `52`). Remember
    that the `range()` function returns a list of integers up to, but not including,
    the second parameter, which is why we add `+ 1`. The program will then print every
    possible translation of the message (including the key number used in the translation).
    Here is a sample run of this modified program:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果用户处于暴力破解模式，那么`getTranslatedMessage()`循环迭代从`1`一直到`MAX_KEY_SIZE`（即`52`）。请记住，`range()`函数返回一个整数列表，最多到第二个参数，但不包括第二个参数，这就是为什么我们要加上`+1`。然后程序将打印出消息的每种可能的翻译（包括在翻译中使用的密钥号）。以下是对这个修改后程序的示例运行：
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: After looking over each row, you can see that the eighth message isn’t nonsense
    but plain English! The cryptanalyst can deduce that the original key for this
    encrypted text must have been `8`. This brute-force method would have been difficult
    to do back in the days of Julius Caesar and the Roman Empire, but today we have
    computers that can quickly go through millions or even billions of keys in a short
    time.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看每一行后，你会发现第八条消息不是无意义的，而是普通的英语！密码分析家可以推断出这个加密文本的原始密钥必须是`8`。这种暴力破解方法在凯撒大帝和罗马帝国时代是很难做到的，但今天我们有计算机可以在短时间内快速地处理数百万甚至数十亿个密钥。
- en: '**Summary**'
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Computers are good at doing math. When we create a system to translate some
    piece of information into numbers (as we do with text and ordinals or with space
    and coordinate systems), computer programs can process these numbers quickly and
    efficiently. A large part of writing a program is figuring out how to represent
    the information you want to manipulate as values that Python can understand.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机擅长做数学。当我们创建一个系统将某些信息转换为数字（就像我们用文本和序数或空间和坐标系这样做时），计算机程序可以快速高效地处理这些数字。编写程序的一个重要部分是弄清楚如何将要操作的信息表示为Python能理解的值。
- en: While our Caesar Cipher program can encrypt messages that will keep them secret
    from people who have to figure them out with pencil and paper, the program won’t
    keep them secret from people who know how to get computers to process information.
    (Our brute-force mode proves this.)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们的凯撒密码程序可以加密消息，使它们对那些需要用铅笔和纸来解密的人保持秘密，但该程序无法对那些知道如何让计算机处理信息的人保密。（我们的穷举模式证明了这一点。）
- en: In [Chapter 15](#calibre_link-47), we’ll create Reversegam (also known as Reversi
    or Othello). The AI that plays this game is much more advanced than the AI that
    played Tic-Tac-Toe in [Chapter 10](#calibre_link-12). In fact, it’s so good that
    most of the time you won’t be able to beat it!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第15章](#calibre_link-47)中，我们将创建Reversegam（也称为Reversi或奥赛罗）。这个游戏的人工智能比[第10章](#calibre_link-12)中玩井字游戏的人工智能要先进得多。事实上，它非常优秀，以至于大部分时间你都无法打败它！
- en: '[Prev: Chapter 13 - Sonar Treasure Hunt](chapter13.html) | [Next: Chapter 15
    - The Reversegam Game](chapter15.html)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一章：第13章 - 声纳寻宝](chapter13.html) | [下一章：第15章 - 反转游戏](chapter15.html)'

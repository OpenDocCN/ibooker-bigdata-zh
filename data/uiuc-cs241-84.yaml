- en: 'Multi threaded Programming: Review Questions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多线程编程：复习问题
- en: Warning - question numbers subject to change
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 警告 - 问题编号可能会更改
- en: Q1
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1
- en: 'Is the following code thread-safe? Redesign the following code to be thread-safe.
    Hint: A mutex is unnecessary if the message memory is unique to each call.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是否线程安全？重新设计以下代码以使其线程安全。提示：如果消息内存对每次调用都是唯一的，则互斥锁是不必要的。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Q2
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题2
- en: Which one of the following does not cause a process to exit?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪一个不会导致进程退出？
- en: Returning from the pthread's starting function in the last running thread.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从最后一个运行的线程中返回pthread的起始函数。
- en: The original thread returning from main.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原始线程从主函数返回。
- en: Any thread causing a segmentation fault.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何导致分段错误的线程。
- en: Any thread calling `exit`.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何调用`exit`的线程。
- en: Calling `pthread_exit` in the main thread with other threads still running.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在仍有其他线程运行时，在主线程中调用`pthread_exit`。
- en: Q3
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题3
- en: Write a mathematical expression for the number of "W" characters that will be
    printed by the following program. Assume a,b,c,d are small positive integers.
    Your answer may use a 'min' function that returns its lowest valued argument.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为以下程序中将打印的"W"字符的数量写一个数学表达式。假设a、b、c、d都是小正整数。您的答案可以使用一个返回其最低值参数的'min'函数。
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Q4
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题4
- en: 'Complete the following code. The following code is supposed to print alternating
    `A` and `B`. It represents two threads that take turns to execute. Add condition
    variable calls to `func` so that the waiting thread does not need to continually
    check the `turn` variable. Q: Is pthread_cond_broadcast necessary or is pthread_cond_signal
    sufficient?'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下代码。以下代码应该交替打印`A`和`B`。它表示两个轮流执行的线程。添加条件变量调用到`func`，以便等待的线程不需要不断检查`turn`变量。问：`pthread_cond_broadcast`是必要的还是`pthread_cond_signal`足够？
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Q5
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题5
- en: Identify the critical sections in the given code. Add mutex locking to make
    the code thread safe. Add condition variable calls so that `total` never becomes
    negative or above 1000\. Instead the call should block until it is safe to proceed.
    Explain why `pthread_cond_broadcast` is necessary.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定的代码中标识临界区。添加互斥锁以使代码线程安全。添加条件变量调用，使`total`永远不会变成负数或超过1000。相反，调用应该阻塞，直到可以安全地继续。解释为什么`pthread_cond_broadcast`是必要的。
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Q6
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题6
- en: A non-threadsafe data structure has `size()` `enq` and `deq` methods. Use condition
    variable and mutex lock to complete the thread-safe, blocking versions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非线程安全的数据结构有`size()` `enq` 和 `deq` 方法。使用条件变量和互斥锁来完成线程安全的、阻塞版本。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Q7
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题7
- en: 'Your startup offers path planning using latest traffic information. Your overpaid
    intern has created a non-threadsafe data structure with two functions: `shortest`
    (which uses but does not modify the graph) and `set_edge` (which modifies the
    graph).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您的创业公司提供使用最新交通信息的路径规划。您过度支付的实习生创建了一个非线程安全的数据结构，其中包含两个函数：`shortest`（使用但不修改图）和`set_edge`（修改图）。
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For performance, multiple threads must be able to call `shortest` at the same
    time but the graph can only be modified by one thread when no threads other are
    executing inside `shortest` or `set_edge`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了性能，多个线程必须能够同时调用`shortest`，但是当没有其他线程在`shortest`或`set_edge`内执行时，图只能被一个线程修改。
- en: Use mutex lock and condition variables to implement a reader-writer solution.
    An incomplete attempt is shown below. Though this attempt is threadsafe (thus
    sufficient for demo day!), it does not allow multiple threads to calculate `shortest`
    path at the same time and will not have sufficient throughput.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用互斥锁和条件变量来实现读者-写者解决方案。下面显示了一个不完整的尝试。尽管这个尝试是线程安全的（因此足够用于演示日！），但它不允许多个线程同时计算`shortest`路径，并且不具有足够的吞吐量。
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'

- en: Acknowledgments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: The JavaScript adaptation of *Structure and Interpretation of Computer Programs*
    (SICP JS) was developed at the National University of Singapore (NUS) for the
    course CS1101S. The course was co-taught for six years and counting by Low Kok
    Lim, whose sound pedagogical judgment was crucial for the success of the course
    and this project. The CS1101S teaching team has included many NUS colleagues and
    more than 300 undergraduate student assistants. Their continuous feedback over
    the past nine years allowed us to resolve countless JavaScript-specific issues
    and remove unnecessary complications and yet retain the essential features of
    both SICP and JavaScript.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 《计算机程序的构造和解释》（SICP JS）的JavaScript改编是在新加坡国立大学（NUS）为CS1101S课程开发的。该课程由Low Kok Lim共同教授了六年，他的良好教学判断对课程和这个项目的成功至关重要。CS1101S教学团队包括许多NUS同事和300多名本科生助教。他们在过去九年中不断的反馈使我们解决了无数JavaScript特定的问题，消除了不必要的复杂性，同时保留了SICP和JavaScript的基本特征。
- en: SICP JS is a software project in addition to a book project. We obtained the
    ![f6-fig-5001.jpg](../images/f6-fig-5001.jpg) book sources from the original authors
    in 2008\. An early SICP JS tool chain was developed by Liu Hang and refined by
    Feng Piaopiao. Chan Ger Hean developed the first tools for the print edition,
    based on which Jolyn Tan developed the tools for the first e-book edition and
    He Xinyue and Wang Qian repurposed these tools for the current comparison edition.
    Samuel Fang designed and developed the online edition of SICP JS.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SICP JS 是一个软件项目，除了书籍项目。我们在2008年从原作者那里获得了书籍来源。早期的SICP JS 工具链是由刘航开发的，并由冯飘飘进行了改进。Chan
    Ger Hean开发了印刷版的第一批工具，基于这些工具，Jolyn Tan开发了第一版电子书的工具，何欣悦和王倩重新利用这些工具制作了当前的比较版。Samuel
    Fang设计并开发了SICP JS的在线版本。
- en: 'The online edition of SICP JS and CS1101S rely heavily on a software system
    called *Source Academy*, and the JavaScript sublanguages it supports are called
    *Source*. Many dozens of students have contributed to the Source Academy during
    the preparation of SICP JS, and the system lists them prominently as “Contributors.”
    Since 2020, the students of the NUS course CS4215, Programming Language Implementation,
    contributed several programming language implementations that are used in SICP
    JS: The concurrent version of Source used in section 3.4 was developed by Zhengqun
    Koo and Jonathan Chan; the lazy implementation used in section 4.2 was developed
    by Jellouli Ahmed, Ian Kendall Duncan, Cruz Jomari Evangelista, and Alden Tan;
    the nondeterministic implementation used in section 4.3 was developed by Arsalan
    Cheema and Anubhav; and Daryl Tan helped integrate these implementations into
    the Academy.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SICP JS和CS1101S的在线版本在很大程度上依赖于一个名为*Source Academy*的软件系统，以及它支持的JavaScript子语言称为*Source*。在准备SICP
    JS期间，许多学生为Source Academy做出了贡献，并且系统将他们 prominently 列为“贡献者”。自2020年以来，新加坡国立大学CS4215课程的学生们贡献了几种编程语言实现，这些实现被用于SICP
    JS：在第3.4节中使用的并发版本是由Zhengqun Koo和Jonathan Chan开发的；在第4.2节中使用的惰性实现是由Jellouli Ahmed，Ian
    Kendall Duncan，Cruz Jomari Evangelista和Alden Tan开发的；在第4.3节中使用的非确定性实现是由Arsalan
    Cheema和Anubhav开发的；Daryl Tan帮助将这些实现整合到了Academy中。
- en: We are grateful to STINT, The Swedish Foundation for International Cooperation
    in Research and Higher Education, whose sabbatical program connected Martin and
    Tobias and allowed Tobias to work as a co-teacher of CS1101S and join the SICP
    JS project.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感谢STINT，瑞典国际合作研究和高等教育基金会，他们的休假计划使Martin和Tobias联系在一起，并允许Tobias成为CS1101S的联合教师，并加入SICP
    JS项目。
- en: We would like to acknowledge the courageous work of the committee of ECMAScript
    2015, led by Allen Wirfs-Brock. SICP JS relies heavily on constant and let declarations
    and lambda expressions, all of which were added to JavaScript with ECMAScript
    2015\. Those additions allowed us to stay close to the original in the presentation
    of the most important ideas of SICP. Guy Lewis Steele Jr., who led the first ECMAScript
    standardization, provided detailed and useful feedback on some exercises of [chapter
    4](c004.xhtml).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要感谢ECMAScript 2015委员会的勇敢工作，由Allen Wirfs-Brock领导。SICP JS 在很大程度上依赖于ECMAScript
    2015中的常量和let声明以及lambda表达式，这些都是在JavaScript中添加的。这些增加使我们能够在SICP的最重要思想的呈现上保持与原版的接近。Guy
    Lewis Steele Jr.领导了第一个ECMAScript标准化，并对[第4章](c004.xhtml)的一些练习提供了详细和有用的反馈。
- en: —Martin Henz and Tobias Wrigstad
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: —Martin Henz和Tobias Wrigstad
- en: Acknowledgments from the Second Edition of SICP, 1996
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 《SICP》第二版的致谢，1996年
- en: We would like to thank the many people who have helped us develop this book
    and this curriculum.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要感谢许多人帮助我们开发这本书和这个课程。
- en: Our subject is a clear intellectual descendant of “6.231,” a wonderful subject
    on programming linguistics and the lambda calculus taught at MIT in the late 1960s
    by Jack Wozencraft and Arthur Evans, Jr.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主题是“6.231”的明显的知识传承，这是MIT在20世纪60年代末由Jack Wozencraft和Arthur Evans Jr.教授的关于编程语言学和lambda演算的精彩课程。
- en: We owe a great debt to Robert Fano, who reorganized MIT's introductory curriculum
    in electrical engineering and computer science to emphasize the principles of
    engineering design. He led us in starting out on this enterprise and wrote the
    first set of subject notes from which this book evolved.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对Robert Fano深表感谢，他重新组织了麻省理工学院的电气工程和计算机科学的入门课程，强调了工程设计原则。他带领我们开始了这个事业，并写下了这本书演变而来的第一套课程笔记。
- en: Much of the style and aesthetics of programming that we try to teach were developed
    in conjunction with Guy Lewis Steele Jr., who collaborated with Gerald Jay Sussman
    in the initial development of the Scheme language. In addition, David Turner,
    Peter Henderson, Dan Friedman, David Wise, and Will Clinger have taught us many
    of the techniques of the functional programming community that appear in this
    book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们试图教授的许多编程风格和美学是与Guy Lewis Steele Jr.一起发展的，他与Gerald Jay Sussman一起初步开发了Scheme语言。此外，David
    Turner，Peter Henderson，Dan Friedman，David Wise和Will Clinger教会了我们许多出现在这本书中的函数式编程社区的技术。
- en: Joel Moses taught us about structuring large systems. His experience with the
    Macsyma system for symbolic computation provided the insight that one should avoid
    complexities of control and concentrate on organizing the data to reflect the
    real structure of the world being modeled.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Joel Moses教会了我们如何构建大型系统。他在符号计算系统Macsyma方面的经验提供了一个洞察，即应该避免控制的复杂性，而是集中于组织数据以反映被建模的世界的真实结构。
- en: Marvin Minsky and Seymour Papert formed many of our attitudes about programming
    and its place in our intellectual lives. To them we owe the understanding that
    computation provides a means of expression for exploring ideas that would otherwise
    be too complex to deal with precisely. They emphasize that a student's ability
    to write and modify programs provides a powerful medium in which exploring becomes
    a natural activity.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Marvin Minsky和Seymour Papert塑造了我们对编程及其在我们的智力生活中的地位的许多态度。我们应该感谢他们，因为他们让我们明白，计算提供了一种表达的手段，可以用来探索那些否则太复杂以至无法精确处理的想法。他们强调，学生编写和修改程序的能力提供了一个强大的媒介，其中探索成为一种自然的活动。
- en: We also strongly agree with Alan Perlis that programming is lots of fun and
    we had better be careful to support the joy of programming. Part of this joy derives
    from observing great masters at work. We are fortunate to have been apprentice
    programmers at the feet of Bill Gosper and Richard Greenblatt.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也强烈同意Alan Perlis的观点，即编程非常有趣，我们最好小心支持编程的乐趣。这种乐趣的一部分来自观察伟大大师的工作。我们很幸运能够在Bill
    Gosper和Richard Greenblatt的指导下成为学徒程序员。
- en: It is difficult to identify all the people who have contributed to the development
    of our curriculum. We thank all the lecturers, recitation instructors, and tutors
    who have worked with us over the past fifteen years and put in many extra hours
    on our subject, especially Bill Siebert, Albert Meyer, Joe Stoy, Randy Davis,
    Louis Braida, Eric Grimson, Rod Brooks, Lynn Stein, and Peter Szolovits. We would
    like to specially acknowledge the outstanding teaching contributions of Franklyn
    Turbak, now at Wellesley; his work in undergraduate instruction set a standard
    that we can all aspire to. We are grateful to Jerry Saltzer and Jim Miller for
    helping us grapple with the mysteries of concurrency, and to Peter Szolovits and
    David McAllester for their contributions to the exposition of nondeterministic
    evaluation in [chapter 4](c004.xhtml).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 很难确定所有为我们课程的发展做出贡献的人。我们感谢所有在过去十五年中与我们一起工作并在我们的课程上投入了许多额外时间的讲师、辅导员和导师，特别是Bill
    Siebert，Albert Meyer，Joe Stoy，Randy Davis，Louis Braida，Eric Grimson，Rod Brooks，Lynn
    Stein和Peter Szolovits。我们特别要感谢Franklyn Turbak在韦尔斯利的杰出教学贡献；他在本科教学方面的工作树立了一个我们都可以向往的标准。我们感谢Jerry
    Saltzer和Jim Miller帮助我们解决并发性的奥秘，以及Peter Szolovits和David McAllester对[第4章](c004.xhtml)中非确定性评估的阐述所做出的贡献。
- en: Many people have put in significant effort presenting this material at other
    universities. Some of the people we have worked closely with are Jacob Katzenelson
    at the Technion, Hardy Mayer at the University of California at Irvine, Joe Stoy
    at Oxford, Elisha Sacks at Purdue, and Jan Komorowski at the Norwegian University
    of Science and Technology. We are exceptionally proud of our colleagues who have
    received major teaching awards for their adaptations of this subject at other
    universities, including Kenneth Yip at Yale, Brian Harvey at the University of
    California at Berkeley, and Dan Huttenlocher at Cornell.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人在其他大学中付出了大量的努力来呈现这些材料。我们与之密切合作的一些人包括以色列理工学院的Jacob Katzenelson，加州大学欧文分校的Hardy
    Mayer，牛津大学的Joe Stoy，普渡大学的Elisha Sacks，以及挪威科技大学的Jan Komorowski。我们为我们的同事感到异常自豪，他们在其他大学对这门课程进行了改编，并因此获得了重要的教学奖项，包括耶鲁大学的Kenneth
    Yip，加州大学伯克利分校的Brian Harvey，以及康奈尔大学的Dan Huttenlocher。
- en: Al Moyé arranged for us to teach this material to engineers at Hewlett-Packard,
    and for the production of videotapes of these lectures. We would like to thank
    the talented instructors—in particular Jim Miller, Bill Siebert, and Mike Eisenberg—who
    have designed continuing education courses incorporating these tapes and taught
    them at universities and industry all over the world.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Al Moyé安排我们向惠普工程师教授这些材料，并制作了这些讲座的录像带。我们要感谢才华横溢的教师，特别是Jim Miller，Bill Siebert和Mike
    Eisenberg，他们设计了包含这些录像带的继续教育课程，并在世界各地的大学和工业界教授了这些课程。
- en: Many educators in other countries have put in significant work translating the
    first edition. Michel Briand, Pierre Chamard, and André Pic produced a French
    edition; Susanne Daniels-Herold produced a German edition; and Fumio Motoyoshi
    produced a Japanese edition. We do not know who produced the Chinese edition,
    but we consider it an honor to have been selected as the subject of an “unauthorized”
    translation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他国家的教育工作者已经付出了大量的工作来翻译第一版。Michel Briand，Pierre Chamard和André Pic出版了法文版；Susanne
    Daniels-Herold出版了德文版；Fumio Motoyoshi出版了日文版。我们不知道谁出版了中文版，但我们认为被选为“未经授权”翻译的对象是一种荣幸。
- en: It is hard to enumerate all the people who have made technical contributions
    to the development of the Scheme systems we use for instructional purposes. In
    addition to Guy Steele, principal wizards have included Chris Hanson, Joe Bowbeer,
    Jim Miller, Guillermo Rozas, and Stephen Adams. Others who have put in significant
    time are Richard Stallman, Alan Bawden, Kent Pitman, Jon Taft, Neil Mayle, John
    Lamping, Gwyn Osnos, Tracy Larrabee, George Carrette, Soma Chaudhuri, Bill Chiarchiaro,
    Steven Kirsch, Leigh Klotz, Wayne Noss, Todd Cass, Patrick O’Donnell, Kevin Theobald,
    Daniel Weise, Kenneth Sinclair, Anthony Courtemanche, Henry M. Wu, Andrew Berlin,
    and Ruth Shyu.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 很难列举所有为我们用于教学目的的Scheme系统的技术贡献者。除了Guy Steele，主要的专家还包括Chris Hanson，Joe Bowbeer，Jim
    Miller，Guillermo Rozas和Stephen Adams。其他付出大量时间的人包括Richard Stallman，Alan Bawden，Kent
    Pitman，Jon Taft，Neil Mayle，John Lamping，Gwyn Osnos，Tracy Larrabee，George Carrette，Soma
    Chaudhuri，Bill Chiarchiaro，Steven Kirsch，Leigh Klotz，Wayne Noss，Todd Cass，Patrick
    O’Donnell，Kevin Theobald，Daniel Weise，Kenneth Sinclair，Anthony Courtemanche，Henry
    M. Wu，Andrew Berlin和Ruth Shyu。
- en: Beyond the MIT implementation, we would like to thank the many people who worked
    on the IEEE Scheme standard, including William Clinger and Jonathan Rees, who
    edited the R⁴RS, and Chris Haynes, David Bartley, Chris Hanson, and Jim Miller,
    who prepared the IEEE standard.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了麻省理工学院的实施，我们还要感谢许多人为IEEE Scheme标准工作的贡献，包括编辑R⁴RS的威廉·克林格和乔纳森·里斯，以及克里斯·海恩斯、大卫·巴特利、克里斯·汉森和吉姆·米勒，他们准备了IEEE标准。
- en: Dan Friedman has been a long-time leader of the Scheme community. The community's
    broader work goes beyond issues of language design to encompass significant educational
    innovations, such as the high-school curriculum based on EdScheme by Schemer's
    Inc., and the wonderful books by Mike Eisenberg and by Brian Harvey and Matthew
    Wright.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 丹·弗里德曼一直是Scheme社区的领导者。社区的更广泛工作不仅涉及语言设计问题，还包括基于Schemer's Inc.的EdScheme的高中课程和迈克·艾森伯格以及布莱恩·哈维和马修·赖特的精彩书籍等重大教育创新。
- en: 'We appreciate the work of those who contributed to making this a real book,
    especially Terry Ehling, Larry Cohen, and Paul Bethge at the MIT Press. Ella Mazel
    found the wonderful cover image. For the second edition we are particularly grateful
    to Bernard and Ella Mazel for help with the book design, and to David Jones, ![f6-fig-5002.jpg](../images/f6-fig-5002.jpg)
    wizard extraordinaire. We also are indebted to those readers who made penetrating
    comments on the new draft: Jacob Katzenelson, Hardy Mayer, Jim Miller, and especially
    Brian Harvey, who did unto this book as Julie did unto his book *Simply Scheme*.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感谢那些为使这本书成为现实的人的工作，特别是麻省理工学院出版社的特里·埃林、拉里·科恩和保罗·贝斯。埃拉·马泽尔找到了精美的封面图片。对于第二版，我们特别感谢伯纳德和埃拉·马泽尔在书籍设计方面的帮助，以及大卫·琼斯，这位卓越的巫师。我们还要感谢那些对新草案提出深刻评论的读者：雅各布·卡岑尔森、哈迪·迈耶、吉姆·米勒，特别是布莱恩·哈维，他对这本书的做法就像朱莉对他的书《简单方案》所做的那样。
- en: Finally, we would like to acknowledge the support of the organizations that
    have encouraged this work over the years, including support from Hewlett-Packard,
    made possible by Ira Goldstein and Joel Birnbaum, and support from DARPA, made
    possible by Bob Kahn.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们要感谢多年来鼓励这项工作的组织的支持，包括来自惠普公司的支持，由艾拉·戈德斯坦和乔尔·伯恩鲍姆实现，以及来自DARPA的支持，由鲍勃·卡恩实现。
- en: —Harold Abelson and Gerald Jay Sussman
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: ——哈罗德·阿贝尔森和杰拉尔德·杰伊·萨斯曼
- en: Structure and Interpretation of Computer Programs
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 《计算机程序的构造和解释》
- en: JavaScript Edition
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 版本

- en: 'C Programming: Review Questions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C编程：复习问题
- en: Warning - question numbers subject to change
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 警告-问题编号可能会更改
- en: Memory and Strings
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存和字符串
- en: Q1.1
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1.1
- en: In the example below, which variables are guaranteed to print the value of zero?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，哪些变量保证打印零值？
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Q 1.2
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1.2
- en: In the example below, which variables are guaranteed to print the value of zero?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，哪些变量保证打印零值？
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Q 1.3
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1.3
- en: Explain the error in the following attempt to copy a string.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 解释下面尝试复制字符串的错误。
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Q 1.4
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1.4
- en: Why does the following attempt to copy a string sometimes work and sometimes
    fail?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么下面尝试复制字符串的尝试有时成功有时失败？
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Q 1.4
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1.4
- en: Explain the two errors in the following code that attempts to copy a string.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 解释下面的代码中尝试复制字符串的两个错误。
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Q 1.5
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1.5
- en: Which of the following is legal?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪个是合法的？
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Q 1.6
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1.6
- en: Complete the function pointer typedef to declare a pointer to a function that
    takes a void* argument and returns a void*. Name your type 'pthread_callback'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 完成函数指针typedef以声明一个接受void*参数并返回void*的函数指针。将您的类型命名为'pthread_callback'
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Q 1.7
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1.7
- en: In addition to the function arguments what else is stored on a thread's stack?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除了函数参数之外，线程的堆栈上还存储了什么？
- en: Q 1.8
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1.8
- en: Implement a version of `char* strcat(char*dest, const char*src)` using only
    `strcpy` `strlen` and pointer arithmetic
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`strcpy` `strlen`和指针算术实现`char* strcat(char*dest, const char*src)`的版本
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Q 1.9
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1.9
- en: Implement version of size_t strlen(const char*) using a loop and no function
    calls.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用循环和无函数调用实现`size_t strlen(const char*)`的版本。
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Q 1.10
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1.10
- en: Identify the three bugs in the following implementation of `strcpy`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 识别以下`strcpy`实现中的三个错误。
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Printing
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打印
- en: Q 2.1
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题2.1
- en: Spot the two errors!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 找出两个错误！
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Formatting and Printing to a file
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 格式化和打印到文件
- en: Q 3.1
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题3.1
- en: Complete the following code to print to a file. Print the name, a comma and
    the score to the file 'result.txt'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下代码以打印到文件。将名称、逗号和分数打印到文件'result.txt'
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Printing to a string
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打印到字符串
- en: Q 4.1
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题4.1
- en: 'How would you print the values of variables a,mesg,val and ptr to a string?
    Print a as an integer, mesg as C string, val as a double val and ptr as a hexadecimal
    pointer. You may assume the mesg points to a short C string(<50 characters). Bonus:
    How would you make this code more robust or able to cope with?'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如何将变量a，mesg，val和ptr的值打印到一个字符串？将a打印为整数，mesg打印为C字符串，val打印为双精度值，ptr打印为十六进制指针。您可以假设mesg指向一个短的C字符串（<50个字符）。奖励：如何使这段代码更健壮或能够应对？
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Input parsing
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入解析
- en: Q 5.1
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题5.1
- en: Why should you check the return value of sscanf and scanf?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么应该检查sscanf和scanf的返回值？
- en: Q 5.2
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题5.2
- en: Why is 'gets' dangerous?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么'gets'很危险？
- en: Q 5.3
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题5.3
- en: Write a complete program that uses `getline`. Ensure your program has no memory
    leaks.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个使用`getline`的完整程序。确保您的程序没有内存泄漏。
- en: Heap memory
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆内存
- en: When would you use calloc not malloc? When would realloc be useful?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 何时使用calloc而不是malloc？何时realloc会有用？
- en: (Todo - move this question to another page) What mistake did the programmer
    make in the following code? Is it possible to fix it i) using heap memory? ii)
    using global (static) memory?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: （待办事项-将此问题移动到另一页）程序员在下面的代码中犯了什么错误？使用堆内存可以修复吗？使用全局（静态）内存可以修复吗？
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'

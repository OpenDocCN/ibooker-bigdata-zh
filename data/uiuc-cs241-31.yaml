- en: 'Synchronization, Part 1: Mutex Locks'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步，第1部分：互斥锁
- en: Solving Critical Sections
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决临界区
- en: What is a Critical Section?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是临界区？
- en: A critical section is a section of code that can only be executed by one thread
    at a time, if the program is to function correctly. If two threads (or processes)
    were to execute code inside the critical section at the same time then it is possible
    that program may no longer have correct behavior.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 临界区是一段代码，只能由一个线程同时执行，如果程序要正确运行。如果两个线程（或进程）同时在临界区内执行代码，那么可能程序可能不再具有正确的行为。
- en: Is just incrementing a variable a critical section?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅仅递增一个变量是否是临界区？
- en: 'Possibly. Incrementing a variable (`i++`) is performed in three individual
    steps: Copy the memory contents to the CPU register. Increment the value in the
    CPU. Store the new value in memory. If the memory location is only accessible
    by one thread (e.g. automatic variable `i` below) then there is no possibility
    of a race condition and no Critical Section associated with `i`. However the `sum`
    variable is a global variable and accessed by two threads. It is possible that
    two threads may attempt to increment the variable at the same time.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 可能。递增变量（`i++`）是通过三个单独的步骤执行的：将内存内容复制到CPU寄存器。增加CPU中的值。将新值存储在内存中。如果内存位置只能由一个线程访问（例如下面的自动变量`i`），则不可能发生竞争条件，也没有与`i`相关的临界区。但是，`sum`变量是全局变量，并且被两个线程访问。可能两个线程可能同时尝试递增变量。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Typical output of the above code is `ARGGGH sum is 8140268` A different sum
    is printed each time the program is run because there is a race condition; the
    code does not stop two threads from reading-writing `sum` at the same time. For
    example both threads copy the current value of sum into CPU that runs each thread
    (let's pick 123). Both threads increment one to their own copy. Both threads write
    back the value (124). If the threads had accessed the sum at different times then
    the count would have been 125.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的典型输出是`ARGGGH sum is 8140268`每次运行程序时都会打印不同的总和，因为存在竞争条件；代码无法阻止两个线程同时读写`sum`。例如，两个线程都将当前的sum值复制到运行每个线程的CPU中（假设为123）。两个线程都将其自己的副本增加一。两个线程写回该值（124）。如果线程在不同时间访问了sum，则计数将为125。
- en: How do I ensure only one thread at a time can access a global variable?
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何确保一次只有一个线程可以访问全局变量？
- en: You mean, "Help - I need a mutex!" If one thread is currently inside a critical
    section we would like another thread to wait until the first thread is complete.
    For this purpose we can use a mutex (short for Mutual Exclusion).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你的意思是，“帮助 - 我需要一个互斥体！”如果一个线程当前正在临界区内，我们希望另一个线程等到第一个线程完成。为此，我们可以使用互斥体（Mutual
    Exclusion的缩写）。
- en: 'For simple examples the smallest amount of code we need to add is just three
    lines:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单的示例，我们需要添加的代码最少只有三行：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once we are finished with the mutex we should also call `pthread_mutex_destroy(&m)`
    too. Note, you can only destroy an unlocked mutex. Calling destroy on a destroyed
    lock, initializing an initialized lock, locking an already locked lock, unlocking
    an unlocked lock etc are unsupported (at least for default mutexes) and usually
    result in undefined behavior.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成了互斥体，我们还应该调用`pthread_mutex_destroy(&m)`。请注意，您只能销毁未锁定的互斥体。对已销毁的锁调用destroy，初始化已初始化的锁，锁定已锁定的锁，解锁未锁定的锁等都是不受支持的（至少对于默认的互斥体），通常会导致未定义的行为。
- en: If I lock a mutex, does it stop all other threads?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果我锁定了互斥体，是否会阻止所有其他线程？
- en: No, the other threads will continue. It's only when a thread attempts to lock
    a mutex that is already locked, will the thread have to wait. As soon as the original
    thread unlocks the mutex, the second (waiting) thread will acquire the lock and
    be able to continue.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 不，其他线程将继续。只有当一个线程尝试锁定已经锁定的互斥体时，线程才必须等待。一旦原始线程解锁互斥体，第二个（等待的）线程将获取锁并能够继续。
- en: Are there other ways to create a mutex?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有其他创建互斥体的方法吗？
- en: Yes. You can use the macro PTHREAD_MUTEX_INITIALIZER only for global ('static')
    variables. m = PTHREAD_MUTEX_INITIALIZER is equivalent to the more general purpose
    `pthread_mutex_init(&m,NULL)`. The init version includes options to trade performance
    for additional error-checking and advanced sharing options.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可以。您可以仅对全局（“静态”）变量使用宏PTHREAD_MUTEX_INITIALIZER。m = PTHREAD_MUTEX_INITIALIZER等同于更通用的`pthread_mutex_init(&m,NULL)`。init版本包括用于在性能和额外错误检查以及高级共享选项之间进行权衡的选项。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Things to keep in mind about `init` and `destroy`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 关于“init”和“destroy”需要记住的事情：
- en: Multiple threads init/destroy has undefined behavior
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个线程的初始化/销毁具有未定义的行为
- en: Destroying a locked mutex has undefined behavior
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 销毁锁定的互斥体具有未定义的行为
- en: Basically try to keep to the pattern of one thread initializing a mutex and
    one and only one thread initializing a mutex.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本上尝试遵循一个线程初始化一个互斥体，而且只有一个线程初始化一个互斥体的模式。
- en: Mutex Gotchas
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 互斥体陷阱
- en: '`So pthread_mutex_lock` stops the other threads when they read the same variable?'
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`所以pthread_mutex_lock`在其他线程读取相同变量时会停止吗？'
- en: No. A mutex is not that smart - it works with code (threads), not data. Only
    when another thread calls `lock` on a locked mutex will the second thread need
    to wait until the mutex is unlocked.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不，互斥体不是那么聪明 - 它与代码（线程）一起工作，而不是数据。只有当另一个线程在锁定的互斥体上调用`lock`时，第二个线程才需要等待，直到互斥体被解锁。
- en: Consider
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Will still cause a race condition.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 仍会导致竞争条件。
- en: Can I create mutex before fork-ing?
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以在fork之前创建互斥体吗？
- en: Yes - however the child and parent process will not share virtual memory and
    each one will have a mutex independent of the other.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 是的 - 但是子进程和父进程将不共享虚拟内存，并且每个进程都将拥有独立于其他进程的互斥体。
- en: '(Advanced note: There are advanced options using shared memory that allow a
    child and parent to share a mutex if it''s created with the correct options and
    uses a shared memory segment. See [stackoverflow example](http://stackoverflow.com/questions/19172541/procs-fork-and-mutexes)
    )'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: （高级说明：使用共享内存有高级选项，允许子进程和父进程共享互斥体，如果使用正确的选项并使用共享内存段。请参阅[stackoverflow示例](http://stackoverflow.com/questions/19172541/procs-fork-and-mutexes)）
- en: If one thread locks a mutex can another thread unlock it?
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果一个线程锁定了一个互斥锁，另一个线程能解锁它吗？
- en: No. The same thread must unlock it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 不行。同一个线程必须解锁它。
- en: Can I use two or more mutex locks?
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以使用两个或更多的互斥锁吗？
- en: Yes! In fact it's common to have one lock per data structure that you need to
    update.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！事实上，通常每个需要更新的数据结构都有一个锁。
- en: If you only have one lock, then they may be significant contention for the lock
    between two threads that was unnecessary. For example if two threads were updating
    two different counters, it might not be necessary to use the same lock.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只有一个锁，那么两个线程之间可能会对锁有显著的争用，这是不必要的。例如，如果两个线程正在更新两个不同的计数器，可能不需要使用相同的锁。
- en: 'However simply creating many locks is insufficient: It''s important to be able
    to reason about critical sections e.g. it''s important that one thread can''t
    read two data structures while they are being updated and temporarily in an inconsistent
    state.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，简单地创建许多锁是不够的：重要的是能够推理关于临界区的问题，例如，一个线程不能在更新期间读取两个数据结构，而这两个数据结构暂时处于不一致的状态。
- en: Is there any overhead in calling lock and unlock?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用lock和unlock会有任何开销吗？
- en: There is a small amount of overhead of calling `pthread_mutex_lock` and `_unlock`;
    however this is the price you pay for correctly functioning programs!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`pthread_mutex_lock`和`_unlock`会有一些开销；然而这是你为了程序正确运行所付出的代价！
- en: Simplest complete example?
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最简单的完整示例？
- en: A complete example is shown below
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示了一个完整的示例
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the code above, the thread gets the lock to the counting house before entering.
    The critical section is only the `sum+=1` so the following version is also correct
    but slower -
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，线程在进入计数室之前获取了锁。关键部分只有`sum+=1`，所以下一个版本也是正确的但更慢 -
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This process runs slower because we lock and unlock the mutex a million times,
    which is expensive - at least compared with incrementing a variable. (And in this
    simple example we didn''t really need threads - we could have added up twice!)
    A faster multi-thread example would be to add one million using an automatic(local)
    variable and only then adding it to a shared total after the calculation loop
    has finished:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程运行得更慢，因为我们一百万次锁定和解锁互斥锁，这是昂贵的 - 至少与递增一个变量相比是昂贵的。（在这个简单的例子中，我们并不真正需要线程 - 我们可以加两次！）一个更快的多线程示例是使用一个自动（本地）变量添加一百万，然后在计算循环结束后将其添加到共享总数中：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What happens if I forget to unlock?
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果我忘记解锁会发生什么？
- en: Deadlock! We will talk about deadlock a little bit later but what is the problem
    with this loop if called by multiple threads.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 死锁！我们稍后会谈论死锁，但如果多个线程调用这个循环会有什么问题。
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When can I destroy the mutex?
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我什么时候可以销毁互斥锁？
- en: You can only destroy an unlocked mutex
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你只能销毁一个未锁定的互斥锁
- en: Can I copy a pthread_mutex_t to a new memory locaton?
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以将pthread_mutex_t复制到新的内存位置吗？
- en: No, copying the bytes of the mutex to a new memory location and then using the
    copy is *not* supported.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 不行，将互斥锁的字节复制到新的内存位置，然后使用副本是*不*支持的。
- en: What would a simple implementation of a mutex look like?
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 互斥锁的简单实现会是什么样的？
- en: A simple (but incorrect!) suggestion is shown below. The `unlock` function simply
    unlocks the mutex and returns. The lock function first checks to see if the lock
    is already locked. If it is currently locked, it will keep checking again until
    another thread has unlocked the mutex.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示了一个简单（但不正确！）的建议。`unlock`函数只是解锁互斥锁并返回。lock函数首先检查锁是否已经被锁定。如果当前已经被锁定，它将继续检查，直到另一个线程解锁互斥锁。
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Version 1 uses ''busy-waiting'' (unnecessarily wasting CPU resources) however
    there is a more serious problem: We have a race-condition!'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1使用了“忙等待”（不必要地浪费CPU资源），但更严重的问题是：我们有一个竞争条件！
- en: If two threads both called `lock` concurrently it is possible that both threads
    would read 'm_locked' as zero. Thus both threads would believe they have exclusive
    access to the lock and both threads will continue. Ooops!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个线程同时调用`lock`，有可能两个线程都会将'm_locked'读取为零。因此，两个线程都会认为它们对锁有独占访问权，然后两个线程都会继续。哎呀！
- en: We might attempt to reduce the CPU overhead a little by calling `pthread_yield()`
    inside the loop - pthread_yield suggests to the operating system that the thread
    does not use the CPU for a short while, so the CPU may be assigned to threads
    that are waiting to run. But does not fix the race-condition. We need a better
    implementation - can you work how to prevent the race-condition?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试通过在循环内调用`pthread_yield()`来减少一点CPU开销 - pthread_yield建议操作系统暂时不使用CPU，因此CPU可能被分配给等待运行的线程。但这并不能解决竞争条件。我们需要一个更好的实现
    - 你能想出如何防止竞争条件吗？
- en: How do I find out more?
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我怎样才能了解更多？
- en: '[Play!](http://cs-education.github.io/sys) Read the man page!'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[玩！](http://cs-education.github.io/sys) 阅读man page！'
- en: '[pthread_mutex_lock man page](http://linux.die.net/man/3/pthread_mutex_lock)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pthread_mutex_lock man page](http://linux.die.net/man/3/pthread_mutex_lock)'
- en: '[pthread_mutex_unlock man page](http://linux.die.net/man/3/pthread_mutex_unlock)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pthread_mutex_unlock man page](http://linux.die.net/man/3/pthread_mutex_unlock)'
- en: '[pthread_mutex_init man page](http://linux.die.net/man/3/pthread_mutex_init)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pthread_mutex_init man page](http://linux.die.net/man/3/pthread_mutex_init)'
- en: '[pthread_mutex_destroy man page](http://linux.die.net/man/3/pthread_mutex_destroy)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pthread_mutex_destroy man page](http://linux.die.net/man/3/pthread_mutex_destroy)'

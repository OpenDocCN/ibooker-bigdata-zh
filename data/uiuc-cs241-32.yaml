- en: 'Synchronization, Part 2: Counting Semaphores'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步，第2部分：计数信号量
- en: What is a counting semaphore?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是计数信号量？
- en: A counting semaphore contains a value and supports two operations "wait" and
    "post". Post increments the semaphore and immediately returns. "wait" will wait
    if the count is zero. If the count is non-zero the semaphore decrements the count
    and immediately returns.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 计数信号量包含一个值，并支持两个操作“等待”和“发布”。发布增加信号量并立即返回。“等待”将在计数为零时等待。如果计数不为零，则信号量将减少计数并立即返回。
- en: 'An analogy is a count of the cookies in a cookie jar (or gold coins in the
    treasure chest). Before taking a cookie, call ''wait''. If there are no cookies
    left then `wait` will not return: It will `wait` until another thread increments
    the semaphore by calling post.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类比是饼干罐中的饼干数量（或者宝箱中的金币数量）。在拿饼干之前，调用“等待”。如果没有剩下饼干，那么`等待`将不会返回：它将等待，直到另一个线程通过调用post增加信号量。
- en: In short, `post` increments and immediately returns whereas `wait` will wait
    if the count is zero. Before returning it will decrement count.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，“发布”增加并立即返回，而“等待”将在计数为零时等待。在返回之前，它将减少计数。
- en: How do I create a semaphore?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何创建一个信号量？
- en: This page introduces unnamed semaphores. Unfortunately Mac OS X does not support
    these yet.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本页介绍了未命名信号量。不幸的是，Mac OS X目前还不支持这些。
- en: First decide if the initial value should be zero or some other value (e.g. the
    number of remaining spaces in an array). Unlike pthread mutex there are not shortcuts
    to creating a semaphore - use `sem_init`
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首先决定初始值是零还是其他值（例如数组中剩余空间的数量）。与pthread互斥锁不同，创建信号量没有捷径 - 使用`sem_init`
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Can I call wait and post from different threads?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以从不同的线程调用wait和post吗？
- en: Yes! Unlike a mutex, the increment and decrement can be from different threads.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 可以！与互斥锁不同，增量和减量可以来自不同的线程。
- en: Can I use a semaphore instead of a mutex?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可以使用信号量代替互斥锁吗？
- en: 'Yes - though the overhead of a semaphore is greater. To use a semaphore:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 是的 - 虽然信号量的开销更大。要使用信号量：
- en: Initialize the semaphore with a count of one.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用计数为一初始化信号量。
- en: Replace `...lock` with `sem_wait`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用`...lock`替换`sem_wait`
- en: Replace `...unlock` with `sem_post`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用`...unlock`替换`sem_post`
- en: A mutex is a semaphore that always `waits` before it `posts`
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 互斥锁是一个在“发布”之前始终“等待”的信号量
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Can I use sem_post inside a signal handler?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以在信号处理程序中使用sem_post吗？
- en: Yes! `sem_post` is one of a handful of functions that can be correctly used
    inside a signal handler. This means we can release a waiting thread which can
    now make all of the calls that we were not allowed to call inside the signal handler
    itself (e.g. `printf`).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！`sem_post`是少数几个可以在信号处理程序中正确使用的函数之一。这意味着我们可以释放一个等待的线程，该线程现在可以进行所有我们不允许在信号处理程序本身内调用的调用（例如`printf`）。
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note robust programs do not use `signal()` in a multi-threaded program ("The
    effects of signal() in a multithreaded process are unspecified." - the signal
    man page); a more correct program will need to use `sigaction`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，健壮的程序不会在多线程程序中使用`signal()`（“在多线程进程中使用signal()的效果是未指定的。”- 信号手册页）；一个更正确的程序将需要使用`sigaction`。
- en: How do I find out more?
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何找到更多信息？
- en: 'Read the man pages:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读手册页：
- en: '[sem_init](http://man7.org/linux/man-pages/man3/sem_init.3.html)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sem_init](http://man7.org/linux/man-pages/man3/sem_init.3.html)'
- en: '[sem_wait](http://man7.org/linux/man-pages/man3/sem_wait.3.html)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sem_wait](http://man7.org/linux/man-pages/man3/sem_wait.3.html)'
- en: '[sem_post](http://man7.org/linux/man-pages/man3/sem_post.3.html)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sem_post](http://man7.org/linux/man-pages/man3/sem_post.3.html)'
- en: '[sem_destroy](http://man7.org/linux/man-pages/man3/sem_destroy.3.html)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[sem_destroy](http://man7.org/linux/man-pages/man3/sem_destroy.3.html)'

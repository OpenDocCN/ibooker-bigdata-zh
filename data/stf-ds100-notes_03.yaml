- en: 2  Pandas I
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2  Pandas I
- en: 原文：[https://ds100.org/course-notes/pandas_1/pandas_1.html](https://ds100.org/course-notes/pandas_1/pandas_1.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://ds100.org/course-notes/pandas_1/pandas_1.html](https://ds100.org/course-notes/pandas_1/pandas_1.html)
- en: '*Learning Outcomes* ***   Build familiarity with `pandas` and `pandas` syntax.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*学习成果* ***  建立对`pandas`和`pandas`语法的熟悉度。'
- en: 'Learn key data structures: `DataFrame`, `Series`, and `Index`.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习关键数据结构：`DataFrame`、`Series`和`Index`。
- en: 'Understand methods for extracting data: `.loc`, `.iloc`, and `[]`.**  **In
    this sequence of lectures, we will dive right into things by having you explore
    and manipulate real-world data. We’ll first introduce `pandas`, a popular Python
    library for interacting with **tabular data**.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解提取数据的方法：`.loc`、`.iloc`和`[]`。** **在这一系列讲座中，我们将让您直接探索和操纵真实世界的数据。我们将首先介绍`pandas`，这是一个流行的Python库，用于与**表格数据**交互。
- en: 2.1 Tabular Data
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1 表格数据
- en: Data scientists work with data stored in a variety of formats. The primary focus
    of this class is understanding *tabular data* — data that is stored in a table.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家使用各种格式存储的数据。本课程的主要重点是理解*表格数据*——存储在表格中的数据。
- en: Tabular data is one of the most common systems that data scientists use to organize
    data. This is in large part due to the simplicity and flexibility of tables. Tables
    allow us to represent each **observation**, or instance of collecting data from
    an individual, as its own *row*. We can record each observation’s distinct characteristics,
    or **features**, in separate *columns*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 表格数据是数据科学家用来组织数据的最常见系统之一。这在很大程度上是因为表格的简单性和灵活性。表格允许我们将每个**观察**，或者从个体收集数据的实例，表示为其自己的*行*。我们可以将每个观察的不同特征，或者**特征**，记录在单独的*列*中。
- en: To see this in action, we’ll explore the `elections` dataset, which stores information
    about political candidates who ran for president of the United States in previous
    years.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到这一点，我们将探索`elections`数据集，该数据集存储了以前年份竞选美国总统的政治候选人的信息。
- en: <details><summary>Code</summary>
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: <details><summary>代码</summary>
- en: '[PRE0]</details>'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0]</details>'
- en: '|  | Year | Candidate | Party | Popular vote | Result | % |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|  | 年份 | 候选人 | 党派 | 普选票 | 结果 | % |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| 0 | 1824 | Andrew Jackson | Democratic-Republican | 151271 | loss | 57.210122
    |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1824 | 安德鲁·杰克逊 | 民主共和党 | 151271 | 输 | 57.210122 |'
- en: '| 1 | 1824 | John Quincy Adams | Democratic-Republican | 113142 | win | 42.789878
    |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1824 | 约翰·昆西·亚当斯 | 民主共和党 | 113142 | 赢 | 42.789878 |'
- en: '| 2 | 1828 | Andrew Jackson | Democratic | 642806 | win | 56.203927 |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1828 | 安德鲁·杰克逊 | 民主党 | 642806 | 赢 | 56.203927 |'
- en: '| 3 | 1828 | John Quincy Adams | National Republican | 500897 | loss | 43.796073
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 1828 | 约翰·昆西·亚当斯 | 国家共和党 | 500897 | 输 | 43.796073 |'
- en: '| 4 | 1832 | Andrew Jackson | Democratic | 702735 | win | 54.574789 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 1832 | 安德鲁·杰克逊 | 民主党 | 702735 | 赢 | 54.574789 |'
- en: '| ... | ... | ... | ... | ... | ... | ... |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| ... | ... | ... | ... | ... | ... | ... |'
- en: '| 177 | 2016 | Jill Stein | Green | 1457226 | loss | 1.073699 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 177 | 2016 | 吉尔·斯坦 | 绿党 | 1457226 | 输 | 1.073699 |'
- en: '| 178 | 2020 | Joseph Biden | Democratic | 81268924 | win | 51.311515 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 178 | 2020 | 乔瑟夫·拜登 | 民主党 | 81268924 | 赢 | 51.311515 |'
- en: '| 179 | 2020 | Donald Trump | Republican | 74216154 | loss | 46.858542 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 179 | 2020 | 唐纳德·特朗普 | 共和党 | 74216154 | 输 | 46.858542 |'
- en: '| 180 | 2020 | Jo Jorgensen | Libertarian | 1865724 | loss | 1.177979 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 180 | 2020 | 乔·乔尔根森 | 自由党 | 1865724 | 输 | 1.177979 |'
- en: '| 181 | 2020 | Howard Hawkins | Green | 405035 | loss | 0.255731 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 181 | 2020 | 霍华德·霍金斯 | 绿党 | 405035 | 输 | 0.255731 |'
- en: 182 rows × 6 columns
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 182行×6列
- en: In the `elections` dataset, each row represents one instance of a candidate
    running for president in a particular year. For example, the first row represents
    Andrew Jackson running for president in the year 1824\. Each column represents
    one characteristic piece of information about each presidential candidate. For
    example, the column named “Result” stores whether or not the candidate won the
    election.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在`elections`数据集中，每一行代表一个候选人在特定年份竞选总统的一个实例。例如，第一行代表安德鲁·杰克逊在1824年竞选总统。每一列代表每个总统候选人的一个特征信息。例如，名为“结果”的列存储候选人是否赢得选举。
- en: Your work in Data 8 helped you grow very familiar with using and interpreting
    data stored in a tabular format. Back then, you used the `Table` class of the
    `datascience` library, a special programming library created specifically for
    Data 8 students.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你在Data 8中的工作帮助你非常熟悉使用和解释以表格格式存储的数据。那时，你使用了`datascience`库的`Table`类，这是专门为Data
    8学生创建的特殊编程库。
- en: In Data 100, we will be working with the programming library `pandas`, which
    is generally accepted in the data science community as the industry- and academia-standard
    tool for manipulating tabular data (as well as the inspiration for Petey, our
    panda bear mascot).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在Data 100中，我们将使用编程库`pandas`，这在数据科学界被普遍接受为操纵表格数据的行业和学术标准工具（也是我们熊猫吉祥物Petey的灵感来源）。
- en: Using `pandas`, we can
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pandas`，我们可以
- en: Arrange data in a tabular format.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以表格格式排列数据。
- en: Extract useful information filtered by specific conditions.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取由特定条件过滤的有用信息。
- en: Operate on data to gain new insights.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对数据进行操作以获得新的见解。
- en: Apply `NumPy` functions to our data (our friends from Data 8).
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`NumPy`函数应用于我们的数据（我们来自Data 8的朋友）。
- en: Perform vectorized computations to speed up our analysis (Lab 1).
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行矢量化计算以加快我们的分析速度（实验室1）。
- en: 2.2 `Series`, `DataFrame`s, and Indices
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2 `Series`、`DataFrame`和索引
- en: To begin our work in `pandas`, we must first import the library into our Python
    environment. This will allow us to use `pandas` data structures and methods in
    our code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们在`pandas`中的工作，我们必须首先将库导入到我们的Python环境中。这将允许我们在我们的代码中使用`pandas`数据结构和方法。
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There are three fundamental data structures in `pandas`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas`中有三种基本数据结构：'
- en: '**Series**: 1D labeled array data; best thought of as columnar data.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Series**：1D带标签的数组数据；最好将其视为列数据。'
- en: '**DataFrame**: 2D tabular data with rows and columns.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**DataFrame**：带有行和列的2D表格数据。'
- en: '**Index**: A sequence of row/column labels.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**索引**：一系列行/列标签。'
- en: '`DataFrame`s, `Series`, and Indices can be represented visually in the following
    diagram, which considers the first few rows of the `elections` dataset.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame`，`Series`和索引可以在以下图表中以可视化方式表示，该图表考虑了`elections`数据集的前几行。'
- en: '![](../Images/64098fb0fd635b00ff61f3e7429c82b3.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/64098fb0fd635b00ff61f3e7429c82b3.png)'
- en: Notice how the **DataFrame** is a two-dimensional object — it contains both
    rows and columns. The **Series** above is a singular column of this `DataFrame`,
    namely the `Result` column. Both contain an **Index**, or a shared list of row
    labels (the integers from 0 to 4, inclusive).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意**DataFrame**是一个二维对象——它包含行和列。上面的**Series**是这个`DataFrame`的一个单独的列，即`Result`列。两者都包含一个**索引**，或者共享的行标签列表（从0到4的整数，包括0）。
- en: 2.2.1 Series
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2.1 系列
- en: 'A Series represents a column of a `DataFrame`; more generally, it can be any
    1-dimensional array-like object. It contains:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Series表示`DataFrame`的一列；更一般地，它可以是任何1维类似数组的对象。它包含：
- en: A sequence of **values** of the same type.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相同类型的**值**序列。
- en: A sequence of data labels called the **index**.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引称为数据标签的序列。
- en: In the cell below, we create a `Series` named `s`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的单元格中，我们创建了一个名为`s`的`Series`。
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By default, the Index of a Series is a sequential list of integers beginning
    from 0\. Optionally, a manually specified list of desired indices can be passed
    to the `index` argument.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Series的索引是从0开始的整数的顺序列表。可以将所需索引的手动指定列表传递给`index`参数。
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Indices can also be changed after initialization.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化后也可以更改索引。
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 2.2.1.1 Selection in `Series`
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.2.1.1 `Series`中的选择
- en: 'Much like when working with `NumPy` arrays, we can select a single value or
    a set of values from a `Series`. To do so, there are three primary methods:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在使用`NumPy`数组时一样，我们可以从`Series`中选择单个值或一组值。为此，有三种主要方法：
- en: A single label.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单个标签。
- en: A list of labels.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标签列表。
- en: A filtering condition.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 过滤条件。
- en: To demonstrate this, let’s define the Series `ser`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明这一点，让我们定义`ser`系列。
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 2.2.1.1.1 A Single Label
  id: totrans-73
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.2.1.1.1 单个标签
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 2.2.1.1.2 A List of Labels
  id: totrans-76
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.2.1.1.2 标签列表
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 2.2.1.1.3 A Filtering Condition
  id: totrans-79
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.2.1.1.3 过滤条件
- en: Perhaps the most interesting (and useful) method of selecting data from a Series
    is by using a filtering condition.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 也许从`Series`中选择数据的最有趣（和有用）的方法是使用过滤条件。
- en: First, we apply a boolean operation to the `Series`. This creates **a new Series
    of boolean values**.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们对`Series`应用布尔运算。这将创建**一个新的布尔值系列**。
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We then use this boolean condition to index into our original `Series`. `pandas`
    will select only the entries in the original `Series` that satisfy the condition.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用这个布尔条件来索引我们原始的`Series`。`pandas`将只选择原始`Series`中满足条件的条目。
- en: '[PRE24]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 2.2.2 DataFrames
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2.2 数据框
- en: Typically, we will work with `Series` using the perspective that they are columns
    in a `DataFrame`. We can think of a **DataFrame** as a collection of **Series**
    that all share the same **Index**.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们将使用`Series`的角度来处理它们，认为它们是`DataFrame`中的列。我们可以将**DataFrame**视为所有共享相同**索引**的**Series**的集合。
- en: In Data 8, you encountered the `Table` class of the `datascience` library, which
    represented tabular data. In Data 100, we’ll be using the `DataFrame` class of
    the `pandas` library.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在Data 8中，您遇到了`datascience`库的`Table`类，它表示表格数据。在Data 100中，我们将使用`pandas`库的`DataFrame`类。
- en: 2.2.2.1 Creating a `DataFrame`
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.2.2.1 创建`DataFrame`
- en: 'There are many ways to create a `DataFrame`. Here, we will cover the most popular
    approaches:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多创建`DataFrame`的方法。在这里，我们将介绍最流行的方法：
- en: From a CSV file.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从CSV文件中。
- en: Using a list and column name(s).
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用列名和列表。
- en: From a dictionary.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从字典中。
- en: From a `Series`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Series`中。
- en: 'More generally, the syntax for creating a `DataFrame` is: `pandas.DataFrame(data,
    index, columns)`.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地，创建`DataFrame`的语法是：`pandas.DataFrame(data, index, columns)`。
- en: 2.2.2.1.1 From a CSV file
  id: totrans-97
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.2.2.1.1 从CSV文件中
- en: In Data 100, our data are typically stored in a CSV (comma-separated values)
    file format. We can import a CSV file into a `DataFrame` by passing the data path
    as an argument to the following `pandas` function.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在Data 100中，我们的数据通常以CSV（逗号分隔值）文件格式存储。我们可以通过将数据路径作为参数传递给以下`pandas`函数来将CSV文件导入`DataFrame`。
- en: '`pd.read_csv("filename.csv")`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.read_csv("filename.csv")`'
- en: With our new understanding of `pandas` in hand, let’s return to the `elections`
    dataset from before. Now, we can recognize that it is represented as a `pandas`
    DataFrame.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以认识到`pandas` DataFrame表示的是`elections`数据集。
- en: '[PRE26]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '|  | Year | Candidate | Party | Popular vote | Result | % |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '|  | 年 | 候选人 | 党派 | 普选票 | 结果 | % |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| 0 | 1824 | Andrew Jackson | Democratic-Republican | 151271 | loss | 57.210122
    |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1824 | Andrew Jackson | Democratic-Republican | 151271 | loss | 57.210122
    |'
- en: '| 1 | 1824 | John Quincy Adams | Democratic-Republican | 113142 | win | 42.789878
    |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1824 | John Quincy Adams | Democratic-Republican | 113142 | win | 42.789878
    |'
- en: '| 2 | 1828 | Andrew Jackson | Democratic | 642806 | win | 56.203927 |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1828 | Andrew Jackson | Democratic | 642806 | win | 56.203927 |'
- en: '| 3 | 1828 | John Quincy Adams | National Republican | 500897 | loss | 43.796073
    |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 1828 | John Quincy Adams | National Republican | 500897 | loss | 43.796073
    |'
- en: '| 4 | 1832 | Andrew Jackson | Democratic | 702735 | win | 54.574789 |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 1832 | Andrew Jackson | Democratic | 702735 | win | 54.574789 |'
- en: '| ... | ... | ... | ... | ... | ... | ... |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| ... | ... | ... | ... | ... | ... | ... |'
- en: '| 177 | 2016 | Jill Stein | Green | 1457226 | loss | 1.073699 |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| 177 | 2016 | Jill Stein | Green | 1457226 | loss | 1.073699 |'
- en: '| 178 | 2020 | Joseph Biden | Democratic | 81268924 | win | 51.311515 |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| 178 | 2020 | Joseph Biden | Democratic | 81268924 | win | 51.311515 |'
- en: '| 179 | 2020 | Donald Trump | Republican | 74216154 | loss | 46.858542 |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 179 | 2020 | Donald Trump | Republican | 74216154 | loss | 46.858542 |'
- en: '| 180 | 2020 | Jo Jorgensen | Libertarian | 1865724 | loss | 1.177979 |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 180 | 2020 | Jo Jorgensen | Libertarian | 1865724 | loss | 1.177979 |'
- en: '| 181 | 2020 | Howard Hawkins | Green | 405035 | loss | 0.255731 |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 181 | 2020 | Howard Hawkins | Green | 405035 | loss | 0.255731 |'
- en: 182 rows × 6 columns
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 182行×6列
- en: This code stores our `DataFrame` object in the `elections` variable. Upon inspection,
    our `elections` DataFrame has 182 rows and 6 columns (`Year`, `Candidate`, `Party`,
    `Popular Vote`, `Result`, `%`). Each row represents a single record — in our example,
    a presidential candidate from some particular year. Each column represents a single
    attribute or feature of the record.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将我们的“DataFrame”对象存储在“选举”变量中。经过检查，我们的“选举”DataFrame有182行和6列（“年份”，“候选人”，“党派”，“普选票”，“结果”，“%”）。每一行代表一条记录——在我们的例子中，是某一年的总统候选人。每一列代表记录的一个属性或特征。
- en: 2.2.2.1.2 Using a List and Column Name(s)
  id: totrans-117
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.2.2.1.2 使用列表和列名
- en: We’ll now explore creating a `DataFrame` with data of our own.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将探讨如何使用我们自己的数据创建“DataFrame”。
- en: Consider the following examples. The first code cell creates a `DataFrame` with
    a single column `Numbers`. The second creates a `DataFrame` with the columns `Numbers`
    and `Description`. Notice how a 2D list of values is required to initialize the
    second `DataFrame` — each nested list represents a single row of data.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下例子。第一个代码单元创建了一个只有一个列“Numbers”的“DataFrame”。第二个创建了一个有“Numbers”和“Description”两列的“DataFrame”。请注意，需要一个二维值列表来初始化第二个“DataFrame”——每个嵌套列表代表一行数据。
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '|  | Numbers |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '|  | 数字 |'
- en: '| --- | --- |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 0 | 1 |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 |'
- en: '| 1 | 2 |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 2 |'
- en: '| 2 | 3 |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 3 |'
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '|  | Number | Description |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '|  | 数字 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 0 | 1 | one |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1 | 一个 |'
- en: '| 1 | 2 | two |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 2 | 两 |'
- en: 2.2.2.1.3 From a Dictionary
  id: totrans-131
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.2.2.1.3 从字典
- en: A third (and more common) way to create a `DataFrame` is with a dictionary.
    The dictionary keys represent the column names, and the dictionary values represent
    the column values.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种（更常见的）创建“DataFrame”的方法是使用字典。字典的键代表列名，字典的值代表列的值。
- en: Below are two ways of implementing this approach. The first is based on specifying
    the columns of the `DataFrame`, whereas the second is based on specifying the
    rows of the `DataFrame`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是实现这种方法的两种方式。第一种是基于指定“DataFrame”的列，而第二种是基于指定“DataFrame”的行。
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '|  | Fruit | Price |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '|  | 水果 | 价格 |'
- en: '| --- | --- | --- |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 0 | Strawberry | 5.49 |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 草莓 | 5.49 |'
- en: '| 1 | Orange | 3.99 |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 橙子 | 3.99 |'
- en: '[PRE30]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '|  | Fruit | Price |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '|  | 水果 | 价格 |'
- en: '| --- | --- | --- |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| 0 | Strawberry | 5.49 |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 草莓 | 5.49 |'
- en: '| 1 | Orange | 3.99 |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 橙子 | 3.99 |'
- en: 2.2.2.1.4 From a `Series`
  id: totrans-144
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 2.2.2.1.4 从“Series”
- en: Earlier, we explained how a `Series` was synonymous to a column in a `DataFrame`.
    It follows, then, that a `DataFrame` is equivalent to a collection of `Series`,
    which all share the same `Index`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候，我们解释了“Series”与“DataFrame”中的列是同义词。因此，“DataFrame”相当于共享相同索引的“Series”集合。
- en: In fact, we can initialize a `DataFrame` by merging two or more `Series`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们可以通过合并两个或更多的“Series”来初始化“DataFrame”。
- en: '[PRE31]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '|  | A-column | B-column |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '|  | A列 | B列 |'
- en: '| --- | --- | --- |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| r1 | a1 | b1 |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| r1 | a1 | b1 |'
- en: '| r2 | a2 | b2 |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| r2 | a2 | b2 |'
- en: '| r3 | a3 | b3 |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| r3 | a3 | b3 |'
- en: '[PRE32]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '|  | 0 |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '|  | 0 |'
- en: '| --- | --- |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| r1 | a1 |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| r1 | a1 |'
- en: '| r2 | a2 |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| r2 | a2 |'
- en: '| r3 | a3 |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| r3 | a3 |'
- en: '[PRE33]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '|  | 0 |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '|  | 0 |'
- en: '| --- | --- |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| r1 | a1 |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| r1 | a1 |'
- en: '| r2 | a2 |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| r2 | a2 |'
- en: '| r3 | a3 |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| r3 | a3 |'
- en: 2.2.3 Indices
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.2.3 索引
- en: On a more technical note, an `Index` doesn’t have to be an integer, nor does
    it have to be unique. For example, we can set the index of the `elections` Dataframe
    to be the name of presidential candidates.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在技术上，索引不一定是整数，也不一定是唯一的。例如，我们可以将“选举”DataFrame的索引设置为总统候选人的名字。
- en: '[PRE34]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '|  | Year | Party | Popular vote | Result | % |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '|  | 年份 | 党派 | 普选票 | 结果 | % |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| Candidate |  |  |  |  |  |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 候选人 |  |  |  |  |  |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| Andrew Jackson | 1824 | Democratic-Republican | 151271 | loss | 57.210122
    |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| Andrew Jackson | 1824 | 民主共和党 | 151271 | 输 | 57.210122 |'
- en: '| John Quincy Adams | 1824 | Democratic-Republican | 113142 | win | 42.789878
    |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| John Quincy Adams | 1824 | 民主共和党 | 113142 | 赢 | 42.789878 |'
- en: '| Andrew Jackson | 1828 | Democratic | 642806 | win | 56.203927 |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| Andrew Jackson | 1828 | 民主党 | 642806 | 赢 | 56.203927 |'
- en: '| John Quincy Adams | 1828 | National Republican | 500897 | loss | 43.796073
    |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| John Quincy Adams | 1828 | 国家共和党 | 500897 | 输 | 43.796073 |'
- en: '| Andrew Jackson | 1832 | Democratic | 702735 | win | 54.574789 |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| Andrew Jackson | 1832 | 民主党 | 702735 | 赢 | 54.574789 |'
- en: '| ... | ... | ... | ... | ... | ... |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| ... | ... | ... | ... | ... | ... |'
- en: '| Jill Stein | 2016 | Green | 1457226 | loss | 1.073699 |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| Jill Stein | 2016 | 绿党 | 1457226 | 输 | 1.073699 |'
- en: '| Joseph Biden | 2020 | Democratic | 81268924 | win | 51.311515 |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| Joseph Biden | 2020 | 民主党 | 81268924 | 赢 | 51.311515 |'
- en: '| Donald Trump | 2020 | Republican | 74216154 | loss | 46.858542 |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| Donald Trump | 2020 | 共和党 | 74216154 | 输 | 46.858542 |'
- en: '| Jo Jorgensen | 2020 | Libertarian | 1865724 | loss | 1.177979 |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| Jo Jorgensen | 2020 | 自由党 | 1865724 | 输 | 1.177979 |'
- en: '| Howard Hawkins | 2020 | Green | 405035 | loss | 0.255731 |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| Howard Hawkins | 2020 | 绿党 | 405035 | 输 | 0.255731 |'
- en: 182 rows × 5 columns
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 182行×5列
- en: We can also select a new column and set it as the index of the DataFrame. For
    example, we can set the index of the `elections` Dataframe to represent the candidate’s
    party.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以选择一个新的列，并将其设置为DataFrame的索引。例如，我们可以将“选举”DataFrame的索引设置为候选人的党派。
- en: '[PRE35]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '|  | Candidate | Year | Popular vote | Result | % |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '|  | 候选人 | 年份 | 普选票 | 结果 | % |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| Party |  |  |  |  |  |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| 党派 |  |  |  |  |  |'
- en: '| --- | --- | --- | --- | --- | --- |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- |'
- en: '| Democratic-Republican | Andrew Jackson | 1824 | 151271 | loss | 57.210122
    |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| 民主共和党 | Andrew Jackson | 1824 | 151271 | 输 | 57.210122 |'
- en: '| Democratic-Republican | John Quincy Adams | 1824 | 113142 | win | 42.789878
    |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| 民主共和党 | John Quincy Adams | 1824 | 113142 | 赢 | 42.789878 |'
- en: '| Democratic | Andrew Jackson | 1828 | 642806 | win | 56.203927 |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| 民主党 | Andrew Jackson | 1828 | 642806 | 赢 | 56.203927 |'
- en: '| National Republican | John Quincy Adams | 1828 | 500897 | loss | 43.796073
    |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 国家共和党 | John Quincy Adams | 1828 | 500897 | 输 | 43.796073 |'
- en: '| Democratic | Andrew Jackson | 1832 | 702735 | win | 54.574789 |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 民主党 | Andrew Jackson | 1832 | 702735 | 赢 | 54.574789 |'
- en: '| ... | ... | ... | ... | ... | ... |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| ... | ... | ... | ... | ... | ... |'
- en: '| Green | Jill Stein | 2016 | 1457226 | loss | 1.073699 |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 绿党 | Jill Stein | 2016 | 1457226 | 输 | 1.073699 |'
- en: '| Democratic | Joseph Biden | 2020 | 81268924 | win | 51.311515 |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 民主党 | Joseph Biden | 2020 | 81268924 | 赢 | 51.311515 |'
- en: '| Republican | Donald Trump | 2020 | 74216154 | loss | 46.858542 |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 共和党 | 唐纳德·特朗普 | 2020 | 74216154 | 失败 | 46.858542 |'
- en: '| Libertarian | Jo Jorgensen | 2020 | 1865724 | loss | 1.177979 |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 自由党 | 乔·乔尔根森 | 2020 | 1865724 | 失败 | 1.177979 |'
- en: '| Green | Howard Hawkins | 2020 | 405035 | loss | 0.255731 |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| 绿党 | 霍华德·霍金斯 | 2020 | 405035 | 失败 | 0.255731 |'
- en: 182 rows × 5 columns
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 182行×5列
- en: And, if we’d like, we can revert the index back to the default list of integers.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，我们可以将索引恢复为默认的整数列表。
- en: '[PRE36]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: It is also important to note that the row labels that constitute an index don’t
    have to be unique. While index values can be unique and numeric, acting as a row
    number, they can also be named and non-unique.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意的是，构成索引的行标签不一定是唯一的。虽然索引值可以是唯一的和数字的，充当行号，但它们也可以是命名的和非唯一的。
- en: Here we see unique and numeric index values. ![](../Images/f12fc1e7917cdce0aca504119bf287a0.png)
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们看到唯一和数字的索引值。![](../Images/f12fc1e7917cdce0aca504119bf287a0.png)
- en: However, here the index values here are non-unique. ![](../Images/a476e7c54361934e2d420fddae178c9d.png)
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这里的索引值是非唯一的。![](../Images/a476e7c54361934e2d420fddae178c9d.png)
- en: '2.3 `DataFrame` Attributes: Index, Columns, and Shape'
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3 `DataFrame`属性：索引、列和形状
- en: On the other hand, column names in a `DataFrame` are almost always unique. Looking
    back to the `elections` dataset, it wouldn’t make sense to have two columns named
    “Candidate”.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`DataFrame`中的列名几乎总是唯一的。回顾`elections`数据集，有两列命名为“Candidate”是没有意义的。
- en: Sometimes, you’ll want to extract these different values, in particular, the
    list of row and column labels.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能希望提取这些不同的值，特别是行和列标签的列表。
- en: 'For index/row labels, use `DataFrame.index`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 对于索引/行标签，请使用`DataFrame.index`：
- en: '[PRE38]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'For column labels, use `DataFrame.columns`:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 对于列标签，请使用`DataFrame.columns`：
- en: '[PRE40]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'And for the shape of the DataFrame, we can use `DataFrame.shape`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 对于DataFrame的形状，我们可以使用`DataFrame.shape`：
- en: '[PRE42]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 2.4 Slicing in `DataFrame`s
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.4 `DataFrame`中的切片
- en: Now that we’ve learned more about `DataFrame`s, let’s dive deeper into their
    capabilities.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经更多地了解了`DataFrame`，让我们深入了解它们的功能。
- en: The API (Application Programming Interface) for the `DataFrame` class is enormous.
    In this section, we’ll discuss several methods of the `DataFrame` API that allow
    us to extract subsets of data.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`DataFrame`类的API（应用程序编程接口）是庞大的。在本节中，我们将讨论`DataFrame` API的几种方法，这些方法允许我们提取数据子集。'
- en: The simplest way to manipulate a `DataFrame` is to extract a subset of rows
    and columns, known as **slicing**.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 操作`DataFrame`最简单的方法是提取行和列的子集，称为**切片**。
- en: 'Common ways we may want to extract data are grabbing:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能希望提取数据的常见方式包括：
- en: The first or last `n` rows in the `DataFrame`.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataFrame`中的第一行或最后一行。'
- en: Data with a certain label.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有特定标签的数据。
- en: Data at a certain position.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定位置的数据。
- en: 'We will do so with four primary methods of the DataFrame class:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用DataFrame类的四种主要方法：
- en: '`.head` and `.tail`'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.head`和`.tail`'
- en: '`.loc`'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.loc`'
- en: '`.iloc`'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.iloc`'
- en: '`[]`'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[]`'
- en: 2.4.1 Extracting data with `.head` and `.tail`
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4.1 使用`.head`和`.tail`提取数据
- en: The simplest scenario in which we want to extract data is when we simply want
    to select the first or last few rows of the `DataFrame`.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望提取数据的最简单的情况是当我们只想选择`DataFrame`的前几行或最后几行时。
- en: To extract the first `n` rows of a DataFrame `df`, we use the syntax `df.head(n)`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 要提取DataFrame `df`的前`n`行，我们使用语法`df.head(n)`。
- en: '[PRE44]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '|  | Year | Candidate | Party | Popular vote | Result | % |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '|  | 年份 | 候选人 | 党派 | 普选票 | 结果 | % |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| 0 | 1824 | Andrew Jackson | Democratic-Republican | 151271 | loss | 57.210122
    |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1824 | 安德鲁·杰克逊 | 民主共和党 | 151271 | 失败 | 57.210122 |'
- en: '| 1 | 1824 | John Quincy Adams | Democratic-Republican | 113142 | win | 42.789878
    |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1824 | 约翰·昆西·亚当斯 | 民主共和党 | 113142 | 胜利 | 42.789878 |'
- en: '| 2 | 1828 | Andrew Jackson | Democratic | 642806 | win | 56.203927 |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1828 | 安德鲁·杰克逊 | 民主党 | 642806 | 胜利 | 56.203927 |'
- en: '| 3 | 1828 | John Quincy Adams | National Republican | 500897 | loss | 43.796073
    |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 1828 | 约翰·昆西·亚当斯 | 国家共和党 | 500897 | 失败 | 43.796073 |'
- en: '| 4 | 1832 | Andrew Jackson | Democratic | 702735 | win | 54.574789 |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 1832 | 安德鲁·杰克逊 | 民主党 | 702735 | 胜利 | 54.574789 |'
- en: Similarly, calling `df.tail(n)` allows us to extract the last `n` rows of the
    DataFrame.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，调用`df.tail(n)`允许我们提取DataFrame的最后`n`行。
- en: '[PRE45]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '|  | Year | Candidate | Party | Popular vote | Result | % |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '|  | 年份 | 候选人 | 党派 | 普选票 | 结果 | % |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| 177 | 2016 | Jill Stein | Green | 1457226 | loss | 1.073699 |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| 177 | 2016 | 吉尔·斯坦 | 绿党 | 1457226 | 失败 | 1.073699 |'
- en: '| 178 | 2020 | Joseph Biden | Democratic | 81268924 | win | 51.311515 |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| 178 | 2020 | 约瑟夫·拜登 | 民主党 | 81268924 | 胜利 | 51.311515 |'
- en: '| 179 | 2020 | Donald Trump | Republican | 74216154 | loss | 46.858542 |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| 179 | 2020 | 唐纳德·特朗普 | 共和党 | 74216154 | 失败 | 46.858542 |'
- en: '| 180 | 2020 | Jo Jorgensen | Libertarian | 1865724 | loss | 1.177979 |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| 180 | 2020 | 乔·乔尔根森 | 自由党 | 1865724 | 失败 | 1.177979 |'
- en: '| 181 | 2020 | Howard Hawkins | Green | 405035 | loss | 0.255731 |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| 181 | 2020 | 霍华德·霍金斯 | 绿党 | 405035 | 失败 | 0.255731 |'
- en: '2.4.2 Label-based Extraction: Indexing with `.loc`'
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4.2 基于标签的提取：使用`.loc`进行索引
- en: For the more complex task of extracting data with specific column or index labels,
    we can use `.loc`. The `.loc` accessor allows us to specify the ***labels*** of
    rows and columns we wish to extract. The **labels** (commonly referred to as the
    **indices**) are the bold text on the far *left* of a DataFrame, while the **column
    labels** are the column names found at the *top* of a DataFrame.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用特定列或索引标签提取数据的更复杂任务，我们可以使用`.loc`。`.loc`访问器允许我们指定我们希望提取的行和列的***标签***。**标签**（通常称为**索引**）是DataFrame最左边的粗体文本，而**列标签**是DataFrame顶部的列名。
- en: '![](../Images/9497a9dbb79a7a5cd6184d632aa98bd6.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9497a9dbb79a7a5cd6184d632aa98bd6.png)'
- en: To grab data with `.loc`, we must specify the row and column label(s) where
    the data exists. The row labels are the first argument to the `.loc` function;
    the column labels are the second.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`.loc`获取数据时，我们必须指定数据所在的行和列标签。行标签是`.loc`函数的第一个参数；列标签是第二个参数。
- en: 'Arguments to `.loc` can be:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`.loc`的参数可以是：'
- en: A single value.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个单一的值。
- en: A slice.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个切片。
- en: A list.
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个列表。
- en: For example, to select a single value, we can select the row labeled `0` and
    the column labeled `Candidate` from the `elections` `DataFrame`.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要选择单个值，我们可以从`elections` `DataFrame`中选择标记为`0`的行和标记为`Candidate`的列。
- en: '[PRE46]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Keep in mind that passing in just one argument as a single value will produce
    a `Series`. Below, we’ve extracted a subset of the `"Popular vote"` column as
    a `Series`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，只传入一个参数作为单个值将产生一个`Series`。下面，我们提取了`"Popular vote"`列的子集作为`Series`。
- en: '[PRE48]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: To select *multiple* rows and columns, we can use Python slice notation. Here,
    we select the rows from labels `0` to `3` and the columns from labels `"Year"`
    to `"Popular vote"`.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择*多个*行和列，我们可以使用Python切片表示法。在这里，我们选择从标签`0`到`3`的行和从标签`"Year"`到`"Popular vote"`的列。
- en: '[PRE50]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '|  | Year | Candidate | Party | Popular vote |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '|  | 年份 | 候选人 | 党派 | 普选票数 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| 0 | 1824 | Andrew Jackson | Democratic-Republican | 151271 |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1824 | Andrew Jackson | 民主共和党 | 151271 |'
- en: '| 1 | 1824 | John Quincy Adams | Democratic-Republican | 113142 |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1824 | 约翰·昆西·亚当斯 | 民主共和党 | 113142 |'
- en: '| 2 | 1828 | Andrew Jackson | Democratic | 642806 |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1828 | Andrew Jackson | 民主党 | 642806 |'
- en: '| 3 | 1828 | John Quincy Adams | National Republican | 500897 |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 1828 | 约翰·昆西·亚当斯 | 国家共和党 | 500897 |'
- en: Suppose that instead, we want to extract *all* column values for the first four
    rows in the `elections` DataFrame. The shorthand `:` is useful for this.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 假设相反，我们想要提取`elections` DataFrame中前四行的*所有*列值。这时，缩写`:`就很有用。
- en: '[PRE51]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '|  | Year | Candidate | Party | Popular vote | Result | % |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '|  | 年份 | 候选人 | 党派 | 普选票数 | 结果 | % |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| 0 | 1824 | Andrew Jackson | Democratic-Republican | 151271 | loss | 57.210122
    |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1824 | Andrew Jackson | 民主共和党 | 151271 | 输 | 57.210122 |'
- en: '| 1 | 1824 | John Quincy Adams | Democratic-Republican | 113142 | win | 42.789878
    |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1824 | 约翰·昆西·亚当斯 | 民主共和党 | 113142 | 赢 | 42.789878 |'
- en: '| 2 | 1828 | Andrew Jackson | Democratic | 642806 | win | 56.203927 |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1828 | Andrew Jackson | 民主党 | 642806 | 赢 | 56.203927 |'
- en: '| 3 | 1828 | John Quincy Adams | National Republican | 500897 | loss | 43.796073
    |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 1828 | 约翰·昆西·亚当斯 | 国家共和党 | 500897 | 输 | 43.796073 |'
- en: We can use the same shorthand to extract all rows.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用相同的缩写来提取所有行。
- en: '[PRE52]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '|  | Year | Candidate | Result |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '|  | 年份 | 候选人 | 结果 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 0 | 1824 | Andrew Jackson | loss |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1824 | Andrew Jackson | 输 |'
- en: '| 1 | 1824 | John Quincy Adams | win |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1824 | 约翰·昆西·亚当斯 | 赢 |'
- en: '| 2 | 1828 | Andrew Jackson | win |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1828 | Andrew Jackson | 赢 |'
- en: '| 3 | 1828 | John Quincy Adams | loss |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 1828 | 约翰·昆西·亚当斯 | 输 |'
- en: '| 4 | 1832 | Andrew Jackson | win |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 1832 | Andrew Jackson | 赢 |'
- en: '| ... | ... | ... | ... |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| ... | ... | ... | ... |'
- en: '| 177 | 2016 | Jill Stein | loss |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| 177 | 2016 | 吉尔·斯坦 | 输 |'
- en: '| 178 | 2020 | Joseph Biden | win |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| 178 | 2020 | 乔·拜登 | 赢 |'
- en: '| 179 | 2020 | Donald Trump | loss |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| 179 | 2020 | 唐纳德·特朗普 | 输 |'
- en: '| 180 | 2020 | Jo Jorgensen | loss |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| 180 | 2020 | 乔·乔尔根森 | 输 |'
- en: '| 181 | 2020 | Howard Hawkins | loss |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| 181 | 2020 | 霍华德·霍金斯 | 输 |'
- en: 182 rows × 3 columns
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 182行×3列
- en: There are a couple of things we should note. Firstly, unlike conventional Python,
    `pandas` allows us to slice string values (in our example, the column labels).
    Secondly, slicing with `.loc` is *inclusive*. Notice how our resulting `DataFrame`
    includes every row and column between and including the slice labels we specified.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 有几件事情我们应该注意。首先，与传统的Python不同，`pandas`允许我们切片字符串值（在我们的例子中，是列标签）。其次，使用`.loc`进行切片是*包含*的。请注意，我们的结果`DataFrame`包括我们指定的切片标签之间和包括这些标签的每一行和列。
- en: Equivalently, we can use a list to obtain multiple rows and columns in our `elections`
    DataFrame.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以使用列表在`elections` DataFrame中获取多行和多列。
- en: '[PRE53]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '|  | Year | Candidate | Party | Popular vote |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '|  | 年份 | 候选人 | 党派 | 普选票数 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| 0 | 1824 | Andrew Jackson | Democratic-Republican | 151271 |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1824 | Andrew Jackson | 民主共和党 | 151271 |'
- en: '| 1 | 1824 | John Quincy Adams | Democratic-Republican | 113142 |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1824 | 约翰·昆西·亚当斯 | 民主共和党 | 113142 |'
- en: '| 2 | 1828 | Andrew Jackson | Democratic | 642806 |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1828 | Andrew Jackson | 民主党 | 642806 |'
- en: '| 3 | 1828 | John Quincy Adams | National Republican | 500897 |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 1828 | 约翰·昆西·亚当斯 | 国家共和党 | 500897 |'
- en: Lastly, we can interchange list and slicing notation.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以互换列表和切片表示法。
- en: '[PRE54]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '|  | Year | Candidate | Party | Popular vote | Result | % |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '|  | 年份 | 候选人 | 党派 | 普选票数 | 结果 | % |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| 0 | 1824 | Andrew Jackson | Democratic-Republican | 151271 | loss | 57.210122
    |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1824 | Andrew Jackson | 民主共和党 | 151271 | 输 | 57.210122 |'
- en: '| 1 | 1824 | John Quincy Adams | Democratic-Republican | 113142 | win | 42.789878
    |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1824 | 约翰·昆西·亚当斯 | 民主共和党 | 113142 | 赢 | 42.789878 |'
- en: '| 2 | 1828 | Andrew Jackson | Democratic | 642806 | win | 56.203927 |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1828 | Andrew Jackson | 民主党 | 642806 | 赢 | 56.203927 |'
- en: '| 3 | 1828 | John Quincy Adams | National Republican | 500897 | loss | 43.796073
    |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 1828 | 约翰·昆西·亚当斯 | 国家共和党 | 500897 | 输 | 43.796073 |'
- en: '2.4.3 Integer-based Extraction: Indexing with `.iloc`'
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4.3 基于整数的提取：使用`.iloc`进行索引
- en: 'Slicing with `.iloc` works similarly to `.loc`. However, `.iloc` uses the *index
    positions* of rows and columns rather than the labels (think to yourself: **l**oc
    uses **l**ables; **i**loc uses **i**ndices). The arguments to the `.iloc` function
    also behave similarly — single values, lists, indices, and any combination of
    these are permitted.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`.iloc`进行切片与`.loc`类似。但是，`.iloc`使用的是行和列的*索引位置*，而不是标签（想一想：**l**oc使用**l**abels；**i**loc使用**i**ndices）。`.iloc`函数的参数也类似地行为
    —— 允许单个值、列表、索引和这些的任意组合。
- en: 'Let’s begin reproducing our results from above. We’ll begin by selecting the
    first presidential candidate in our `elections` DataFrame:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始重现上面的结果。我们将从我们的`elections` DataFrame中选择第一个总统候选人开始：
- en: '[PRE55]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Notice how the first argument to both `.loc` and `.iloc` are the same. This
    is because the row with a label of 0 is conveniently in the \(0^{th}\) (equivalently,
    the first position) of the `elections` DataFrame. Generally, this is true of any
    DataFrame where the row labels are incremented in ascending order from 0.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，`.loc`和`.iloc`的第一个参数是相同的。这是因为标签为0的行恰好在`elections` DataFrame的\(0^{th}\)（或者说第一个位置）上。通常情况下，任何DataFrame中的行标签都是从0开始递增的，这一点是正确的。 '
- en: And, as before, if we were to pass in only one single value argument, our result
    would be a `Series`.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，就像以前一样，如果我们只传入一个单一的值参数，我们的结果将是一个`Series`。
- en: '[PRE57]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: However, when we select the first four rows and columns using `.iloc`, we notice
    something.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们使用`.iloc`选择前四行和列时，我们注意到了一些东西。
- en: '[PRE59]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '|  | Year | Candidate | Party | Popular vote |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '|  | 年份 | 候选人 | 党派 | 票数 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| 0 | 1824 | Andrew Jackson | Democratic-Republican | 151271 |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1824 | Andrew Jackson | 民主共和党 | 151271 |'
- en: '| 1 | 1824 | John Quincy Adams | Democratic-Republican | 113142 |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1824 | John Quincy Adams | 民主共和党 | 113142 |'
- en: '| 2 | 1828 | Andrew Jackson | Democratic | 642806 |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1828 | Andrew Jackson | 民主党 | 642806 |'
- en: '| 3 | 1828 | John Quincy Adams | National Republican | 500897 |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 1828 | John Quincy Adams | 国家共和党 | 500897 |'
- en: Slicing is no longer inclusive in `.iloc` — it’s *exclusive*. In other words,
    the right end of a slice is not included when using `.iloc`. This is one of the
    subtleties of `pandas` syntax; you will get used to it with practice.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 切片在`.iloc`中不再是包容的——它是*排他的*。换句话说，使用`.iloc`时，切片的右端点不包括在内。这是`pandas`语法的微妙之处之一；通过练习你会习惯的。
- en: List behavior works just as expected.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 列表行为与预期的一样。
- en: '[PRE60]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '|  | Year | Candidate | Party | Popular vote |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '|  | 年份 | 候选人 | 党派 | 票数 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| 0 | 1824 | Andrew Jackson | Democratic-Republican | 151271 |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1824 | Andrew Jackson | 民主共和党 | 151271 |'
- en: '| 1 | 1824 | John Quincy Adams | Democratic-Republican | 113142 |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1824 | John Quincy Adams | 民主共和党 | 113142 |'
- en: '| 2 | 1828 | Andrew Jackson | Democratic | 642806 |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1828 | Andrew Jackson | 民主党 | 642806 |'
- en: '| 3 | 1828 | John Quincy Adams | National Republican | 500897 |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 1828 | John Quincy Adams | 国家共和党 | 500897 |'
- en: And just like with `.loc`, we can use a colon with `.iloc` to extract all rows
    or columns.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 就像使用`.loc`一样，我们可以使用冒号与`.iloc`一起提取所有行或列。
- en: '[PRE61]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '|  | Year | Candidate | Party |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '|  | 年份 | 候选人 | 党派 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 0 | 1824 | Andrew Jackson | Democratic-Republican |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1824 | Andrew Jackson | 民主共和党 |'
- en: '| 1 | 1824 | John Quincy Adams | Democratic-Republican |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1824 | John Quincy Adams | 民主共和党 |'
- en: '| 2 | 1828 | Andrew Jackson | Democratic |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1828 | Andrew Jackson | 民主党 |'
- en: '| 3 | 1828 | John Quincy Adams | National Republican |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 1828 | John Quincy Adams | 国家共和党 |'
- en: '| 4 | 1832 | Andrew Jackson | Democratic |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 1832 | Andrew Jackson | 民主党 |'
- en: '| ... | ... | ... | ... |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| ... | ... | ... | ... |'
- en: '| 177 | 2016 | Jill Stein | Green |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| 177 | 2016 | Jill Stein | 绿党 |'
- en: '| 178 | 2020 | Joseph Biden | Democratic |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| 178 | 2020 | Joseph Biden | 民主党 |'
- en: '| 179 | 2020 | Donald Trump | Republican |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| 179 | 2020 | Donald Trump | 共和党 |'
- en: '| 180 | 2020 | Jo Jorgensen | Libertarian |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| 180 | 2020 | Jo Jorgensen | 自由党 |'
- en: '| 181 | 2020 | Howard Hawkins | Green |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| 181 | 2020 | Howard Hawkins | 绿党 |'
- en: 182 rows × 3 columns
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 182行×3列
- en: 'This discussion begs the question: When should we use `.loc` vs. `.iloc`? In
    most cases, `.loc` is generally safer to use. You can imagine `.iloc` may return
    incorrect values when applied to a dataset where the ordering of data can change.
    However, `.iloc` can still be useful — for example, if you are looking at a `DataFrame`
    of sorted movie earnings and want to get the median earnings for a given year,
    you can use `.iloc` to index into the middle.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 这个讨论引出了一个问题：我们什么时候应该使用`.loc`和`.iloc`？在大多数情况下，`.loc`通常更安全。你可以想象，当应用于数据集的顺序可能会改变时，`.iloc`可能会返回不正确的值。然而，`.iloc`仍然是有用的——例如，如果你正在查看一个排序好的电影收入的`DataFrame`，并且想要得到给定年份的收入中位数，你可以使用`.iloc`来索引到中间。
- en: 'Overall, it is important to remember that:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，重要的是要记住：
- en: '`.loc` performances **l**abel-based extraction.'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.loc`执行**l**abel-based提取。'
- en: '`.iloc` performs **i**nteger-based extraction.'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.iloc`执行**i**nteger-based提取。'
- en: '2.4.4 Context-dependent Extraction: Indexing with `[]`'
  id: totrans-362
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2.4.4 上下文相关的提取：使用`[]`进行索引
- en: 'The `[]` selection operator is the most baffling of all, yet the most commonly
    used. It only takes a single argument, which may be one of the following:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`[]`选择运算符是最令人困惑的，但也是最常用的。它只接受一个参数，可以是以下之一：'
- en: A slice of row numbers.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一系列行号。
- en: A list of column labels.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一系列列标签。
- en: A single-column label.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单列标签。
- en: That is, `[]` is *context-dependent*. Let’s see some examples.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，`[]`是*上下文相关的*。让我们看一些例子。
- en: 2.4.4.1 A slice of row numbers
  id: totrans-368
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.4.4.1 一系列行号
- en: Say we wanted the first four rows of our `elections` DataFrame.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要我们的`elections` DataFrame的前四行。
- en: '[PRE62]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '|  | Year | Candidate | Party | Popular vote | Result | % |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '|  | 年份 | 候选人 | 党派 | 票数 | 结果 | % |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| 0 | 1824 | Andrew Jackson | Democratic-Republican | 151271 | loss | 57.210122
    |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1824 | Andrew Jackson | 民主共和党 | 151271 | 失败 | 57.210122 |'
- en: '| 1 | 1824 | John Quincy Adams | Democratic-Republican | 113142 | win | 42.789878
    |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1824 | John Quincy Adams | 民主共和党 | 113142 | 胜利 | 42.789878 |'
- en: '| 2 | 1828 | Andrew Jackson | Democratic | 642806 | win | 56.203927 |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1828 | Andrew Jackson | 民主党 | 642806 | 胜利 | 56.203927 |'
- en: '| 3 | 1828 | John Quincy Adams | National Republican | 500897 | loss | 43.796073
    |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 1828 | John Quincy Adams | 国家共和党 | 500897 | 失败 | 43.796073 |'
- en: 2.4.4.2 A list of column labels
  id: totrans-377
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.4.4.2 一系列列标签
- en: Suppose we now want the first four columns.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们现在想要前四列。
- en: '[PRE63]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '|  | Year | Candidate | Party | Popular vote |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '|  | 年份 | 候选人 | 党派 | 票数 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| 0 | 1824 | Andrew Jackson | Democratic-Republican | 151271 |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 1824 | Andrew Jackson | 民主共和党 | 151271 |'
- en: '| 1 | 1824 | John Quincy Adams | Democratic-Republican | 113142 |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 1824 | John Quincy Adams | 民主共和党 | 113142 |'
- en: '| 2 | 1828 | Andrew Jackson | Democratic | 642806 |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 1828 | Andrew Jackson | 民主党 | 642806 |'
- en: '| 3 | 1828 | John Quincy Adams | National Republican | 500897 |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 1828 | John Quincy Adams | 国家共和党 | 500897 |'
- en: '| 4 | 1832 | Andrew Jackson | Democratic | 702735 |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 1832 | Andrew Jackson | 民主党 | 702735 |'
- en: '| ... | ... | ... | ... | ... |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| ... | ... | ... | ... | ... |'
- en: '| 177 | 2016 | Jill Stein | Green | 1457226 |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| 177 | 2016 | Jill Stein | 绿党 | 1457226 |'
- en: '| 178 | 2020 | Joseph Biden | Democratic | 81268924 |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| 178 | 2020 | Joseph Biden | 民主党 | 81268924 |'
- en: '| 179 | 2020 | Donald Trump | Republican | 74216154 |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
  zh: '| 179 | 2020 | Donald Trump | 共和党 | 74216154 |'
- en: '| 180 | 2020 | Jo Jorgensen | Libertarian | 1865724 |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
  zh: '| 180 | 2020 | Jo Jorgensen | 自由党 | 1865724 |'
- en: '| 181 | 2020 | Howard Hawkins | Green | 405035 |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| 181 | 2020 | Howard Hawkins | 绿党 | 405035 |'
- en: 182 rows × 4 columns
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 182行×4列
- en: 2.4.4.3 A single-column label
  id: totrans-394
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2.4.4.3 单列标签
- en: Lastly, `[]` allows us to extract only the `Candidate` column.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`[]`允许我们仅提取`Candidate`列。
- en: '[PRE64]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The output is a `Series`! In this course, we’ll become very comfortable with
    `[]`, especially for selecting columns. In practice, `[]` is much more common
    than `.loc`, especially since it is far more concise.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是一个`Series`！在本课程中，我们将非常熟悉`[]`，特别是用于选择列。在实践中，`[]`比`.loc`更常见，特别是因为它更加简洁。
- en: 2.5 Parting Note
  id: totrans-399
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.5 结语
- en: The `pandas` library is enormous and contains many useful functions. Here is
    a link to [documentation](https://pandas.pydata.org/docs/). We certainly don’t
    expect you to memorize each and every method of the library.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas`库非常庞大，包含许多有用的函数。这是一个指向[文档](https://pandas.pydata.org/docs/)的链接。我们当然不指望您记住库中的每一个方法。'
- en: The introductory Data 100 `pandas` lectures will provide a high-level view of
    the key data structures and methods that will form the foundation of your `pandas`
    knowledge. A goal of this course is to help you build your familiarity with the
    real-world programming practice of …Googling! Answers to your questions can be
    found in documentation, Stack Overflow, etc. Being able to search for, read, and
    implement documentation is an important life skill for any data scientist.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 入门级的Data 100 `pandas` 讲座将提供对关键数据结构和方法的高层次视图，这些将构成您`pandas`知识的基础。本课程的目标是帮助您建立对真实世界编程实践的熟悉度……谷歌搜索！您的问题的答案可以在文档、Stack
    Overflow等地方找到。能够搜索、阅读和实施文档是任何数据科学家的重要生活技能。
- en: With that, we will move on to Pandas II.**
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们将继续学习Pandas II。

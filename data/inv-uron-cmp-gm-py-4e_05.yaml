- en: 4 A JOKE-TELLING PROGRAM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4 个笑话程序
- en: 原文：[https://inventwithpython.com/invent4thed/chapter4.html](https://inventwithpython.com/invent4thed/chapter4.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://inventwithpython.com/invent4thed/chapter4.html](https://inventwithpython.com/invent4thed/chapter4.html)
- en: '[Prev: Chapter 3 - Guess the Number](chapter3.html) | [Next: Chapter 5 - Dragon
    Realm](chapter5.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一页：第3章 - 猜数字](chapter3.html) | [下一页：第5章 - 龙之境界](chapter5.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
- en: This chapter’s program tells a few jokes to the user and demonstrates more advanced
    ways to use strings with the `print()` function. Most of the games in this book
    will have simple text for input and output. The input is typed on the keyboard
    by the user, and the output is the text displayed on the screen.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的程序向用户讲述了一些笑话，并演示了更高级的使用字符串与`print()`函数的方法。本书中的大多数游戏都将使用简单的文本进行输入和输出。输入是用户在键盘上输入的文本，输出是显示在屏幕上的文本。
- en: '**TOPICS COVERED IN THIS CHAPTER**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**本章涵盖的主题**'
- en: • Escape characters
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: • 转义字符
- en: • Using single quotes and double quotes for strings
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用单引号和双引号表示字符串
- en: • Using `print()`’s `end` keyword parameter to skip newlines
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用`print()`的`end`关键字参数来跳过换行
- en: You’ve already learned how to display simple text output with the `print()`
    function. Now let’s take a deeper look at how strings and `print()` work in Python.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了如何使用`print()`函数显示简单的文本输出。现在让我们更深入地了解Python中字符串和`print()`的工作原理。
- en: '**Sample Run of Jokes**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**笑话示例运行**'
- en: 'Here’s what the user sees when they run the Jokes program:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户运行笑话程序时，他们看到的是这样的：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Source Code for Jokes**'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**笑话的源代码**'
- en: Open a new file editor window by clicking **File** ![image](../Images/6213f577c15feb006bdab7161d1cfc75.png)
    **New Window**. In the blank window that appears, enter the source code and save
    it as *jokes.py*. Then run the program by pressing F5.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**文件**![image](../Images/6213f577c15feb006bdab7161d1cfc75.png)**新建窗口**，打开一个新的文件编辑器窗口。在出现的空白窗口中，输入源代码并将其保存为*jokes.py*。然后按F5运行程序。
- en: '![image](../Images/fc9e0c0a6ceba9545989bc0fd61aabe1.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/fc9e0c0a6ceba9545989bc0fd61aabe1.png)'
- en: If you get errors after entering this code, compare the code you typed to the
    book’s code with the online diff tool at *[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输入这段代码后出现错误，请使用在线diff工具将你输入的代码与书中的代码进行比较，网址为*[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*。
- en: '*jokes.py*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*jokes.py*'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**How the Code Works**'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**代码的工作原理**'
- en: 'Let’s start by looking at the first four lines of code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看一下代码的前四行：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Lines 1 and 3 use the `print()` function call to ask and give the answer to
    the first joke. You don’t want the user to immediately read the joke’s punchline,
    so there’s a call to the `input()` function after the first `print()` instance.
    The user will read the joke, press ENTER, and then read the punchline.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第1行和第3行使用`print()`函数调用来询问并给出第一个笑话的答案。你不希望用户立即看到笑话的结尾，所以在第一个`print()`后有一个对`input()`函数的调用。用户会看到笑话，按ENTER键，然后看到结尾。
- en: The user can still type in a string and press ENTER, but this returned string
    isn’t being stored in any variable. The program will just forget about it and
    move to the next line of code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 用户仍然可以输入一个字符串并按ENTER键，但是这个返回的字符串并没有被存储在任何变量中。程序会忘记它并移到下一行代码。
- en: The last `print()` function call doesn’t have a string argument. This tells
    the program to just print a blank line. Blank lines are useful to keep the text
    from looking crowded.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个`print()`函数调用没有字符串参数。这告诉程序只打印一个空行。空行有助于保持文本不显得拥挤。
- en: '**Escape Characters**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**转义字符**'
- en: 'Lines 5 to 8 print the question and answer to the next joke:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第5到8行打印了下一个笑话的问题和答案：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On line 5, there’s a backslash right before the single quote: `\''`. (Note
    that `\` is a backslash, and `/` is a forward slash.) This backslash tells you
    that the letter right after it is an escape character. An *escape character* lets
    you print special characters that are difficult or impossible to enter into the
    source code, such as the single quote in a string value that begins and ends with
    single quotes.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在第5行，单引号前面有一个反斜杠：`\'`。（请注意，`\`是反斜杠，`/`是正斜杠。）这个反斜杠告诉你它后面的字母是一个转义字符。*转义字符*允许你打印出在源代码中难以或不可能输入的特殊字符，比如以单引号开头和结尾的字符串值中的单引号。
- en: In this case, if we didn’t include the backslash, the single quote in `astronaut\'s`
    would be interpreted as the end of the string. But this quote needs to be *part
    of* the string. The escaped single quote tells Python that it should include the
    single quote in the string.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果我们不包括反斜杠，`astronaut\'s`中的单引号会被解释为字符串的结束。但是这个引号需要*作为*字符串的一部分。转义的单引号告诉Python应该将单引号包含在字符串中。
- en: But what if you actually want to display a backslash?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果你真的想显示一个反斜杠呢？
- en: 'Switch from your *jokes.py* program to the interactive shell and enter this
    `print()` statement:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从你的*jokes.py*程序切换到交互式shell，并输入这个`print()`语句：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This instruction didn’t print a backslash because the `t` in `teal` was interpreted
    as an escape character since it came after a backslash. The `\t` simulates pressing
    TAB on your keyboard.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这条指令没有打印出反斜杠，因为`teal`中的`t`被解释为转义字符，因为它在反斜杠后面。`\t`模拟了在键盘上按下TAB键。
- en: 'This line will give you the correct output:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码将给出正确的输出：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This way the `\\` is a backslash character, and there is no `\t` to interpret
    as TAB.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这样`\\`就是一个反斜杠字符，而没有`\t`被解释为TAB。
- en: '[Table 4-1](#calibre_link-817) is a list of some escape characters in Python,
    including `\n`, which is the newline escape character that you have used before.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[表4-1](#calibre_link-817)是Python中一些转义字符的列表，包括`\n`，这是换行转义字符，你之前用过。'
- en: '**Table 4-1:** Escape Characters'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**表4-1：**转义字符'
- en: '| **Escape character** | **What is actually printed** |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| **转义字符** | **实际打印的内容** |'
- en: '| --- | --- |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `\\` | Backslash (`\`) |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `\\` | 反斜杠（`\`）|'
- en: '| `\''` | Single quote (`''`) |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `\''` | 单引号（`''`）|'
- en: '| `\"` | Double quote (`"`) |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `\"` | 双引号（`"`）|'
- en: '| `\n` | Newline |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `\n` | 换行 |'
- en: '| `\t` | Tab |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `\t` | 制表符 |'
- en: There are a few more escape characters in Python, but these are the characters
    you will most likely need for creating games.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Python中还有一些其他转义字符，但这些字符是你创建游戏时最有可能需要的字符。
- en: '**Single and Double Quotes**'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**单引号和双引号**'
- en: 'While we’re still in the interactive shell, let’s take a closer look at quotes.
    Strings don’t always have to be between single quotes in Python. You can also
    put them between double quotes. These two lines print the same thing:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们还在交互式shell中时，让我们更仔细地看一下引号。在Python中，字符串并不总是要用单引号括起来的。你也可以用双引号括起来。这两行打印的是相同的内容：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'But you cannot mix quotes. This line will give you an error because it uses
    both quote types at once:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 但你不能混合使用引号。这行会报错，因为它同时使用了两种引号类型：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: I like to use single quotes so I don’t have to hold down SHIFT to type them.
    They’re easier to type, and Python doesn’t care either way.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢使用单引号，这样就不必按住SHIFT键来输入它们。它们更容易输入，而Python也无所谓。
- en: 'Also, note that just as you need the `\''` to have a single quote in a string
    surrounded by single quotes, you need the `\"` to have a double quote in a string
    surrounded by double quotes. Look at this example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请注意，就像你需要在单引号括起的字符串中使用`\'`来表示单引号一样，你需要在双引号括起的字符串中使用`\"`来表示双引号。看这个例子：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You use single quotes to surround the string, so you need to add a backslash
    before the single quote in `Abe\'s`. But the double quotes in `"Sure."` don’t
    need backslashes. The Python interpreter is smart enough to know that if a string
    starts with one type of quote, the other type of quote doesn’t mean the string
    is ending.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你使用单引号来括起字符串，因此你需要在`Abe\'s`的单引号前添加反斜杠。但`"Sure."`中的双引号不需要反斜杠。Python解释器足够聪明，知道如果一个字符串以一种引号开始，另一种引号并不意味着字符串结束。
- en: 'Now check out another example:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看另一个例子：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The string is surrounded in double quotes, so you need to add backslashes for
    all of the double quotes within the string. You don’t need to escape the single
    quote in `can't`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串用双引号括起来，因此你需要为字符串中的所有双引号添加反斜杠。在`can't`中不需要转义单引号。
- en: To summarize, in the single-quote strings, you don’t need to escape double quotes
    but do need to escape single quotes, and in the double-quote strings, you don’t
    need to escape single quotes but do need to escape double quotes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，在单引号字符串中，你不需要转义双引号，但需要转义单引号；在双引号字符串中，你不需要转义单引号，但需要转义双引号。
- en: '**The print() Function’s end Keyword Parameter**'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**print()函数的end关键字参数**'
- en: 'Now let’s go back to *jokes.py* and take a look at lines 9 to 16:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回到*jokes.py*，看一下第9到16行：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Did you notice the second argument in line 15’s `print()` function? Normally,
    `print()` adds a newline character to the end of the string it prints. This is
    why a blank `print()` function will just print a newline. But `print()` can optionally
    have a second parameter: `end`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你注意到了第15行`print()`函数的第二个参数吗？通常，`print()`会在打印的字符串末尾添加一个换行符。这就是为什么空的`print()`函数会打印一个换行符。但`print()`可以选择性地有第二个参数：`end`。
- en: Remember that an argument is the value passed in a function call. The blank
    string passed to `print()` is called a *keyword argument*. The `end` in `end=''`
    is called a *keyword parameter*. To pass a keyword argument to this keyword parameter,
    you must type `end=` before it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，参数是函数调用中传递的值。传递给`print()`的空字符串称为*关键字参数*。`end=''`中的`end`称为*关键字参数*。要将关键字参数传递给这个关键字参数，你必须在它之前输入`end=`。
- en: When we run this section of code, the output is
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这部分代码时，输出是
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Because we passed a blank string to the `end` parameter, the `print()` function
    will add a blank string instead of adding a newline. This is why `'-MOO!'` appears
    next to the previous line, instead of on its own line. There was no newline after
    the `'Interrupting cow wh'` string was printed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们将空字符串传递给了`end`参数，`print()`函数会添加一个空字符串而不是添加一个换行符。这就是为什么`'-MOO!'`出现在前一行的旁边，而不是在自己的一行上。在打印`'Interrupting
    cow wh'`字符串后没有换行符。
- en: '**Summary**'
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: This chapter explores the different ways you can use the `print()` function.
    Escape characters are used for characters that are difficult to type into the
    code with the keyboard. If you want to use special characters in a string, you
    must use a backslash escape character, `\`, followed by another letter for the
    special character. For example, `\n` would be a newline. If your special character
    is a backslash itself, you use `\\`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了使用`print()`函数的不同方式。转义字符用于在代码中使用键盘难以输入的字符。如果你想在字符串中使用特殊字符，你必须使用反斜杠转义字符`\`，后面跟着另一个字母表示特殊字符。例如，`\n`表示换行。如果你的特殊字符是反斜杠本身，你使用`\\`。
- en: The `print()` function automatically appends a newline character to the end
    of a string. Most of the time, this is a helpful shortcut. But sometimes you don’t
    want a newline character. To change this, you can pass a blank string as the keyword
    argument for `print()`’s `end` keyword parameter. For example, to print `spam`
    to the screen without a newline character, you would call `print('spam', end='')`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`print()`函数会自动在字符串末尾添加一个换行符。大多数情况下，这是一个方便的快捷方式。但有时你不想要换行符。要更改这一点，你可以将空字符串作为`print()`的`end`关键字参数的关键字参数传递。例如，要在屏幕上打印`spam`而不带换行符，你可以调用`print(''spam'',
    end='''')`。'
- en: '[Prev: Chapter 3 - Guess the Number](chapter3.html) | [Next: Chapter 5 - Dragon
    Realm](chapter5.html)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一页：第三章 - 猜数字](chapter3.html) | [下一页：第五章 - 龙之境界](chapter5.html)'

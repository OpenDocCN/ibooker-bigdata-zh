- en: 'Processes, Part 1: Introduction'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程，第1部分：介绍
- en: Overview
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: A process is program that is running (kinda). A process is also just one instance
    of that computer program running. Processes have a lot of things at their disposal.
    At the start of each program you get one process, but each program can make more
    processes. In fact, your operating system starts up with only one process and
    all other processes are forked off of that -- all of that is done under the hood
    when booting up.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 进程是正在运行的程序（有点）。进程也只是计算机程序运行的一个实例。进程有很多可用的东西。在每个程序开始时，您会得到一个进程，但每个程序都可以创建更多的进程。事实上，您的操作系统只启动一个进程，所有其他进程都是从那个进程分叉出来的——在启动时都是在后台完成的。
- en: In the beginning
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在开始时
- en: When your operating system starts on a linux machine, there is a process called
    `init.d` that gets created. That process is a special one handling signals, interrupts,
    and a persistence module for certain kernel elements. Whenever you want to make
    a new process, you call `fork` (to be discussed in a later section) and use another
    function to load another program.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的Linux机器上的操作系统启动时，会创建一个名为`init.d`的进程。该进程是一个特殊的进程，处理信号、中断和某些内核元素的持久性模块。每当您想要创建一个新进程时，都会调用`fork`（将在后面的部分讨论）并使用另一个函数来加载另一个程序。
- en: Process Isolation
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进程隔离
- en: Processes are very powerful but they are isolated! That means that by default,
    no process can communicate with another process. This is very important because
    if you have a large system (let's say EWS) then you want some processes to have
    higher privilages (monitoring, admin) than your average user, and one certainly
    doesn't want the average user to be able to bring down the entire system either
    on purpose or accidentally by modifying a process.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 进程非常强大，但它们是隔离的！这意味着默认情况下，没有进程可以与另一个进程通信。这非常重要，因为如果您有一个庞大的系统（比如EWS），那么您希望一些进程具有更高的特权（监控、管理），而您绝对不希望普通用户能够故意或者意外地通过修改进程来使整个系统崩溃。
- en: If I run the following code,
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我运行以下代码，
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: On two different terminals, as you would guess they would both print out 1 not
    2\. Even if we changed the code to do something really hacky (apart from reading
    the memory directly) there would be no way to change another process' state (okay
    maybe [this](https://en.wikipedia.org/wiki/Dirty_COW) but that is getting a little
    too in depth).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个不同的终端上，正如您所猜测的，它们都会打印出1而不是2。即使我们改变代码以执行一些非常巧妙的操作（除了直接读取内存），也没有办法改变另一个进程的状态（好吧，也许[这个](https://en.wikipedia.org/wiki/Dirty_COW)，但那就有点太深入了）。
- en: Process Contents
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进程内容
- en: Memory Layout
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存布局
- en: '![Address Space](../Images/70f6ba3a3d379fcd8d3214846a16c410.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![地址空间](../Images/70f6ba3a3d379fcd8d3214846a16c410.jpg)'
- en: When a process starts, it gets its own address space. Meaning that each process
    gets (for Memory
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个进程启动时，它会得到自己的地址空间。这意味着每个进程都会得到（对于内存
- en: '**A Stack**. The Stack is the place where automatic variable and function call
    return addresses are stored. Every time a new variable is declared, the program
    moves the stack pointer down to reserve space for the variable. This segment of
    the stack is Writable but not executable. If the stack grows too far (meaning
    that it either grows beyond a preset boundary or intersects the heap) you will
    get a stackoverflow most likely resulting in a SEGFAULT or something similar.
    **The stack is statically allocated by default meaning that there is only a certain
    amount of space to which one can write**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**堆栈**。堆栈是存储自动变量和函数调用返回地址的地方。每次声明一个新变量，程序都会将堆栈指针向下移动，以保留变量的空间。堆栈的这一部分是可写的，但不可执行。如果堆栈增长得太远（意味着它要么超出了预设的边界，要么与堆相交），您很可能会得到堆栈溢出，最终导致段错误或类似的错误。**默认情况下，堆栈是静态分配的，这意味着只有一定数量的空间可以写入**'
- en: '**A Heap**. The heap is an expanding region of memory. If you want to allocate
    a large object, it goes here. The heap starts at the top of the text segment and
    grows upward (meaning sometimes when you call `malloc` that it asks the operating
    system to push the heap boundary upward). This area is also Writable but not Executable.
    One can run out of heap memory if the system is constrained or if you run out
    of addresses (more common on a 32bit system).'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**堆**。堆是一个不断扩大的内存区域。如果要分配一个大对象，它就会放在这里。堆从文本段的顶部开始向上增长（这意味着有时当您调用`malloc`时，它会要求操作系统将堆边界向上推）。这个区域也是可写的，但不可执行。如果系统受限或者地址用完了（在32位系统上更常见），就可能用完堆内存。'
- en: '**A Data Segment** This contains all of your globals. This section starts at
    the end of the Text segment and is static in size because the amount of globals
    is known at compile time. This section is Writable but not Executable and there
    isn''t anything else too fancy here.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据段**。这包含了所有的全局变量。这一部分从文本段的末尾开始，大小是静态的，因为全局变量的数量在编译时就已知。这一部分是可写的，但不可执行，没有其他太花哨的东西。'
- en: '**A Text Segment**. This is, arguably, the most important section of the address.
    This is where all your code is stored. Since assembly compiles to 1''s and 0''s,
    this is where the 1''s and 0''s get stored. The program counter moves through
    this segment executing instructions and moving down the next instruction. It is
    important to note that this is the only Executable section of the code. If you
    try to change the code while it''s running, most likely you will segfault (there
    are ways around it but just assume that it segfaults).'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本段**。这可以说是地址中最重要的部分。这是存储所有代码的地方。由于汇编编译成了1和0，这就是1和0存储的地方。程序计数器在这个段中执行指令，并向下移动到下一个指令。重要的是要注意，这是代码中唯一可执行的部分。如果您尝试在运行时更改代码，很可能会导致段错误（虽然有办法绕过，但假设它会导致段错误）。'
- en: Why doesn't it start at zero? It is outside the [scope](https://en.wikipedia.org/wiki/Address_space_layout_randomization)
    of this class but it is for security.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么它不从零开始？这超出了本课程的[范围](https://en.wikipedia.org/wiki/Address_space_layout_randomization)，但这是出于安全考虑。
- en: File Descriptors
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件描述符
- en: '![Fds](../Images/d478b259062697ec8a19b3fa93d75962.svg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![文件描述符](../Images/d478b259062697ec8a19b3fa93d75962.svg)'
- en: As the little zine shows, the OS keeps track of the file descriptors and what
    they point to. We will see later that file descriptors need not point to actual
    files and the OS keeps track of them for you. Also, notice that between processes
    file descriptors may be reused but inside of a process they are unique.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如小册子所示，操作系统跟踪文件描述符及其指向的内容。我们将在后面看到，文件描述符不一定指向实际文件，操作系统会为您跟踪它们。另外，请注意，在进程之间文件描述符可能会被重用，但在进程内部它们是唯一的。
- en: File descriptors also have a notion of position. You can read a file on disk
    completely because the OS keeps track of the position in the file, and that belongs
    to your process as well.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 文件描述符也有位置的概念。您可以完全从磁盘上读取文件，因为操作系统跟踪文件中的位置，并且该位置也属于您的进程。
- en: Security/Permissions
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全/权限
- en: Process Functions/Limitations (Bonus)
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进程功能/限制（奖励）
- en: When you are reviewing for the final, you can come back and see that a process
    also has all of these things. The first time around -- it won't make much sense.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当您复习期末考试时，您可以回来看看进程也具有所有这些东西。第一次看时 - 它可能不太有意义。
- en: Process ID (PID)
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进程ID（PID）
- en: To keep track of all these processes, your operating system gives each process
    a number and that process is called the PID, process ID.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟踪所有这些进程，您的操作系统为每个进程分配一个数字，该进程称为PID，即进程ID。
- en: Processes could also contain
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 进程还可以包含
- en: Mappings
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射
- en: State
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态
- en: File Descriptors
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件描述符
- en: Permissions
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权限
- en: '[Forking, Part 1: Introduction](https://github.com/angrave/SystemProgramming/wiki/Forking%2C-Part-1%3A-Introduction)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[分叉，第1部分：介绍](https://github.com/angrave/SystemProgramming/wiki/Forking%2C-Part-1%3A-Introduction)'

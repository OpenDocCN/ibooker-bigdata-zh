- en: 11 THE BAGELS DEDUCTION GAME
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11 BAGELS推理游戏
- en: 原文：[https://inventwithpython.com/invent4thed/chapter11.html](https://inventwithpython.com/invent4thed/chapter11.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://inventwithpython.com/invent4thed/chapter11.html](https://inventwithpython.com/invent4thed/chapter11.html)
- en: '[Prev: Chapter 10 - Tic-Tac-Toe](chapter10.html) | [Next: Chapter 12 - The
    Cartesian Coordinate System](chapter12.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一章：第10章 - 井字棋](chapter10.html) | [下一章：第12章 - 笛卡尔坐标系](chapter12.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
- en: 'Bagels is a deduction game in which the player tries to guess a random three-digit
    number (with no repeating digits) generated by the computer. After each guess,
    the computer gives the player three types of clues:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Bagels是一个推理游戏，玩家试图猜出计算机生成的随机三位数（不重复数字）。每次猜测后，计算机会给玩家三种类型的线索：
- en: '**Bagels** None of the three digits guessed is in the secret number.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bagels** 猜测的三个数字中没有一个在秘密数字中。'
- en: '**Pico** One of the digits is in the secret number, but the guess has the digit
    in the wrong place.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pico** 一个数字在秘密数字中，但是猜测的数字位置不对。'
- en: '**Fermi** The guess has a correct digit in the correct place.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**费米** 猜测中有一个正确的数字在正确的位置。'
- en: The computer can give multiple clues, which are sorted in alphabetical order.
    If the secret number is 456 and the player’s guess is 546, the clues would be
    “fermi pico pico.” The “fermi” is from the 6 and “pico pico” are from the 4 and
    5.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机可以给出多个线索，这些线索按字母顺序排序。如果秘密数字是456，玩家的猜测是546，线索将是“fermi pico pico”。 “fermi”来自6，“pico
    pico”来自4和5。
- en: In this chapter, you’ll learn a few new methods and functions that come with
    Python. You’ll also learn about augmented assignment operators and string interpolation.
    While they don’t let you do anything you couldn’t do before, they are nice shortcuts
    to make coding easier.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习一些Python提供的新方法和函数。您还将了解增强赋值运算符和字符串插值。虽然它们不能让您做任何以前做不到的事情，但它们是使编码更容易的好快捷方式。
- en: '**TOPICS COVERED IN THIS CHAPTER**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**本章涵盖的主题**'
- en: • The `random.shuffle()` function
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • `random.shuffle()`函数
- en: • Augmented assignment operators, `+=`, `-=`, `*=`, `/=`
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: • 增强赋值运算符，`+=`, `-=`, `*=`, `/=`
- en: • The `sort()` list method
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: • `sort()`列表方法
- en: • The `join()` string method
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: • `join()`字符串方法
- en: • String interpolation
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: • 字符串插值
- en: • The conversion specifier `%s`
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: • 转换说明符`%s`
- en: • Nested loops
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: • 嵌套循环
- en: '**Sample Run of Bagels**'
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Bagels的示例运行**'
- en: Here’s what the user sees when they run the Bagels program. The text the player
    enters is shown in bold.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户运行Bagels程序时，用户看到的文本如下。玩家输入的文本显示为粗体。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Source Code for Bagels**'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Bagels的源代码**'
- en: In a new file, enter the following source code and save it as *bagels.py*. Then
    run the game by pressing F5\. If you get errors, compare the code you typed to
    the book’s code with the online diff tool at *[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个新文件中，输入以下源代码并将其保存为*bagels.py*。然后按F5运行游戏。如果出现错误，请将您输入的代码与书中的代码进行比较，使用在线diff工具*[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*。
- en: '![image](../Images/b4e69b1df0320a5805abf50d4a776e32.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/b4e69b1df0320a5805abf50d4a776e32.png)'
- en: '*bagels.py*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*bagels.py*'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Flowchart for Bagels**'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Bagels的流程图**'
- en: The flowchart in [Figure 11-1](#calibre_link-815) describes what happens in
    this game and the order in which each step can happen.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[图11-1](#calibre_link-815)中的流程图描述了游戏中发生的事情以及每个步骤发生的顺序。'
- en: The flowchart for Bagels is pretty simple. The computer generates a secret number,
    the player tries to guess that number, and the computer gives the player clues
    based on their guess. This happens over and over again until the player either
    wins or loses. After the game finishes, whether the player won or not, the computer
    asks the player whether they want to play again.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Bagels的流程图非常简单。计算机生成一个秘密数字，玩家试图猜出该数字，计算机根据他们的猜测给出线索。这一过程一遍又一遍地进行，直到玩家赢了或输了。游戏结束后，无论玩家赢还是输，计算机都会询问玩家是否想再玩一次。
- en: '![image](../Images/73879ecb6cd745ef8119aea9a9a4de2b.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/73879ecb6cd745ef8119aea9a9a4de2b.png)'
- en: '*Figure 11-1: Flowchart for the Bagels game*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*图11-1：Bagels游戏的流程图*'
- en: '**Importing random and Defining getSecretNum()**'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**导入随机数和定义getSecretNum()**'
- en: At the start of the program, we’ll import the `random` module and set up some
    global variables. Then we’ll define a function named `getSecretNum()`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序开始时，我们将导入`random`模块并设置一些全局变量。然后我们将定义一个名为`getSecretNum()`的函数。
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Instead of using the integer `3` for the number of digits in the answer, we
    use the constant variable `NUM_DIGITS`. The same goes for the number of guesses
    the player gets; we use the constant variable `MAX_GUESS` instead of the integer
    `10`. Now it will be easy to change the number of guesses or secret number digits.
    Just change the values at line 3 or 4, and the rest of the program will still
    work without any more changes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用常量变量`NUM_DIGITS`代替整数`3`作为答案中数字的数量。玩家猜测次数也是一样，我们使用常量变量`MAX_GUESS`代替整数`10`。现在很容易改变猜测次数或秘密数字的数量。只需更改第3行或第4行的值，程序的其余部分仍将正常工作，无需进行其他更改。
- en: The `getSecretNum()` function generates a secret number that contains only unique
    digits. The Bagels game is much more fun if you don’t have duplicate digits in
    the secret number, such as `'244'` or `'333'`. We’ll use some new Python functions
    to make this happen in `getSecretNum()`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`getSecretNum()`函数生成一个只包含唯一数字的秘密数字。如果秘密数字中没有重复的数字，Bagels游戏会更有趣，比如`''244''`或`''333''`。我们将使用一些新的Python函数来实现这一点。'
- en: '**Shuffling a Unique Set of Digits**'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**洗牌一个独特的数字集**'
- en: 'The first two lines of `getSecretNum()` shuffle a set of nonrepeating numbers:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`getSecretNum()`的前两行对一组不重复的数字进行了洗牌：'
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Line 8’s `list(range(10))` evaluates to `[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`, so
    the `numbers` variable contains a list of all 10 digits.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第8行的`list(range(10))`评估为`[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`，因此`numbers`变量包含所有10个数字的列表。
- en: '***Changing List Item Order with the random.shuffle() Function***'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用random.shuffle()函数更改列表项顺序***'
- en: The `random.shuffle()` function randomly changes the order of a list’s items
    (in this case, the list of digits). This function doesn’t return a value but rather
    modifies the list you pass it *in place*. This is similar to the way the `makeMove()`
    function in [Chapter 10](#calibre_link-12)’s Tic-Tac-Toe game modified the list
    it was passed in place, rather than returning a new list with the change. This
    is why you do *not* write code like `numbers = random.shuffle(numbers)`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`random.shuffle()`函数会随机更改列表项的顺序（在本例中是数字列表）。此函数不返回值，而是修改您传递给它的列表*原地*。这类似于[第10章](#calibre_link-12)中的井字棋游戏中的`makeMove()`函数修改了传递给它的列表，而不是返回具有更改的新列表。这就是为什么您*不*编写像`numbers
    = random.shuffle(numbers)`这样的代码。'
- en: 'Try experimenting with the `shuffle()` function by entering the following code
    into the interactive shell:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试通过将以下代码输入交互式shell来尝试使用`shuffle()`函数：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Each time `random.shuffle()` is called on `spam`, the items in the `spam` list
    are shuffled. You’ll see how we use the `shuffle()` function to make a secret
    number next.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每次在`spam`上调用`random.shuffle()`时，`spam`列表中的项目都会被洗牌。您将看到我们如何使用`shuffle()`函数来生成下一个秘密数字。
- en: '***Getting the Secret Number from the Shuffled Digits***'
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***从洗牌后的数字中获取秘密数字***'
- en: 'The secret number will be a string of the first `NUM_DIGITS` digits of the
    shuffled list of integers:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 秘密数字将是洗牌后的整数列表的前`NUM_DIGITS`位的字符串：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `secretNum` variable starts out as a blank string. The `for` loop on line
    11 iterates `NUM_DIGITS` number of times. On each iteration through the loop,
    the integer at index `i` is pulled from the shuffled list, converted to a string,
    and concatenated to the end of `secretNum`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`secretNum`变量最初为空字符串。第11行的`for`循环迭代`NUM_DIGITS`次。在循环的每次迭代中，从洗牌列表中的索引`i`处提取整数，将其转换为字符串，并连接到`secretNum`的末尾。'
- en: For example, if `numbers` refers to the list `[9, 8, 3, 5, 4, 7, 1, 2, 0, 6]`,
    then on the first iteration, `numbers[0]` (that is, `9`) will be passed to `str()`;
    this returns `'9'`, which is concatenated to the end of `secretNum`. On the second
    iteration, the same happens with `numbers[1]` (that is, `8`), and on the third
    iteration the same happens with `numbers[2]` (that is, `3`). The final value of
    `secretNum` that is returned is `'983'`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`numbers`指的是列表`[9, 8, 3, 5, 4, 7, 1, 2, 0, 6]`，那么在第一次迭代中，`numbers[0]`（即`9`）将被传递给`str()`；这将返回`'9'`，它将被连接到`secretNum`的末尾。在第二次迭代中，`numbers[1]`（即`8`）发生了同样的情况，在第三次迭代中，`numbers[2]`（即`3`）也是如此。返回的`secretNum`的最终值是`'983'`。
- en: Notice that `secretNum` in this function contains a string, not an integer.
    This may seem odd, but remember that you cannot concatenate integers. The expression
    `9 + 8 + 3` evaluates to `20`, but what you want is `'9' + '8' + '3'`, which evaluates
    to `'983'`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此函数中的`secretNum`包含一个字符串，而不是整数。这可能看起来很奇怪，但请记住，您不能连接整数。表达式`9 + 8 + 3`计算结果为`20`，但您想要的是`'9'
    + '8' + '3'`，计算结果为`'983'`。
- en: '**Augmented Assignment Operators**'
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**增强赋值运算符**'
- en: 'The `+=` operator on line 12 is one of the *augmented assignment operators*.
    Normally, if you want to add or concatenate a value to a variable, you use code
    that looks like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第12行的`+=`运算符是*增强赋值运算符*之一。通常，如果要将值添加或连接到变量，您将使用类似以下的代码：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The augmented assignment operators are shortcuts that free you from retyping
    the variable name. The following code does the same thing as the previous code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 增强赋值运算符是一种可以使您摆脱重新输入变量名的快捷方式。以下代码与先前的代码执行相同的操作：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There are other augmented assignment operators as well. Enter the following
    into the interactive shell:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他增强赋值运算符。将以下内容输入交互式shell：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The statement `spam –= 2` is the same as the statement `spam = spam – 2`, so
    the expression evaluates to `spam = 42 – 2` and then to `spam = 40`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 语句`spam –= 2`与语句`spam = spam – 2`相同，因此表达式计算结果为`spam = 42 – 2`，然后为`spam = 40`。
- en: 'There are augmented assignment operators for multiplication and division, too:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 还有用于乘法和除法的增强赋值运算符：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The statement `spam *= 3` is the same as `spam = spam * 3`. So, since `spam`
    was set equal to `40` earlier, the full expression would be `spam = 40 * 3`, which
    evaluates to `120`. The expression `spam /= 10` is the same as `spam = spam /
    10`, and `spam = 120 / 10` evaluates to `12.0`. Notice that `spam` becomes a floating
    point number after it’s divided.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 语句`spam *= 3`与`spam = spam * 3`相同。因此，由于`spam`之前设置为`40`，完整表达式将是`spam = 40 * 3`，计算结果为`120`。表达式`spam
    /= 10`与`spam = spam / 10`相同，`spam = 120 / 10`计算结果为`12.0`。请注意，在除法后，`spam`变成了浮点数。
- en: '**Calculating the Clues to Give**'
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**计算要给出的线索**'
- en: The `getClues()` function will return a string with fermi, pico, and bagels
    clues depending on the `guess` and `secretNum` parameters.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`getClues()`函数将根据`guess`和`secretNum`参数返回一个包含fermi、pico和bagels线索的字符串。'
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The most obvious step is to check whether the guess is the same as the secret
    number, which we do in line 17\. In that case, line 18 returns `'You got it!'`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最明显的步骤是检查猜测是否与秘密数字相同，我们在第17行中进行了检查。在这种情况下，第18行返回`'You got it!'`。
- en: If the guess isn’t the same as the secret number, the program must figure out
    what clues to give the player. The list in `clues` will start empty and have `'Fermi'`
    and `'Pico'` strings added as needed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果猜测与秘密数字不同，程序必须找出给玩家什么线索。`clues`中的列表将从空开始，并根据需要添加`'Fermi'`和`'Pico'`字符串。
- en: The program does this by looping through each possible index in `guess` and
    `secretNum`. The strings in both variables will be the same length, so line 21
    could have used either `len(guess)` or `len(secretNum)` and worked the same. As
    the value of `i` changes from `0` to `1` to `2`, and so on, line 22 checks whether
    the first, second, third, and so on character of `guess` is the same as the character
    in the corresponding index of `secretNum`. If so, line 23 adds the string `'Fermi'`
    to `clues`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 程序通过循环遍历`guess`和`secretNum`中的每个可能的索引来执行此操作。这两个变量中的字符串将具有相同的长度，因此第21行可以使用`len(guess)`或`len(secretNum)`中的任何一个，并且效果相同。当`i`的值从`0`变化到`1`到`2`等时，第22行检查`guess`的第一个、第二个、第三个等字符是否与`secretNum`相应索引处的字符相同。如果是，第23行将字符串`'Fermi'`添加到`clues`中。
- en: Otherwise, line 24 checks whether the number at the `i`th position in `guess`
    exists anywhere in `secretNum`. If so, you know that the number is somewhere in
    the secret number but not in the same position. In that case, line 25 then adds
    `'Pico'` to `clues`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，第24行检查`guess`中第`i`个位置的数字是否存在于`secretNum`中的任何位置。如果是，你就知道这个数字在秘密数字中的某个位置，但不在同一个位置。在这种情况下，第25行将`'Pico'`添加到`clues`中。
- en: 'If the `clues` list is empty after the loop, then you know that there are no
    correct digits at all in `guess`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果循环后`clues`列表为空，那么你就知道`guess`中根本没有正确的数字：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this case, line 27 returns the string `'Bagels'` as the only clue.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，第27行返回字符串`'Bagels'`作为唯一的线索。
- en: '**The sort() List Method**'
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**sort()列表方法**'
- en: Lists have a method named `sort()` that arranges the list items in alphabetical
    or numerical order. When the `sort()` method is called, it doesn’t return a sorted
    list but rather sorts the list in place. This is just like how the `shuffle()`
    method works.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 列表有一个名为`sort()`的方法，它可以按字母顺序或数字顺序排列列表项。当调用`sort()`方法时，它不会返回排序后的列表，而是在原地对列表进行排序。这就像`shuffle()`方法的工作方式一样。
- en: You would never want to use `return spam.sort()` because that would return the
    value `None`. Instead you want a separate line, `spam.sort()`, and then the line
    `return spam`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你绝对不想使用`return spam.sort()`，因为那会返回值`None`。相反，你需要另外一行`spam.sort()`，然后再加上`return
    spam`这一行。
- en: 'Enter the following into the interactive shell:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互式shell中输入以下内容：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When we sort a list of strings, the strings are returned in alphabetical order,
    but when we sort a list of numbers, the numbers are returned in numerical order.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们对字符串列表进行排序时，字符串按字母顺序返回，但当我们对数字列表进行排序时，数字按数字顺序返回。
- en: 'On line 29, we use `sort()` on `clues`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在第29行，我们对`clues`使用`sort()`：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The reason you want to sort the `clue` list alphabetically is to get rid of
    extra information that would help the player guess the secret number more easily.
    If `clues` was `['Pico', 'Fermi', 'Pico']`, that would tell the player that the
    center digit of the guess is in the correct position. Since the other two clues
    are both `Pico`, the player would know that all they have to do to get the secret
    number is swap the first and third digits.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望按字母顺序对`clue`列表进行排序的原因是为了摆脱会帮助玩家更轻松猜出秘密数字的额外信息。如果`clues`是`['Pico', 'Fermi',
    'Pico']`，那会告诉玩家猜测的中间数字在正确的位置。由于另外两个线索都是`Pico`，玩家会知道他们只需要交换第一个和第三个数字就能得到秘密数字。
- en: If the clues are always sorted in alphabetical order, the player can’t be sure
    which number the `Fermi` clue refers to. This makes the game harder and more fun
    to play.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果线索总是按字母顺序排序，玩家就无法确定`Fermi`线索指的是哪个数字。这使得游戏更加困难和有趣。
- en: '**The join() String Method**'
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**join()字符串方法**'
- en: The `join()` string method returns a list of strings as a single string joined
    together.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`join()`字符串方法将一组字符串作为一个单独的字符串连接在一起返回。'
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The string that the method is called on (on line 30, this is a single space,
    `'' ''`) appears between each string in the list. To see an example, enter the
    following into the interactive shell:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 方法调用的字符串（在第30行，这是一个单个空格，`' '`）出现在列表中的每个字符串之间。要查看示例，请在交互式shell中输入以下内容：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: So the string that is returned on line 30 is each string in `clue` combined
    with a single space between each string. The `join()` string method is sort of
    like the opposite of the `split()` string method. While `split()` returns a list
    from a split-up string, `join()` returns a string from a combined list.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，第30行返回的字符串是`clue`中的每个字符串与每个字符串之间的单个空格组合在一起。`join()`字符串方法有点像`split()`字符串方法的相反。`split()`从分割的字符串返回一个列表，而`join()`从组合的列表返回一个字符串。
- en: '**Checking Whether a String Has Only Numbers**'
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查字符串是否只包含数字
- en: 'The `isOnlyDigits()` function helps determine whether the player entered a
    valid guess:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`isOnlyDigits()`函数有助于确定玩家输入了有效的猜测：'
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Line 34 first checks whether `num` is the blank string and, if so, returns `False`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 第34行首先检查`num`是否为空字符串，如果是，则返回`False`。
- en: 'The `for` loop then iterates over each character in the string `num`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`for`循环遍历字符串`num`中的每个字符：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The value of `i` will have a single character on each iteration. Inside the
    `for` block, the code checks whether `i` exists in the list returned by `'0 1
    2 3 4 5 6 7 8 9'.split()`. (The return value from `split()` is equivalent to `['0',
    '1', '2', '3', '4', '5', '6', '7', '8', '9']`.) If `i` doesn’t exist in that list,
    you know there’s a nondigit character in `num`. In that case, line 39 returns
    `False`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`i`的值将在每次迭代中有一个单个字符。在`for`块内部，代码检查`i`是否存在于`''0 1 2 3 4 5 6 7 8 9''.split()`返回的列表中。（`split()`的返回值等同于`[''0'',
    ''1'', ''2'', ''3'', ''4'', ''5'', ''6'', ''7'', ''8'', ''9'']`。）如果`i`不存在于该列表中，你就知道`num`中有一个非数字字符。在这种情况下，第39行返回`False`。'
- en: But if the execution continues past the `for` loop, then you know that every
    character in `num` is a digit. In that case, line 41 returns `True`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果执行继续超过`for`循环，那么你就知道`num`中的每个字符都是一个数字。在这种情况下，第41行返回`True`。
- en: '**Starting the Game**'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**开始游戏**'
- en: 'After all of the function definitions, line 44 is the actual start of the program:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有函数定义之后，第44行是程序的实际开始：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `print()` function calls tell the player the rules of the game and what
    the pico, fermi, and bagels clues mean. Line 44’s `print()` call has `% (NUM_DIGITS)`
    added to the end and `%s` inside the string. This is a technique known as *string
    interpolation*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`print()`函数调用告诉玩家游戏规则以及pico、fermi和bagels线索的含义。第44行的`print()`调用在末尾添加了`% (NUM_DIGITS)`，并在字符串内部使用了`%s`。这是一种称为*字符串插值*的技术。'
- en: '**String Interpolation**'
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**字符串插值**'
- en: 'String interpolation, also known as *string formatting*, is a coding shortcut.
    Normally, if you want to use the string values inside variables in another string,
    you have to use the `+` concatenation operator:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串插值，也称为*字符串格式化*，是一种编码快捷方式。通常，如果你想在另一个字符串中使用变量中的字符串值，你必须使用`+`连接运算符：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As you can see, it can be time-consuming to type a line that concatenates several
    strings. Instead, you can use string interpolation, which lets you put placeholders
    like `%s` into the string. These placeholders are called *conversion specifiers*.
    Once you’ve put in the conversion specifiers, you can put all the variable names
    at the end of the string. Each `%s` is replaced with a variable at the end of
    the line, in the order in which you entered the variable. For example, the following
    code does the same thing as the previous code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，键入连接多个字符串可能会耗费时间。相反，您可以使用字符串插值，它允许您在字符串中放置类似`%s`的占位符。这些占位符称为*转换说明符*。一旦放入转换说明符，您可以在字符串的末尾放置所有变量名。每个`%s`都将被最后一行的变量替换，替换的顺序与输入变量的顺序相同。例如，以下代码与前面的代码执行相同的操作：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Notice that the first variable name is used for the first `%s`, the second variable
    for the second `%s`, and so on. You must have the same number of `%s` conversion
    specifiers as you have variables.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，第一个变量名用于第一个`%s`，第二个变量用于第二个`%s`，依此类推。您必须具有与变量数量相同的`%s`转换说明符。
- en: 'Another benefit of using string interpolation instead of string concatenation
    is that interpolation works with any data type, not just strings. All values are
    automatically converted to the string data type. If you concatenated an integer
    to a string, you’d get this error:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串插值而不是字符串连接的另一个好处是，插值适用于任何数据类型，而不仅仅是字符串。所有值都会自动转换为字符串数据类型。如果将整数连接到字符串，将会出现错误：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: String concatenation can only combine two strings, but `spam` is an integer.
    You would have to remember to put `str(spam)` instead of `spam`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串连接只能组合两个字符串，但`spam`是一个整数。您必须记住将`spam`替换为`str(spam)`而不是`spam`。
- en: 'Now enter this into the interactive shell:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将其输入交互式shell：
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: With string interpolation, this conversion to strings is done for you.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串插值，这种转换到字符串的操作是由程序自动完成的。
- en: '**The Game Loop**'
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**游戏循环**'
- en: 'Line 51 is an infinite `while` loop that has a condition of `True`, so it will
    loop forever until a `break` statement is executed:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 第51行是一个无限的`while`循环，其条件为`True`，因此它将一直循环，直到执行`break`语句：
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Inside the infinite loop, you get a secret number from the `getSecretNum()`
    function. This secret number is assigned to `secretNum`. Remember, the value in
    `secretNum` is a string, not an integer.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在无限循环中，您从`getSecretNum()`函数中获得一个秘密数字。这个秘密数字被分配给`secretNum`。请记住，`secretNum`中的值是一个字符串，而不是一个整数。
- en: Line 53 tells the player how many digits are in the secret number by using string
    interpolation instead of string concatenation. Line 55 sets the variable `guessesTaken`
    to `1` to mark this is as the first guess. Then line 56 has a new `while` loop
    that loops as long as the player has guesses left. In code, this is when `guessesTaken`
    is less than or equal to `MAX_GUESS`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第53行使用字符串插值告诉玩家秘密数字中有多少位数字。第55行将变量`guessesTaken`设置为`1`，标记这是第一次猜测。然后第56行有一个新的`while`循环，只要玩家还有猜测次数，就会循环。在代码中，这是当`guessesTaken`小于或等于`MAX_GUESS`时。
- en: Notice that the `while` loop on line 56 is inside another `while` loop that
    started on line 51\. These loops inside loops are called *nested loops*. Any `break`
    or `continue` statements, such as the `break` statement on line 66, will only
    break or continue out of the innermost loop, not any of the outer loops.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，第56行的`while`循环位于第51行开始的另一个`while`循环内。这些内部循环称为*嵌套循环*。任何`break`或`continue`语句，例如第66行的`break`语句，只会中断或继续最内层的循环，而不会中断或继续任何外部循环。
- en: '***Getting the Player’s Guess***'
  id: totrans-117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***获取玩家的猜测***'
- en: 'The `guess` variable holds the player’s guess returned from `input()`. The
    code keeps looping and asking the player for a guess until they enter a valid
    guess:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`guess`变量保存了从`input()`返回的玩家猜测。代码不断循环并要求玩家猜测，直到他们输入有效的猜测：'
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: A valid guess has only digits and the same number of digits as the secret number.
    The `while` loop that starts on line 58 checks for the validity of the guess.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的猜测只包含数字，并且与秘密数字的位数相同。从第58行开始的`while`循环检查猜测的有效性。
- en: The `guess` variable is set to the blank string on line 57, so the `while` loop’s
    condition on line 58 is `False` the first time it is checked, ensuring the execution
    enters the loop starting on line 59.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 第57行将`guess`变量设置为空字符串，因此第58行的`while`循环条件第一次检查时为`False`，确保执行进入从第59行开始的循环。
- en: '***Getting the Clues for the Player’s Guess***'
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***获取玩家猜测的线索***'
- en: 'After execution gets past the `while` loop that started on line 58, `guess`
    contains a valid guess. Now the program passes `guess` and `secretNum` to the
    `getClues()` function:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行超过从第58行开始的`while`循环后，`guess`包含一个有效的猜测。现在程序将`guess`和`secretNum`传递给`getClues()`函数：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: It returns a string of the clues, which are displayed to the player on line
    62\. Line 63 increments `guessesTaken` using the augmented assignment operator
    for addition.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回一串线索，这些线索在第62行显示给玩家。第63行使用增强赋值运算符进行加法，递增`guessesTaken`。
- en: '***Checking Whether the Player Won or Lost***'
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***检查玩家是赢了还是输了***'
- en: 'Now we figure out if the player won or lost the game:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们要弄清楚玩家是赢了还是输了游戏：
- en: '[PRE26]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: If `guess` is the same value as `secretNum`, the player has correctly guessed
    the secret number, and line 66 breaks out of the `while` loop that was started
    on line 56\. If not, then execution continues to line 67, where the program checks
    whether the player ran out of guesses.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`guess`的值与`secretNum`相同，玩家已经正确猜出了秘密数字，并且第66行跳出了从第56行开始的`while`循环。如果不是，则执行继续到第67行，程序检查玩家是否已经用完了猜测次数。
- en: If the player still has more guesses, execution jumps back to the `while` loop
    on line 56, where it lets the player have another guess. If the player runs out
    of guesses (or the program breaks out of the loop with the `break` statement on
    line 66), execution proceeds past the loop and to line 70.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家还有更多的猜测，执行会跳回到第56行的`while`循环，让玩家再猜一次。如果玩家用完了猜测次数（或程序在第66行的`break`语句中跳出循环），执行将继续到第70行。
- en: '***Asking the Player to Play Again***'
  id: totrans-131
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要求玩家再玩一次***'
- en: 'Line 70 asks the player whether they want to play again:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 第70行询问玩家是否想再玩一次：
- en: '[PRE27]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The player’s response is returned by `input()`, has the `lower()` method called
    on it, and then the `startswith()` method called on that to check if the player’s
    response begins with a `y`. If it doesn’t, the program breaks out of the `while`
    loop that started on line 51\. Since there’s no more code after this loop, the
    program terminates.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家的响应由`input()`返回，对其调用`lower()`方法，然后对其调用`startswith()`方法来检查玩家的响应是否以`y`开头。如果不是，则程序会跳出从第51行开始的`while`循环。由于在此循环之后没有更多的代码，程序终止。
- en: If the response does begin with `y`, the program does not execute the `break`
    statement and execution jumps back to line 51\. The program then generates a new
    secret number so the player can play a new game.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果响应确实以`y`开头，程序不会执行`break`语句，并且执行会跳回到第51行。然后程序会生成一个新的秘密数字，这样玩家就可以玩一个新游戏。
- en: '**Summary**'
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**摘要**'
- en: Bagels is a simple game to program but can be difficult to win. But if you keep
    playing, you’ll eventually discover better ways to guess using the clues the game
    gives you. This is much like how you’ll get better at programming the more you
    keep at it.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 贝果是一个简单的游戏，但很难赢。但如果你继续玩，最终会发现使用游戏给出的线索来猜测的更好的方法。这很像您在继续编程时会变得更好一样。
- en: This chapter introduced a few new functions and methods—`shuffle()`, `sort()`,
    and `join()`—along with a couple of handy shortcuts. Augmented assignment operators
    require less typing when you want to change a variable’s relative value; for example,
    `spam = spam + 1` can be shortened to `spam += 1`. With string interpolation,
    you can make your code much more readable by placing `%s` (called a *conversion
    specifier*) inside the string instead of using many string concatenation operations.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了一些新的函数和方法——`shuffle()`、`sort()`和`join()`，以及一些方便的快捷方式。增强赋值运算符在想要改变变量的相对值时需要输入更少的内容；例如，`spam
    = spam + 1`可以缩短为`spam += 1`。通过字符串插值，您可以在字符串中放置`%s`（称为*转换说明符*），使您的代码更易读，而不是使用许多字符串连接操作。
- en: In [Chapter 12](#calibre_link-72), we won’t be doing any programming, but the
    concepts—Cartesian coordinates and negative numbers—will be necessary for the
    games in the later chapters of the book. These math concepts are used not only
    in the Sonar Treasure Hunt, Reversegam, and Dodger games we will be making but
    also in many other games. Even if you already know about these concepts, give
    [Chapter 12](#calibre_link-72) a brief read to refresh yourself.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](#calibre_link-72)中，我们不会进行任何编程，但是后面章节中的游戏将需要笛卡尔坐标和负数的概念。这些数学概念不仅在我们将要制作的声纳寻宝、反转游戏和躲避者游戏中使用，而且在许多其他游戏中也会用到。即使你已经了解这些概念，也请阅读[第12章](#calibre_link-72)进行简要复习。
- en: '[Prev: Chapter 10 - Tic-Tac-Toe](chapter10.html) | [Next: Chapter 12 - The
    Cartesian Coordinate System](chapter12.html)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一页：第10章 - 井字棋](chapter10.html) | [下一页：第12章 - 笛卡尔坐标系](chapter12.html)'

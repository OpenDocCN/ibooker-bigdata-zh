- en: 'File System, Part 6: Memory mapped files and Shared memory'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件系统，第6部分：内存映射文件和共享内存
- en: How does the operating system load my process and libraries into memory?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作系统如何将我的进程和库加载到内存中？
- en: By mapping the files' contents into the address-space of the process. If many
    programs only need read-access to the same file (e.g. /bin/bash, the C library)
    then the same physical memory can be shared between multiple processes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将文件的内容映射到进程的地址空间。如果许多程序只需要对同一个文件进行读取访问（例如/bin/bash，C库），那么相同的物理内存可以在多个进程之间共享。
- en: The same mechanism can be used by programs to directly map files into memory
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的机制可以被程序用来直接将文件映射到内存
- en: How do I map a file into memory?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何将文件映射到内存？
- en: 'A simple program to map a file into memory is shown below. The key points to
    notice are:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示了一个将文件映射到内存的简单程序。需要注意的关键点是：
- en: mmap requires a filedescriptor, so we need to `open` the file first
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mmap需要一个文件描述符，所以我们需要先打开文件
- en: We seek to our desired size and write one byte to ensure that the file is sufficient
    length
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们寻找我们想要的大小并写入一个字节，以确保文件足够长
- en: When finished call munmap to unmap the file from memory.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成后调用munmap将文件从内存中取消映射。
- en: This example also shows the preprocessor constants "**LINE**" and "**FILE**"
    that hold the current line number and filename of the file currently being compiled.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子还显示了预处理器常量“**LINE**”和“**FILE**”，它们保存了当前正在编译的文件的行号和文件名。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The contents of our binary file can be listed using hexdump
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的二进制文件的内容可以使用hexdump列出
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The careful reader may notice that our integers were written in least-significant-byte
    format (because that is the endianess of the CPU) and that we allocated a file
    that is one byte too many!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 细心的读者可能会注意到我们的整数是以最低有效字节格式写入的（因为这是CPU的字节序），而且我们分配了一个多出一个字节的文件！
- en: The `PROT_READ | PROT_WRITE` options specify the virtual memory protection.
    The option `PROT_EXEC` (not used here) can be set to allow CPU execution of instructions
    in memory (e.g. this would be useful if you mapped an executable or library).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`PROT_READ | PROT_WRITE`选项指定了虚拟内存保护。选项`PROT_EXEC`（这里没有使用）可以设置为允许CPU在内存中执行指令（例如，如果您映射了一个可执行文件或库，这将非常有用）。'
- en: What are the advantages of memory mapping a file
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存映射文件的优势是什么
- en: 'For many applications the main advantages are:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多应用程序，主要优势是：
- en: Simplified coding - the file data is immediately available. No need to parse
    the incoming data and store it in new memory structures.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 简化编码-文件数据立即可用。无需解析传入数据并将其存储在新的内存结构中。
- en: Sharing of files - memory mapped files are particularly efficient when the same
    data is shared between multiple processes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 文件共享-内存映射文件在多个进程之间共享相同数据时特别高效。
- en: Note for simple sequential processing memory mapped files are not necessarily
    faster than standard 'stream-based' approaches of `read` / fscanf etc.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单的顺序处理，内存映射文件不一定比标准的“基于流”的`read` / fscanf等方法更快。
- en: How do I share memory between a parent and child process?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在父进程和子进程之间共享内存？
- en: Easy - Use `mmap` without a file - just specify the MAP_ANONYMOUS and MAP_SHARED
    options!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 简单-使用`mmap`而不是文件-只需指定MAP_ANONYMOUS和MAP_SHARED选项！
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Can I use shared memory for IPC ?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以使用共享内存进行IPC吗？
- en: Yes! As a simple example you could reserve just a few bytes and change the value
    in shared memory when you want the child process to quit. Sharing memory is a
    very efficient form of inter-process communication because there is no copying
    overhead - the two processes literally share the same *physical* frame of memory.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！作为一个简单的例子，你可以只保留几个字节，并在想要子进程退出时更改共享内存中的值。共享内存是一种非常高效的进程间通信形式，因为没有复制开销-这两个进程实际上共享相同的*物理*内存帧。
- en: '[Go to File System: Part 7](https://github.com/angrave/SystemProgramming/wiki/File-System,-Part-7:-Scalable-and-Reliable-Filesystems)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[转到文件系统：第7部分](https://github.com/angrave/SystemProgramming/wiki/File-System,-Part-7:-Scalable-and-Reliable-Filesystems)'

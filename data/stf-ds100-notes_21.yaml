- en: 20  SQL I
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 20 SQL I
- en: 原文：[https://ds100.org/course-notes/sql_I/sql_I.html](https://ds100.org/course-notes/sql_I/sql_I.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://ds100.org/course-notes/sql_I/sql_I.html](https://ds100.org/course-notes/sql_I/sql_I.html)
- en: '*Learning Outcomes* ***   Identify situations where a database may be preferred
    over a CSV file'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*学习成果* ***   确定数据库可能优于CSV文件的情况'
- en: Write basic SQL queries using `SELECT`, `FROM`, `WHERE`, `ORDER BY`, `LIMIT`,
    and `OFFSET`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`SELECT`，`FROM`，`WHERE`，`ORDER BY`，`LIMIT`和`OFFSET`编写基本的SQL查询
- en: 'Perform aggregations using `GROUP BY`**  **So far in the course, we have made
    our way through the entire data science lifecycle: we learned how to load and
    explore a dataset, formulate questions, and use the tools of prediction and inference
    to come up with answers. For the remaining weeks of the semester, we are going
    to make a second pass through the lifecycle, this time doing so with a different
    set of tools, ideas, and abstractions.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`GROUP BY`执行聚合操作**  **到目前为止，在本课程中，我们已经完成了整个数据科学生命周期：我们学会了如何加载和探索数据集，制定问题，并使用预测和推断工具得出答案。在本学期的剩余几周中，我们将再次经历整个生命周期，这次使用不同的工具、思想和抽象。
- en: 20.1 Databases
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 20.1 数据库
- en: With this goal in mind, let’s go back to the very beginning of the lifecycle.
    We first started our work in data analysis by looking at the `pandas` library,
    which offered us powerful tools to manipulate tabular data stored in (primarily)
    CSV files. CSVs work well when analyzing relatively small datasets that don’t
    need to be shared across many users. In research and industry, however, data scientists
    often need to access enormous bodies of data that cannot be easily stored in a
    CSV format. Collaborating with others when working with CSVs can also be tricky
    – a real-world data scientist may run into problems when multiple users try to
    make modifications, or, even worse, security issues with who should and should
    not have access to the data.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个目标，让我们回到生命周期的最开始。我们首先通过查看`pandas`库开始了数据分析工作，该库为我们提供了强大的工具，用于操作（主要是）CSV文件中存储的表格数据。在研究和工业领域，数据科学家经常需要访问无法轻松存储在CSV格式中的大量数据。与他人合作处理CSV数据也可能会很棘手-真实世界的数据科学家可能会在多个用户尝试进行修改时遇到问题，或者更糟的是，数据应该由谁访问和谁不应该访问的安全问题。
- en: 'A **database** is a large, organized collection of data. Databases are administered
    by **Database Management Systems (DBMS)**, which are software systems that store,
    manage, and facilitate access to one or more databases. Databases help mitigate
    many of the issues that come with using CSVs for data storage: they provide reliable
    storage that can survive system crashes or disk failures, are optimized to compute
    on data that does not fit into memory, and contain special data structures to
    improve performance. Using databases rather than CSVs offers further benefits
    from the standpoint of data management. A DBMS can apply settings that configure
    how data is organized, block certain data anomalies (for example, enforcing non-negative
    weights or ages), and determine who is allowed access to the data. It can also
    ensure safe concurrent operations where multiple users reading and writing to
    the database will not lead to fatal errors.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据库**是一个大型的、有组织的数据集合。数据库由**数据库管理系统（DBMS）**管理，这是一种存储、管理和促进访问一个或多个数据库的软件系统。数据库有助于减轻使用CSV进行数据存储时出现的许多问题：它们提供可靠的存储，可以在系统崩溃或磁盘故障时幸存，被优化用于计算无法适应内存的数据，并包含特殊的数据结构以提高性能。使用数据库而不是CSV还可以从数据管理的角度获得进一步的好处。DBMS可以应用设置来配置数据的组织方式，阻止某些数据异常（例如，强制执行非负权重或年龄），并确定谁有权访问数据。它还可以确保安全的并发操作，其中多个用户读取和写入数据库不会导致致命错误。'
- en: As you may have guessed, we can’t use our usual `pandas` methods to work with
    data in a database. Instead, we’ll turn to Structured Query Language.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经猜到的那样，我们无法使用通常的`pandas`方法来处理数据库中的数据。相反，我们将转向结构化查询语言。
- en: 20.2 Structured Query Language and Database Schema
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 20.2 结构化查询语言和数据库模式
- en: '**Structured Query Language**, or **SQL** (commonly pronounced “sequel,” though
    this is the subject of [fierce debate](https://patorjk.com/blog/2012/01/26/pronouncing-sql-s-q-l-or-sequel/)),
    is a special programming language designed to communicate with databases. You
    may have encountered it in classes like CS 61A or Data C88C before. Unlike Python,
    it is a **declarative programming language** – this means that rather than writing
    the exact logic needed to complete a task, a piece of SQL code “declares” what
    the desired final output should be and leaves the program to determine what logic
    should be implemented.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**结构化查询语言**，或**SQL**（通常发音为“sequel”，尽管这是[激烈辩论的话题](https://patorjk.com/blog/2012/01/26/pronouncing-sql-s-q-l-or-sequel/)），是一种专门设计用于与数据库通信的编程语言。您可能在CS
    61A或Data C88C等课程中遇到过它。与Python不同，它是一种**声明性编程语言** - 这意味着与编写完成任务所需的确切逻辑不同，SQL代码的一部分“声明”了所需的最终输出应该是什么，并且让程序确定应该实现什么逻辑。'
- en: It is important to reiterate that SQL is an entirely different language from
    Python. However, Python *does* have special engines that allow us to run SQL code
    in a Jupyter notebook. While this is typically not how SQL is used outside of
    an educational setting, we will be using this workflow to illustrate how SQL queries
    are constructed using the tools we’ve already worked with this semester. You will
    learn more about how to run SQL queries in Jupyter in Lab 10.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 重申一点，SQL是一种与Python完全不同的语言。但是，Python确实有特殊的引擎，允许我们在Jupyter笔记本中运行SQL代码。虽然这通常不是SQL在教育环境之外的使用方式，但我们将使用这种工作流程来说明如何使用我们本学期已经使用过的工具构建SQL查询。您将在实验10中了解如何在Jupyter中运行SQL查询。
- en: The syntax below will seem unfamiliar to you; for now, just focus on understanding
    the output displayed. We will clarify the SQL code in a bit.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的语法对您来说可能会很陌生；现在，只需专注于理解显示的输出。我们将稍后澄清SQL代码。
- en: To start, we’ll look at a database called `basic_examples.db`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将查看一个名为`basic_examples.db`的数据库。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Connect to the SQLite database `basic_examples.db`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到SQLite数据库`basic_examples.db`。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '| type | name | tbl_name | rootpage | sql |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 名称 | tbl_name | rootpage | sql |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| table | sqlite_sequence | sqlite_sequence | 7 | CREATE TABLE sqlite_sequence(name,seq)
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 表 | sqlite_sequence | sqlite_sequence | 7 | 创建表sqlite_sequence（名称，序列）|'
- en: '| table | Dragon | Dragon | 2 | CREATE TABLE Dragon ( name TEXT PRIMARY KEY,'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '| 表 | 龙 | 龙 | 2 | 创建表龙（名称文本主键，'
- en: year INTEGER CHECK (year >= 2000),
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 年份整数检查（年份≥2000），
- en: cute INTEGER
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可爱整数
- en: ) |
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: ）|
- en: '| table | Dish | Dish | 4 | CREATE TABLE Dish ( name TEXT PRIMARY KEY,'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '| 表 | 菜 | 菜 | 4 | 创建表菜（名称文本主键，'
- en: type TEXT,
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 类型文本，
- en: cost INTEGER CHECK (cost >= 0)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 成本整数检查（成本≥0）
- en: ) |
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: ）|
- en: '| table | Scene | Scene | 6 | CREATE TABLE Scene ( id INTEGER PRIMARY KEY AUTOINCREMENT,'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '| 表 | 场景 | 场景 | 6 | 创建表场景（id整数主键自动增量，'
- en: biome TEXT NOT NULL,
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 生物群落文本非空，
- en: city TEXT NOT NULL,
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 城市文本非空，
- en: visitors INTEGER CHECK (visitors >= 0),
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 访客整数检查（访客≥0），
- en: created_at DATETIME DEFAULT (DATETIME('now'))
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: created_at DATETIME DEFAULT（DATETIME（'now'）
- en: ) |
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: ）|
- en: The summary above displays information about the database. The database contains
    four tables, named `sqlite_sequence`, `Dragon`, `Dish`, and `Scene`. The rightmost
    column above lists the command that was used to construct each table.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的摘要显示了有关数据库的信息。数据库包含四个表，名称分别为`sqlite_sequence`、`Dragon`、`Dish`和`Scene`。上面最右边的列列出了用于构造每个表的命令。
- en: Let’s look more closely at the command used to create the `Dragon` table (the
    second entry above).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下用于创建`Dragon`表的命令（上面的第二个条目）。
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The statement `CREATE TABLE` is used to specify the **schema** of the table
    – a description of what logic is used to organize the table. Schema follows a
    set format:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 语句“CREATE TABLE”用于指定表的**模式**-表的组织逻辑的描述。模式遵循一组格式：
- en: '`ColName`: the name of a column'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “ColName”：列的名称
- en: '`DataType`: the type of data to be stored in a column. Some of the most common
    SQL data types are `INT` (integers), `FLOAT` (floating point numbers), `TEXT`
    (strings), `BLOB` (arbitrary data, such as audio/video files), and `DATETIME`
    (a date and time).'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “DataType”：要存储在列中的数据类型。一些最常见的SQL数据类型是`INT`（整数）、`FLOAT`（浮点数）、`TEXT`（字符串）、`BLOB`（任意数据，如音频/视频文件）和`DATETIME`（日期和时间）。
- en: '`Constraint`: some restriction on the data to be stored in the column. Common
    constraints are `CHECK` (data must obey a certain condition), `PRIMARY KEY` (designate
    a column as the table’s primary key), `NOT NULL` (data cannot be null), and `DEFAULT`
    (a default fill value if no specific entry is given).'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “约束”：对要存储在列中的数据的一些限制。常见的约束有“CHECK”（数据必须遵守某个条件）、“PRIMARY KEY”（指定列为表的主键）、“NOT
    NULL”（数据不能为空）和“DEFAULT”（如果没有给定特定条目，则为默认填充值）。
- en: We see that `Dragon` contains three columns. The first of these, `"name"`, contains
    text data. It is designated as the **primary key** of the table; that is, the
    data contained in `"name"` uniquely identifies each entry in the table. Because
    `"name"` is the primary key of the table, no two entries in the table can have
    the same name – a given value of `"name"` is unique to each dragon. The `"year"`
    column contains integer data, with the constraint that year values must be greater
    than or equal to 2000\. The final column, `"cute"`, contains integer data with
    no restrictions on allowable values.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到`Dragon`包含三列。其中第一列“名称”包含文本数据。它被指定为表的**主键**；也就是说，“名称”中包含的数据唯一标识表中的每个条目。因为“名称”是表的主键，表中的两个条目不能具有相同的名称-“名称”的给定值对于每个龙是唯一的。列“年份”包含整数数据，约束条件是年份值必须大于或等于2000。最后一列“可爱”包含整数数据，没有对允许的值施加限制。
- en: We can verify this by viewing `Dragon` itself.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过查看`Dragon`本身来验证这一点。
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '| name | year | cute |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 年份 | 可爱 |'
- en: '| --- | --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| hiccup | 2010 | 10 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 哭泣 | 2010 | 10 |'
- en: '| drogon | 2011 | -100 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 龙 | 2011 | -100 |'
- en: '| dragon 2 | 2019 | 0 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 龙2 | 2019 | 0 |'
- en: Database tables (also referred to as **relations**) are structured much like
    `DataFrame`s in `pandas`. Each row, sometimes called a **tuple**, represents a
    single record in the dataset. Each column, sometimes called an **attribute** or
    **field**, describes some feature of the record.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库表（也称为**关系**）的结构与`pandas`中的`DataFrame`非常相似。每一行，有时称为**元组**，代表数据集中的单个记录。每一列，有时称为**属性**或**字段**，描述记录的某些特征。
- en: 20.3 `SELECT`ing From Tables
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 20.3 从表中选择
- en: To extract and manipulate data stored in a SQL table, we will need to familiarize
    ourselves with the syntax to write pieces of SQL code, which we call **queries**.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提取和操作存储在SQL表中的数据，我们需要熟悉编写SQL代码片段的语法，我们称之为**查询**。
- en: The basic unit of a SQL query is the `SELECT` statement. `SELECT` specifies
    what columns we would like to extract from a given table. We use `FROM` to tell
    SQL the table from which we want to `SELECT` our data.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: SQL查询的基本单元是“SELECT”语句。“SELECT”指定我们想要从给定表中提取哪些列。我们使用“FROM”告诉SQL我们想要从哪个表中“SELECT”我们的数据。
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '| name | year | cute |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 年份 | 可爱 |'
- en: '| --- | --- | --- |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| hiccup | 2010 | 10 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 哭泣 | 2010 | 10 |'
- en: '| drogon | 2011 | -100 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 龙 | 2011 | -100 |'
- en: '| dragon 2 | 2019 | 0 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 龙2 | 2019 | 0 |'
- en: In SQL, `*` means “everything.” The query above grabs *all* the columns in `Dragon`
    and displays them in the outputted table. We can also specify a specific subset
    of columns to be `SELECT`ed. Notice that the outputted columns appear in the order
    that they were `SELECT`ed.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQL中，`*`表示“所有”。上面的查询抓取`Dragon`中的*所有*列，并在输出的表中显示它们。我们也可以指定要`SELECT`的特定列的子集。请注意，输出的列按照它们被`SELECT`的顺序出现。
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '| cute | year |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 可爱 | 年份 |'
- en: '| --- | --- |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 10 | 2010 |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 2010 |'
- en: '| -100 | 2011 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| -100 | 2011 |'
- en: '| 0 | 2019 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 2019 |'
- en: And just like that, we’ve already written two SQL queries. There are a few points
    of note in the queries above. Firstly, notice that every “verb” is written in
    uppercase. It is convention to write SQL operations in capital letters, but your
    code will run just fine even if you choose to keep things in lowercase. Second,
    the query above separates each statement with a new line. SQL queries are not
    impacted by whitespace within the query; this means that SQL code is typically
    written with a new line after each statement to make things more readable. The
    semicolon (`;`) indicates the end of a query. There are some “flavors” of SQL
    in which a query will not run if no semicolon is present; however, in Data 100,
    the SQL version we will use works with or without an ending semicolon. Queries
    in these notes will end with semicolons to build up good habits.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 就像这样，我们已经编写了两个SQL查询。上面的查询中有一些要注意的地方。首先，请注意每个“动词”都是大写写的。按照惯例，SQL操作应以大写字母编写，但即使您选择保持小写，您的代码也会正常运行。其次，上面的查询将每个语句与新行分隔开。SQL查询不受查询内部的空格影响；这意味着SQL代码通常是在每个语句后写上新行，以使其更易读。分号（`;`）表示查询的结束。在某些SQL“风味”中，如果没有分号，查询将无法运行；但是，在Data
    100中，我们将使用的SQL版本无论是否有结束分号都可以正常运行。这些笔记中的查询将以分号结束，以养成良好的习惯。
- en: 'The `AS` keyword allows us to give a column a new name (called an **alias**)
    after it has been `SELECT`ed. The general syntax is:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`AS`关键字允许我们在`SELECT`后为列指定一个新名称（称为**别名**）。一般语法是：'
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '| cuteness | birth |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 可爱 | 出生 |'
- en: '| --- | --- |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 10 | 2010 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 2010 |'
- en: '| -100 | 2011 |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| -100 | 2011 |'
- en: '| 0 | 2019 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 2019 |'
- en: 'To `SELECT` only the *unique* values in a column, we use the `DISTINCT` keyword.
    This will cause any any duplicate entries in a column to be removed. If we want
    to find only the unique years in `Dragon`, without any repeats, we would write:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅`SELECT`列中的*唯一*值，我们使用`DISTINCT`关键字。这将导致列中的任何重复条目被删除。如果我们只想找到`Dragon`中唯一的年份，而没有任何重复，我们将写：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '| year |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 年份 |'
- en: '| --- |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| --- |'
- en: '| 2010 |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 2010 |'
- en: '| 2011 |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 2011 |'
- en: '| 2019 |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 2019 |'
- en: '**Every** SQL query must include both a `SELECT` and `FROM` statement. Intuitively,
    this makes sense – we know that we’ll want to extract some piece of information
    from the table; to do so, we also need to indicate what table we want to consider.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 每个SQL查询必须包括`SELECT`和`FROM`语句。直观地说，这是有道理的 - 我们知道我们将要从表中提取一些信息；为了这样做，我们还需要指示我们要考虑哪个表。
- en: It is important to note that SQL enforces a strict “order of operations” – SQL
    clauses must *always* follow the same sequence. For example, the `SELECT` statement
    must always precede `FROM`. This means that any SQL query will follow the same
    structure.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，SQL强制执行严格的“操作顺序” - SQL子句必须*始终*遵循相同的顺序。例如，`SELECT`语句必须始终在`FROM`之前。这意味着任何SQL查询都将遵循相同的结构。
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The additional clauses that we use depend on the specific task trying to be
    achieved. We may refine our query to filter on a certain condition, aggregate
    a particular column, or join several tables together. We will spend the rest of
    this lecture outlining some useful clauses to build up our understanding of the
    order of operations.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的附加子句取决于要实现的具体任务。我们可以通过细化查询来过滤特定条件，聚合特定列或将多个表连接在一起。我们将在本讲座的其余时间中概述一些有用的子句，以增进我们对操作顺序的理解。
- en: 20.4 Applying `WHERE` Conditions
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 20.4应用`WHERE`条件
- en: The `WHERE` keyword is used to select only some rows of a table, filtered on
    a given Boolean condition.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`WHERE`关键字用于仅选择表的某些行，这些行基于给定的布尔条件进行过滤。'
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '| name | year |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 年份 |'
- en: '| --- | --- |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| hiccup | 2010 |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 嗝屁 | 2010 | '
- en: We can add complexity to the `WHERE` condition using the keywords `AND`, `OR`,
    and `NOT`, much like we would in Python.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`AND`，`OR`和`NOT`关键字给`WHERE`条件添加复杂性，就像在Python中一样。
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '| name | year |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 年份 |'
- en: '| --- | --- |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| hiccup | 2010 |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 嗝屁 | 2010 |'
- en: '| dragon 2 | 2019 |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 龙2 | 2019 |'
- en: To spare ourselves needing to write complicated logical expressions by combining
    several conditions, we can also filter for entries that are `IN` a specified list
    of values. This is similar to the use of `in` or `.isin` in Python.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免需要通过组合多个条件来编写复杂的逻辑表达式，我们还可以过滤`IN`指定值列表中的条目。这类似于Python中的`in`或`.isin`的用法。
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '| name | year |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 年份 |'
- en: '| --- | --- |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| hiccup | 2010 |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 嗝屁 | 2010 |'
- en: You may have noticed earlier that our table actually has a missing value. In
    SQL, missing data is given the special value `NULL`. `NULL` behaves in a fundamentally
    different way to other data types. We can’t use the typical operators (=, >, and
    <) on `NULL` values (in fact, `NULL == NULL` returns `False`!); instead, we check
    to see if a value `IS` or `IS NOT` `NULL`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到我们的表实际上缺少一个值。在SQL中，缺失的数据被赋予特殊值`NULL`。`NULL`的行为方式与其他数据类型根本不同。我们不能对`NULL`值使用典型的运算符（=，>和<）（实际上，`NULL
    == NULL`返回`False`！）；相反，我们检查值是否为`NULL`或`NULL`。
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '| name | year | cute |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 年份 | 可爱 |'
- en: '| --- | --- | --- |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| hiccup | 2010 | 10 |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 嗝屁 | 2010 | 10 |'
- en: '| drogon | 2011 | -100 |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 龙 | 2011 | -100 |'
- en: '| dragon 2 | 2019 | 0 |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 龙2 | 2019 | 0 |'
- en: 20.5 Sorting and Restricting Output
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 20.5排序和限制输出
- en: What if we want the output table to appear in a certain order? The `ORDER BY`
    keyword behaves similarly to `.sort_values()` in `pandas`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望输出表按特定顺序显示，`ORDER BY`关键字的行为类似于`pandas`中的`.sort_values()`。
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '| name | year | cute |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 年份 | 可爱 |'
- en: '| --- | --- | --- |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| drogon | 2011 | -100 |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 龙 | 2011 | -100 |'
- en: '| dragon 2 | 2019 | 0 |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 龙2 | 2019 | 0 |'
- en: '| hiccup | 2010 | 10 |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 嗝屁 | 2010 | 10 |'
- en: By default, `ORDER BY` will display results in ascending order (with the lowest
    values at the top of the table). To sort in descending order, we use the `DESC`
    keyword after specifying the column to be used for ordering.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`ORDER BY`将按升序显示结果（最小值在表的顶部）。要按降序排序，我们在指定用于排序的列后使用`DESC`关键字。
- en: '[PRE28]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '| name | year | cute |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 年份 | 可爱 |'
- en: '| --- | --- | --- |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| hiccup | 2010 | 10 |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 嗝屁 | 2010 | 10 |'
- en: '| dragon 2 | 2019 | 0 |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 龙2 | 2019 | 0 |'
- en: '| drogon | 2011 | -100 |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 龙 | 2011 | -100 |'
- en: We can also tell SQL to `ORDER BY` two columns at once. This will sort the table
    by the first listed column, then use the values in the second listed column to
    break any ties.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以告诉SQL同时按两列`ORDER BY`。这将按照列出的第一列对表进行排序，然后使用第二列中的值来打破任何平局。
- en: '[PRE30]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '| name | year | cute |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 年份 | 可爱 |'
- en: '| --- | --- | --- |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| dragon 2 | 2019 | 0 |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 龙2 | 2019 | 0 |'
- en: '| drogon | 2011 | -100 |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| drogon | 2011 | -100 |'
- en: '| hiccup | 2010 | 10 |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| hiccup | 2010 | 10 |'
- en: In many instances, we are only concerned with a certain number of rows in the
    output table (for example, wanting to find the first two dragons in the table).
    The `LIMIT` keyword restricts the output to a specified number of rows. It serves
    a function similar to that of `.head()` in `pandas`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，我们只关心输出表中的某些行（例如，想要找到表中的前两条龙）。`LIMIT`关键字将输出限制为指定数量的行。它的功能类似于`pandas`中的`.head()`。
- en: '[PRE32]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '| name | year | cute |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 年份 | 可爱 |'
- en: '| --- | --- | --- |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| hiccup | 2010 | 10 |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| hiccup | 2010 | 10 |'
- en: '| drogon | 2011 | -100 |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| drogon | 2011 | -100 |'
- en: 'The `OFFSET` keyword indicates the index at which `LIMIT` should start. In
    other words, we can use `OFFSET` to shift where the `LIMIT`ing begins by a specified
    number of rows. For example, we might care about the dragons that are at positions
    #2 and #3 in the table.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`OFFSET`关键字表示`LIMIT`应该开始的索引。换句话说，我们可以使用`OFFSET`来将`LIMIT`的开始位置向后移动指定数量的行。例如，我们可能关心表中位置为#2和#3的龙。'
- en: '[PRE34]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '| name | year | cute |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 年份 | 可爱 |'
- en: '| --- | --- | --- |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| drogon | 2011 | -100 |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| drogon | 2011 | -100 |'
- en: '| dragon 2 | 2019 | 0 |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| 龙2 | 2019 | 0 |'
- en: Let’s summarize what we’ve learned so far. We know that `SELECT` and `FROM`
    are the fundamental building blocks of any SQL query. We can augment these two
    keywords with additional clauses to refine the data in our output table.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下到目前为止我们学到的东西。我们知道`SELECT`和`FROM`是任何SQL查询的基本构建模块。我们可以使用其他子句来完善输出表中的数据。
- en: 'Any clauses that we include must follow a strict ordering within the query:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们包含的任何子句必须在查询中遵循严格的顺序：
- en: '[PRE36]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Here, any clause contained in square brackets `[ ]` is optional – we only need
    to use the keyword if it is relevant to the table operation we want to perform.
    Also note that by convention, we use all caps for keywords in SQL statements and
    use newlines to make code more readable.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，方括号`[ ]`中包含的任何子句都是可选的 - 只有在与我们要执行的表操作相关时才需要使用关键字。还要注意，按照惯例，我们在SQL语句中使用大写字母表示关键字，并使用换行符使代码更易读。
- en: 20.6 Aggregating with `GROUP BY`
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 20.6 使用`GROUP BY`进行聚合
- en: At this point, we’ve seen that SQL offers much of the same functionality that
    was given to us by `pandas`. We can extract data from a table, filter it, and
    reorder it to suit our needs.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到SQL提供了与`pandas`给我们的许多相同功能。我们可以从表中提取数据，对其进行过滤和重新排序以满足我们的需求。
- en: In `pandas`, much of our analysis work relied heavily on being able to use `.groupby()`
    to aggregate across the rows of our dataset. SQL’s answer to this task is the
    (very conveniently named) `GROUP BY` clause. While the outputs of `GROUP BY` are
    similar to those of `.groupby()` – in both cases, we obtain an output table where
    some column has been used for grouping – the syntax and logic used to group data
    in SQL are fairly different to the `pandas` implementation.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在`pandas`中，我们的许多分析工作在很大程度上依赖于能够使用`.groupby()`来对数据集的行进行聚合。SQL对这一任务的回答是（非常方便地命名为）`GROUP
    BY`子句。虽然`GROUP BY`的输出与`.groupby()`的输出类似 - 在这两种情况下，我们都获得了一个输出表，其中某些列已被用于分组 - 但在SQL中用于分组数据的语法和逻辑与`pandas`的实现有相当大的不同。
- en: To illustrate `GROUP BY`, we will consider the `Dish` table from the `basic_examples.db`
    database.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明`GROUP BY`，我们将考虑`basic_examples.db`数据库中的`Dish`表。
- en: '[PRE37]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '| name | type | cost |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 成本 |'
- en: '| --- | --- | --- |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| ravioli | entree | 10 |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 馄饨 | 主菜 | 10 |'
- en: '| ramen | entree | 13 |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 拉面 | 主菜 | 13 |'
- en: '| taco | entree | 7 |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| 墨西哥卷饼 | 主菜 | 7 |'
- en: '| edamame | appetizer | 4 |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 毛豆 | 开胃菜 | 4 |'
- en: '| fries | appetizer | 4 |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 薯条 | 开胃菜 | 4 |'
- en: '| potsticker | appetizer | 4 |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 锅贴 | 开胃菜 | 4 |'
- en: '| ice cream | dessert | 5 |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 冰淇淋 | 甜点 | 5 |'
- en: Say we wanted to find the total costs of dishes of a certain `type`. To accomplish
    this, we would write the following code.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要找到某种“类型”的菜肴的总成本。为了实现这一目标，我们将编写以下代码。
- en: '[PRE39]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '| type | SUM(cost) |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | SUM(cost) |'
- en: '| --- | --- |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| appetizer | 12 |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| 开胃菜 | 12 |'
- en: '| dessert | 5 |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| 甜点 | 5 |'
- en: '| entree | 30 |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| 主菜 | 30 |'
- en: What is going on here? The statement `GROUP BY type` tells SQL to group the
    data based on the value contained in the `type` column (whether a record is an
    appetizer, entree, or dessert). `SUM(cost)` sums up the costs of dishes in each
    `type` and displays the result in the output table.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？语句`GROUP BY type`告诉SQL根据`type`列中包含的值（记录是开胃菜、主菜还是甜点）对数据进行分组。`SUM(cost)`对每个`type`中的菜肴成本进行求和，并在输出表中显示结果。
- en: 'You may be wondering: why does `SUM(cost)` come before the command to `GROUP
    BY type`? Don’t we need to form groups before we can count the number of entries
    in each?'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想：为什么`SUM(cost)`在`GROUP BY type`命令之前？我们不需要在计算每个分组中的条目数量之前先形成分组吗？
- en: Remember that SQL is a *declarative* programming language – a SQL programmer
    simply states what end result they would like to see, and leaves the task of figuring
    out *how* to obtain this result to SQL itself. This means that SQL queries sometimes
    don’t follow what a reader sees as a “logical” sequence of thought. Instead, SQL
    requires that we follow its set order of operations when constructing queries.
    So long as we follow this ordering, SQL will handle the underlying logic.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，SQL是一种*声明性*编程语言 - SQL程序员只需陈述他们想要看到的最终结果，然后将如何获得这个结果的任务留给SQL本身。这意味着SQL查询有时不遵循读者认为“逻辑”的思维顺序。相反，SQL要求我们在构建查询时遵循其设定的操作顺序。只要我们遵循这个顺序，SQL就会处理底层逻辑。
- en: 'In practical terms: our goal with this query was to output the total `cost`s
    of each `type`. To communicate this to SQL, we say that we want to `SELECT` the
    `SUM`med `cost` values for each `type` group.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际操作中：我们这个查询的目标是输出每个“类型”的总成本。为了向SQL传达这一点，我们说我们要`SELECT`每个`type`组的`SUM`med`cost`值。
- en: 'There are many aggregation functions that can be used to aggregate the data
    contained in each group. Some common examples are:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多聚合函数可以用来聚合每个组中包含的数据。一些常见的例子是：
- en: '`COUNT`: count the number of rows associated with each group'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COUNT`: 计算与每个组相关联的行数'
- en: '`MIN`: find the minimum value of each group'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MIN`: 找到每个组的最小值'
- en: '`MAX`: find the maximum value of each group'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MAX`: 找到每个组的最大值'
- en: '`SUM`: sum across all records in each group'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SUM`: 对每个组中的所有记录求和'
- en: '`AVG`: find the average value of each group'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AVG`: 找到每个组的平均值'
- en: We can easily compute multiple aggregations, all at once (a task that was very
    tricky in `pandas`).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松地一次性计算多个聚合（这在`pandas`中非常棘手）。
- en: '[PRE41]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '| type | SUM(cost) | MIN(cost) | MAX(name) |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | SUM(cost) | MIN(cost) | MAX(name) |'
- en: '| --- | --- | --- | --- |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| appetizer | 12 | 4 | potsticker |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| 开胃菜 | 12 | 4 | 锅贴 |'
- en: '| dessert | 5 | 5 | ice cream |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| 甜点 | 5 | 5 | 冰淇淋 |'
- en: '| entree | 30 | 7 | taco |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| 主菜 | 30 | 7 | 墨西哥卷饼 |'
- en: To count the number of rows associated with each group, we use the `COUNT` keyword.
    Calling `COUNT(*)` will compute the total number of rows in each group, including
    rows with null values. Its `pandas` equivalent is `.groupby().size()`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算与每个组相关联的行数，我们使用`COUNT`关键字。调用`COUNT(*)`将计算每个组中的总行数，包括具有空值的行。它在`pandas`中的等价物是`.groupby().size()`。
- en: '[PRE43]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '| type | COUNT(*) |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | COUNT(*) |'
- en: '| --- | --- |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| appetizer | 3 |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| 开胃菜 | 3 |'
- en: '| dessert | 1 |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| 甜点 | 1 |'
- en: '| entree | 3 |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| 主菜 | 3 |'
- en: To exclude `NULL` values when counting the rows in each group, we explicitly
    call `COUNT` on a column in the table. This is similar to calling `.groupby().count()`
    in `pandas`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算每个组中的行数时排除`NULL`值，我们在表中明确调用`COUNT`。这类似于在`pandas`中调用`.groupby().count()`。
- en: '[PRE45]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '| year | COUNT(cute) |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| 年份 | COUNT(cute) |'
- en: '| --- | --- |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 2010 | 1 |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| 2010 | 1 |'
- en: '| 2011 | 1 |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| 2011 | 1 |'
- en: '| 2019 | 1 |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| 2019 | 1 |'
- en: 'With this definition of `GROUP BY` in hand, let’s update our SQL order of operations.
    Remember: *every* SQL query must list clauses in this order.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个`GROUP BY`的定义，让我们更新一下我们的SQL操作顺序。记住：*每个*SQL查询必须按照这个顺序列出子句。
- en: '[PRE47]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Note that we can use the `AS` keyword to rename columns during the selection
    process and that column expressions may include aggregation functions (`MAX`,
    `MIN`, etc.).**
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们可以在选择过程中使用`AS`关键字重命名列，并且列表达式可以包括聚合函数（`MAX`，`MIN`等）。

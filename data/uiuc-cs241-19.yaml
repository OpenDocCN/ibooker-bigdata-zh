- en: Processes Review Questions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程复习问题
- en: Topics
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主题
- en: Correct use of fork, exec and waitpid
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确使用fork、exec和waitpid
- en: Using exec with a path
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用带有路径的exec
- en: Understanding what fork and exec and waitpid do. E.g. how to use their return
    values.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解fork、exec和waitpid的作用。例如，如何使用它们的返回值。
- en: SIGKILL vs SIGSTOP vs SIGINT.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SIGKILL与SIGSTOP与SIGINT。
- en: What signal is sent when you press CTRL-C
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下CTRL-C时发送了什么信号？
- en: Using kill from the shell or the kill POSIX call.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从shell或kill POSIX调用使用kill。
- en: Process memory isolation.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程内存隔离。
- en: Process memory layout (where is the heap, stack etc; invalid memory addresses).
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程内存布局（堆在哪里，栈等；无效的内存地址）。
- en: What is a fork bomb, zombie and orphan? How to create/remove them.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是fork炸弹、僵尸进程和孤儿进程？如何创建/删除它们。
- en: getpid vs getppid
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: getpid与getppid
- en: How to use the WAIT exit status macros WIFEXITED etc.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用WAIT退出状态宏WIFEXITED等。
- en: Questions/Exercises
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题/练习
- en: What is the difference between execs with a p and without a p? What does the
    operating system
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有p和不带p的execs有什么区别？操作系统是什么？
- en: How do you pass in command line arguments to `execl*`? How about `execv*`? What
    should be the first command line argument by convention?
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将命令行参数传递给`execl*`？`execv*`呢？按照惯例，第一个命令行参数应该是什么？
- en: How do you know if `exec` or `fork` failed?
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何知道`exec`或`fork`失败了？
- en: What is the `int *status` pointer passed into wait? When does wait fail?
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递给wait的`int *status`指针是什么？wait何时失败？
- en: What are some differences between `SIGKILL`, `SIGSTOP`, `SIGCONT`, `SIGINT`?
    What are the default behaviors? Which ones can you set up a signal handler for?
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SIGKILL`、`SIGSTOP`、`SIGCONT`、`SIGINT`之间有哪些区别？默认行为是什么？哪些可以设置信号处理程序？'
- en: What signal is sent when you press `CTRL-C`?
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下`CTRL-C`时发送了什么信号？
- en: My terminal is anchored to PID = 1337 and has just become unresponsive. Write
    me the terminal command and the C code to send `SIGQUIT` to it.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的终端锚定在PID = 1337，并且刚刚变得无响应。给我写一个终端命令和C代码，向其发送`SIGQUIT`。
- en: Can one process alter another processes memory through normal means? Why?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个进程能否通过正常手段改变另一个进程的内存？为什么？
- en: Where is the heap, stack, data, and text segment? Which segments can you write
    to? What are invalid memory addresses?
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆、栈、数据和文本段在哪里？哪些段可以写入？无效的内存地址是什么？
- en: Code me up a fork bomb in C (please don't run it).
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用C语言编写一个fork炸弹（请不要运行它）。
- en: What is an orphan? How does it become a zombie? How do I be a good parent?
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是孤儿进程？它如何变成僵尸进程？如何成为一个好的父进程？
- en: Don't you hate it when your parents tell you that you can't do something? Write
    me a program that sends `SIGSTOP` to your parent.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当父母告诉你不能做某事时，你是不是很讨厌？给我写一个程序，向你的父进程发送`SIGSTOP`。
- en: 'Write a function that fork exec waits an executable, and using the wait macros
    tells me if the process exited normally or if it was signaled. If the process
    exited normally, then print that with the return value. If not, then print the
    signal number that caused the process to terminate.[Back: Process Control, Part
    1: Wait macros, using signals](https://github.com/angrave/SystemProgramming/wiki/Process-Control,-Part-1:-Wait-macros,-using-signals)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个fork exec等待可执行文件的函数，并使用等待宏告诉我进程是否正常退出或被信号中断。如果进程正常退出，则打印返回值。如果不是，则打印导致进程终止的信号编号。

- en: 7 DESIGNING HANGMAN WITH FLOWCHARTS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7 使用流程图设计“猜词游戏”
- en: 原文：[https://inventwithpython.com/invent4thed/chapter7.html](https://inventwithpython.com/invent4thed/chapter7.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://inventwithpython.com/invent4thed/chapter7.html](https://inventwithpython.com/invent4thed/chapter7.html)
- en: '[Prev: Chapter 6 - Using the Debugger](chapter6.html) | [Next: Chapter 8 -
    Writing the Hangman Code](chapter8.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一章：第6章 - 使用调试器](chapter6.html) | [下一章：第8章 - 编写“猜词游戏”代码](chapter8.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
- en: In this chapter, you’ll design a Hangman game. This game is more complicated
    than our previous games but also more fun. Because the game is advanced, we’ll
    first carefully plan it out by creating a flowchart in this chapter. In [Chapter
    8](#calibre_link-49), we’ll actually write the code for Hangman.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将设计一个“猜词游戏”。这个游戏比我们之前的游戏更复杂，但也更有趣。因为游戏比较复杂，我们将首先通过在本章中创建一个流程图来仔细规划它。在[第8章](#calibre_link-49)中，我们将实际编写“猜词游戏”的代码。
- en: '**TOPICS COVERED IN THIS CHAPTER**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**本章涵盖的主题**'
- en: • ASCII art
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: • ASCII艺术
- en: • Designing a program with flowcharts
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用流程图设计程序
- en: '**How to Play Hangman**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**如何玩“猜词游戏”**'
- en: Hangman is a game for two people in which one player thinks of a word and then
    draws a blank line on the page for each letter in the word. The second player
    then tries to guess letters that might be in the word.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: “猜词游戏”是一个供两个人玩的游戏，其中一名玩家想一个单词，然后在页面上为单词中的每个字母画一条空白线。然后第二名玩家尝试猜测可能在单词中的字母。
- en: If the second player guesses the letter correctly, the first player writes the
    letter in the proper blank. But if the second player guesses incorrectly, the
    first player draws a single body part of a hanging man. The second player has
    to guess all the letters in the word before the hanging man is completely drawn
    to win the game.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第二名玩家猜测字母正确，第一名玩家会在正确的空白中写下这个字母。但如果第二名玩家猜错，第一名玩家会画出一个悬挂人的一个身体部位。第二名玩家必须在悬挂人完全被画出之前猜出单词中的所有字母才能赢得游戏。
- en: '**Sample Run of Hangman**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**“猜词游戏”的示例运行**'
- en: Here is an example of what the player might see when they run the Hangman program
    you’ll write in [Chapter 8](#calibre_link-49). The text the player enters is in
    bold.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是玩家在运行你将在[第8章](#calibre_link-49)中编写的“猜词游戏”程序时可能看到的示例。玩家输入的文本是粗体。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**ASCII Art**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**ASCII艺术**'
- en: 'The graphics for Hangman are keyboard characters printed on the screen. This
    type of graphic is called *ASCII art* (pronounced *ask-ee*), which was a sort
    of precursor to emoji. Here is a cat drawn in ASCII art:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “猜词游戏”的图形是打印在屏幕上的键盘字符。这种图形称为*ASCII艺术*（发音为*ask-ee*），这是表情符号的一种前身。这是一个用ASCII艺术绘制的猫的例子：
- en: '![image](../Images/7be17be16ae206a31d1c4dc950054bd5.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/7be17be16ae206a31d1c4dc950054bd5.png)'
- en: 'The pictures for the Hangman game will look like this ASCII art:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “猜词游戏”的图片将如下ASCII艺术所示：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Designing a Program with a Flowchart**'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用流程图设计程序**'
- en: This game is a bit more complicated than the ones you’ve seen so far, so let’s
    take a moment to think about how it’s put together. First you’ll create a flowchart
    (like the one in [Figure 5-1](#calibre_link-50) on [page 47](#calibre_link-51)
    for the Dragon Realm game) to help visualize what this program will do.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个游戏比你到目前为止见过的游戏要复杂一些，所以让我们花点时间思考它是如何组合在一起的。首先，你将创建一个流程图（就像[第5-1章](#calibre_link-50)上的那个，[第47页](#calibre_link-51)上的“龙之境界”游戏）来帮助可视化这个程序将要做什么。
- en: As discussed in [Chapter 5](#calibre_link-52), a flowchart is a diagram that
    shows a series of steps as boxes connected with arrows. Each box represents a
    step, and the arrows show the possible next steps. Put your finger on the START
    box of the flowchart and trace through the program by following the arrows to
    other boxes until you get to the END box. You can only move from one box to another
    in the direction of the arrow. You can never go backward unless there’s an arrow
    going back, like in the “Player already guessed this letter” box.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第5章](#calibre_link-52)中所讨论的，流程图是一种显示一系列步骤的图表，其中的框用箭头连接。每个框代表一个步骤，箭头显示可能的下一步。把手指放在流程图的START框上，然后沿着箭头跟踪程序，直到到达END框。你只能按箭头的方向从一个框移动到另一个框。除非有一个指向后退的箭头，否则你永远不能后退，就像“玩家已经猜过这个字母”框中那样。
- en: '[Figure 7-1](#calibre_link-53) is a complete flowchart for Hangman.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[图7-1](#calibre_link-53)是“猜词游戏”的完整流程图。'
- en: '![image](../Images/1a797a247a9826fddb92b47875e70798.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/1a797a247a9826fddb92b47875e70798.png)'
- en: '*Figure 7-1: The complete flowchart for the Hangman game*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-1：猜词游戏的完整流程图*'
- en: Of course, you don’t *have* to make a flowchart; you could just start writing
    code. But often once you start programming, you’ll think of things that must be
    added or changed. You may end up having to delete a lot of your code, which would
    be a waste of effort. To avoid this, it’s best to plan how the program will work
    before you start writing it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你不一定*要*制作流程图；你可以直接开始编写代码。但通常一旦你开始编程，你会想到必须添加或更改的东西。你可能最终不得不删除大量的代码，这将是一种浪费。为了避免这种情况，最好在开始编写代码之前计划程序将如何工作。
- en: '***Creating the Flowchart***'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建流程图***'
- en: Your flowcharts don’t have to look like the one in [Figure 7-1](#calibre_link-53).
    As long as *you* understand your flowchart, it will be helpful when you start
    coding. You can begin making a flowchart with just a START and an END box, as
    shown in [Figure 7-2](#calibre_link-54).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你的流程图不一定要像[图7-1](#calibre_link-53)中的那样。只要*你*能理解你的流程图，在你开始编码时它就会很有帮助。你可以从一个START和一个END框开始制作流程图，就像[图7-2](#calibre_link-54)中所示的那样。
- en: Now think about what happens when you play Hangman. First, the computer thinks
    of a secret word. Then the player guesses letters. Add boxes for these events,
    as shown in [Figure 7-3](#calibre_link-55). The new boxes in each flowchart have
    a dashed outline.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想想当你玩“猜词游戏”时会发生什么。首先，计算机会想一个秘密单词。然后玩家猜字母。为这些事件添加框，就像[图7-3](#calibre_link-55)中所示的那样。每个流程图中的新框都有虚线轮廓。
- en: '![image](../Images/1b0016a96026009a513a05bdf2ae07e3.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/1b0016a96026009a513a05bdf2ae07e3.png)'
- en: '*Figure 7-2: Begin your flowchart with a START and an END box.*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-2：用一个START和一个END框开始你的流程图。*'
- en: '![image](../Images/74f189c75f45959a001c76182512b00a.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/74f189c75f45959a001c76182512b00a.png)'
- en: '*Figure 7-3: Draw the first two steps of Hangman as boxes with descriptions.*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-3：用描述绘制“吊死人”的前两个步骤。
- en: But the game doesn’t end after the player guesses a letter. The program needs
    to check whether that letter is in the secret word.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但是玩家猜一个字母后游戏并不会结束。程序需要检查该字母是否在秘密单词中。
- en: '***Branching from a Flowchart Box***'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***从流程图框中分支出去***'
- en: 'There are two possibilities: the letter is either in the word or not. You’ll
    add two new boxes to the flowchart, one for each case. This creates a branch in
    the flowchart, as shown in [Figure 7-4](#calibre_link-56).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种可能性：字母要么在单词中，要么不在。你将为流程图添加两个新框，每种情况一个。这在流程图中创建了一个分支，如[图7-4](#calibre_link-56)所示。
- en: '![image](../Images/b94284749a6334ec9cc6d989f05584ca.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/b94284749a6334ec9cc6d989f05584ca.png)'
- en: '*Figure 7-4: The branch has two arrows going to separate boxes.*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-4：分支有两个箭头指向不同的框。
- en: If the letter is in the secret word, check whether the player has guessed all
    the letters and won the game. If the letter isn’t in the secret word, check whether
    the hanging man is complete and the player has lost. Add boxes for those cases
    too.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字母在秘密单词中，检查玩家是否猜对了所有字母并赢得了比赛。如果字母不在秘密单词中，检查吊死人是否完成并且玩家已经输了。也为这些情况添加框。
- en: The flowchart now looks like [Figure 7-5](#calibre_link-57).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 流程图现在看起来像[图7-5](#calibre_link-57)。
- en: '![image](../Images/33e260edfa7e95a4f424876f52027733.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/33e260edfa7e95a4f424876f52027733.png)'
- en: '*Figure 7-5: After the branch, the steps continue on their separate paths.*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-5：分支后，步骤继续沿着各自的路径。
- en: You don’t need an arrow from the “Letter is in secret word” box to the “Player
    ran out of guesses and loses” box, because it’s impossible for the player to lose
    if they have just guessed correctly. It’s also impossible for the player to win
    if they have just guessed incorrectly, so you don’t need to draw an arrow for
    that either.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要从“字母在秘密单词中”框到“玩家猜测次数用完并且失败”框的箭头，因为如果玩家刚刚猜对，他们不可能失败。如果玩家刚刚猜错，他们也不可能赢，所以你也不需要为此画箭头。
- en: '***Ending or Restarting the Game***'
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***结束或重新开始游戏***'
- en: Once the player has won or lost, ask them if they want to play again with a
    new secret word. If the player doesn’t want to play again, the program ends; otherwise,
    the program continues and thinks up a new secret word. This is shown in [Figure
    7-6](#calibre_link-58).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家赢了或输了之后，询问他们是否想要用新的秘密单词再玩一次。如果玩家不想再玩，程序结束；否则，程序继续并想出一个新的秘密单词。这在[图7-6](#calibre_link-58)中显示。
- en: '![image](../Images/134ebcf8f92dec2c7b69e237fd0fe080.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/134ebcf8f92dec2c7b69e237fd0fe080.png)'
- en: '*Figure 7-6: The flowchart branches after asking the player to play again.*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-6：在要求玩家再次玩之后，流程图分支出去。
- en: '***Guessing Again***'
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***再次猜测***'
- en: The flowchart looks mostly complete now, but we’re still missing a few things.
    For one, the player doesn’t guess a letter just once; they keep guessing letters
    until they win or lose. Draw two new arrows, as shown in [Figure 7-7](#calibre_link-59).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 流程图现在看起来大部分都完成了，但我们还缺少一些东西。首先，玩家不只猜一个字母；他们会一直猜字母直到赢或输。如[图7-7](#calibre_link-59)所示，画出两个新的箭头。
- en: What if the player guesses the same letter again? Rather than counting this
    letter again, allow them to guess a different letter. This new box is shown in
    [Figure 7-8](#calibre_link-60).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家再次猜相同的字母怎么办？与其再次计数这个字母，不如允许他们猜一个不同的字母。这个新框显示在[图7-8](#calibre_link-60)中。
- en: '![image](../Images/738768aa48df58e2758dd2f5ca00fadf.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/738768aa48df58e2758dd2f5ca00fadf.png)'
- en: '*Figure 7-7: The dashed arrows show the player can guess again.*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-7：虚线箭头显示玩家可以再次猜测。
- en: '![image](../Images/f3a8acda5dc034a785693e3cefa9be6d.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/f3a8acda5dc034a785693e3cefa9be6d.png)'
- en: '*Figure 7-8: Add a step in case the player guesses a letter they already guessed.*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-8：添加一个步骤，以防玩家猜测他们已经猜过的字母。
- en: If the player guesses the same letter twice, the flowchart leads back to the
    “Ask player to guess a letter” box.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家两次猜相同的字母，流程图会回到“要求玩家猜一个字母”的框。
- en: '***Offering Feedback to the Player***'
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***向玩家提供反馈***'
- en: The player needs to know how they’re doing in the game. The program should show
    them the hanging man drawing and the secret word (with blanks for the letters
    they haven’t guessed yet). These visuals will let them see how close they are
    to winning or losing the game.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家需要知道他们在游戏中的表现如何。程序应该向他们显示吊死人的图画和秘密单词（未猜出的字母用空格表示）。这些视觉效果将让他们看到自己离赢得或输掉比赛有多近。
- en: This information is updated every time the player guesses a letter. Add a “Show
    drawing and blanks to player” box to the flowchart between the “Come up with a
    secret word” box and the “Ask player to guess a letter” box, as shown in [Figure
    7-9](#calibre_link-61).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 每次玩家猜测一个字母时，此信息都会更新。在“想一个秘密单词”框和“要求玩家猜一个字母”框之间的流程图中添加一个“向玩家显示图画和空白”框，如[图7-9](#calibre_link-61)所示。
- en: '![image](../Images/02058b0d63f3844f90c029b2eb3613a5.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/02058b0d63f3844f90c029b2eb3613a5.png)'
- en: '*Figure 7-9: Add a “Show drawing and blanks to player” box to give the player
    feedback.*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图7-9：添加一个“向玩家显示图画和空白”框，以向玩家提供反馈。
- en: That looks good! This flowchart completely maps out the order of everything
    that can happen in the Hangman game. When you design your own games, a flowchart
    can help you remember everything you need to code.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错！这个流程图完全映射了“吊死人”游戏中可能发生的一切顺序。当你设计自己的游戏时，流程图可以帮助你记住需要编写的所有内容。
- en: '**Summary**'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: It may seem like a lot of work to sketch out a flowchart about the program first.
    After all, people want to play games, not look at flowcharts! But it is much easier
    to make changes and identify problems by thinking about how the program works
    *before* writing the code for it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先草拟程序的流程图可能看起来很费力。毕竟，人们想玩游戏，而不是看流程图！但是通过在编写代码之前考虑程序的工作原理，可以更容易地进行更改和识别问题。
- en: If you jump in to write the code first, you may discover problems that require
    you to change the code you’ve already written, wasting time and effort. And every
    time you change your code, you risk creating new bugs by changing too little or
    too much. It is much more efficient to know what you want to build before you
    build it. Now that we have a flowchart, let’s create the Hangman program in [Chapter
    8](#calibre_link-49)!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你首先开始编写代码，你可能会发现一些问题，这些问题需要你改变已经编写的代码，浪费时间和精力。每次改变代码时，你都有可能因改变过少或过多而产生新的错误。在构建之前知道你想要构建什么要高效得多。现在我们有了一个流程图，让我们在[第8章](#calibre_link-49)中创建猜词游戏程序！
- en: '[Prev: Chapter 6 - Using the Debugger](chapter6.html) | [Next: Chapter 8 -
    Writing the Hangman Code](chapter8.html)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一章：第6章 - 使用调试器](chapter6.html) | [下一章：第8章 - 编写猜词游戏代码](chapter8.html)'

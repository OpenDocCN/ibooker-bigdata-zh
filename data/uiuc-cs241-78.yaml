- en: 'Signals, Part 3: Raising signals'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号，第3部分：触发信号
- en: How do I send a signal to a process from the shell?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何从shell发送信号给进程？
- en: You already know one way to send a `SIG_INT` just type `CTRL-C` From the shell
    you can use `kill` (if you know the process id) and `killall` (if you know the
    process name)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经知道发送`SIG_INT`的一种方法，只需在shell中键入`CTRL-C`。您还可以使用`kill`（如果知道进程ID）和`killall`（如果知道进程名称）。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`killall` is similar except that it matches by program name. The next two example,
    sends a `SIGINT` and then `SIGKILL` to terminate the processes that are running
    `myprogram`'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`killall`类似，只是它是根据程序名称匹配。下面的两个例子，发送`SIGINT`然后`SIGKILL`来终止正在运行`myprogram`的进程。'
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How do I send a signal to a process from the running C program?
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何从正在运行的C程序发送信号给进程？
- en: Use `raise` or `kill`
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`raise`或`kill`
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For non-root processes, signals can only be sent to processes of the same user
    i.e. you cant just SIGKILL my processes! See kill(2) i.e. man -s2 for more details.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非根进程，信号只能发送给相同用户的进程，即你不能随便SIGKILL我的进程！参见kill(2)即man -s2以获取更多详细信息。
- en: How do I send a signal to a specific thread?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何向特定线程发送信号？
- en: Use `pthread_kill`
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pthread_kill`
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the example below, the newly created thread executing `func` will be interrupted
    by `SIGINT`
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，执行`func`的新创建的线程将被`SIGINT`中断。
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Will `pthread_kill( threadid, SIGKILL)` kill the process or thread?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`pthread_kill（threadid，SIGKILL）`会杀死进程还是线程？'
- en: It will kill the entire process. Though individual threads can set a signal
    mask, the signal disposition (the table of handlers/action performed for each
    signal) is *per-proces*s not *per-thread*. This means `sigaction` can be called
    from any thread because you will be setting a signal handler for all threads in
    the process.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 它将杀死整个进程。尽管单个线程可以设置信号掩码，但信号处理（每个信号执行的处理程序/动作表）是*每个进程*而不是*每个线程*。这意味着`sigaction`可以从任何线程调用，因为您将为进程中的所有线程设置信号处理程序。
- en: How do I catch (handle) a signal ?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何捕获（处理）信号？
- en: You can choose a handle pending signals asynchronously or synchronously.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择异步或同步地处理挂起的信号。
- en: Install a signal handler to asynchronously handle signals use `sigaction` (or,
    for simple examples, `signal` ).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 安装信号处理程序以异步处理信号使用`sigaction`（或者，对于简单的示例，`signal`）。
- en: To synchronously catch a pending signal use `sigwait` (which blocks until a
    signal is delivered) or `signalfd` (which also blocks and provides a file descriptor
    that can be `read()` to retrieve pending signals).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 同步捕获挂起信号使用`sigwait`（它会阻塞，直到信号被传递）或`signalfd`（它也会阻塞并提供一个文件描述符，可以使用`read()`来检索挂起的信号）。
- en: See `Signals, Part 4` for an example of using `sigwait`
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 参见`Signals, Part 4`以获取使用`sigwait`的示例

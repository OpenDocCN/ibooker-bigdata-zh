- en: 6 USING THE DEBUGGER
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6 使用调试器
- en: 原文：[https://inventwithpython.com/invent4thed/chapter6.html](https://inventwithpython.com/invent4thed/chapter6.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://inventwithpython.com/invent4thed/chapter6.html](https://inventwithpython.com/invent4thed/chapter6.html)
- en: '[Prev: Chapter 5 - Dragon Realm](chapter5.html) | [Next: Chapter 7 - Designing
    Hangman with Flowcharts](chapter7.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一章：第5章 - 龙之境界](chapter5.html) | [下一章：第7章 - 使用流程图设计猜词游戏](chapter7.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
- en: If you enter the wrong code, the computer won’t give you the right program.
    A computer program will always do what you tell it to, but what you tell it to
    do might not be what you actually *want* it to do. These errors are *bugs* in
    a computer program. Bugs happen when the programmer has not carefully thought
    about exactly what the program is doing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你输入错误的代码，计算机就不会给你正确的程序。计算机程序总是会按照你告诉它的去做，但你告诉它的可能不是你真正*想*让它做的。这些错误是计算机程序中的*bug*。当程序员没有仔细考虑程序到底在做什么时，就会出现bug。
- en: '**TOPICS COVERED IN THIS CHAPTER**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**本章涵盖的主题**'
- en: • Three types of errors
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: • 三种类型的错误
- en: • IDLE’s debugger
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: • IDLE的调试器
- en: • The Go and Quit buttons
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: • Go和Quit按钮
- en: • Stepping into, over, and out
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • 步入、步过和步出
- en: • Breakpoints
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: • 断点
- en: '**Types of Bugs**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**错误类型**'
- en: 'There are three types of bugs that can happen in your program:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你的程序可能会出现三种类型的错误：
- en: '**Syntax errors** This type of bug comes from typos. When the Python interpreter
    sees a syntax error, it’s because your code isn’t written in proper Python language.
    A Python program with even a single syntax error won’t run.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法错误** 这种bug来自于拼写错误。当Python解释器遇到语法错误时，是因为你的代码没有按照正确的Python语言编写。即使是一个语法错误的Python程序也无法运行。'
- en: '**Runtime errors** These are bugs that happen while the program is running.
    The program will work up until it reaches the line of code with the error, and
    then the program will terminate with an error message (this is called *crashing*).
    The Python interpreter will display a *traceback*: an error message showing the
    line containing the problem.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行时错误** 这些bug发生在程序运行时。程序会一直运行直到它到达有错误的那行代码，然后程序会以错误消息终止（这称为*崩溃*）。Python解释器会显示一个*回溯*：显示包含问题的那行的错误消息。'
- en: '**Semantic errors** These bugs—which are the trickiest to fix—don’t crash the
    program, but they prevent the program from doing what the programmer intended
    it to do. For example, if the programmer wants the variable `total` to be the
    *sum* of the values in variables `a`, `b`, and `c` but writes `total = a * b *
    c`, then the value in `total` will be wrong. This could crash the program later
    on, but it won’t be immediately obvious where the semantic bug happened.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**语义错误** 这些bug是最难修复的，它们不会使程序崩溃，但会阻止程序做程序员打算让它做的事情。例如，如果程序员希望变量`total`是变量`a`、`b`和`c`中值的*和*，但写成了`total
    = a * b * c`，那么`total`中的值就是错误的。这可能会在程序后面导致程序崩溃，但是语义bug发生的地方可能不会立即显而易见。'
- en: Finding bugs in a program can be hard, if you even notice them at all! When
    running your program, you might discover that sometimes functions are not called
    when they are supposed to be, or maybe they are called too many times. You might
    code the condition for a `while` loop incorrectly, so that it loops the wrong
    number of times. You might write a loop that never exits, a semantic error known
    as an *infinite loop*. To stop a program stuck in an infinite loop, you can press
    CTRL-C in the interactive shell.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 发现程序中的bug可能很困难，甚至你可能都没有注意到它们！运行程序时，你可能会发现有时函数没有在应该调用它们的时候被调用，或者可能调用了太多次。你可能会错误地编写`while`循环的条件，导致它循环的次数不对。你可能会写一个永远不会退出的循环，这种语义错误称为*无限循环*。要停止陷入无限循环的程序，你可以在交互式shell中按下CTRL-C。
- en: 'In fact, create an infinite loop by entering this code in the interactive shell
    (remember to press ENTER twice to let the interactive shell know you are done
    typing in the `while` block):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，通过在交互式shell中输入以下代码来创建一个无限循环（记得按两次ENTER来让交互式shell知道你已经输入完`while`块）：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now press and hold down CTRL-C to stop the program. The interactive shell will
    look like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按住CTRL-C来停止程序。交互式shell会显示如下内容：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `while` loop is always `True`, so the program will continue printing the
    same line forever until it is stopped by the user. In this example, we pressed
    CTRL-C to stop the infinite loop after the `while` loop had executed five times.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环总是`True`，所以程序会一直打印同一行，直到用户停止。在这个例子中，我们按下CTRL-C来停止无限循环，`while`循环执行了五次后。'
- en: '**The Debugger**'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**调试器**'
- en: It can be hard to figure out the source of a bug because the lines of code are
    executed quickly and the values in variables change so often. A *debugger* is
    a program that lets you step through your code one line at a time in the same
    order that Python executes each instruction. The debugger also shows you what
    values are stored in variables at each step.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要找出bug的来源可能很困难，因为代码行执行得很快，变量中的值也经常变化。*调试器*是一个程序，它让你逐行步进你的代码，按照Python执行每条指令的顺序。调试器还会显示每一步中变量中存储的值。
- en: '***Starting the Debugger***'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***启动调试器***'
- en: In IDLE, open the Dragon Realm game you made in [Chapter 5](#calibre_link-52).
    After opening the *dragon.py* file, click the interactive shell and then click
    **Debug** ![image](../Images/6213f577c15feb006bdab7161d1cfc75.png) **Debugger**
    to display the Debug Control window ([Figure 6-1](#calibre_link-86)).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在IDLE中，打开你在[第5章](#calibre_link-52)中制作的Dragon Realm游戏。打开*dragon.py*文件后，点击交互式shell，然后点击**调试**
    ![image](../Images/6213f577c15feb006bdab7161d1cfc75.png) **调试器**以显示调试控制窗口（[图6-1](#calibre_link-86)）。
- en: When the debugger is run, the Debug Control window will look like [Figure 6-2](#calibre_link-87).
    Make sure to select the **Stack**, **Locals**, **Source**, and **Globals** checkboxes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当调试器运行时，调试控制窗口会显示如[图6-2](#calibre_link-87)。确保选择**堆栈**、**本地**、**源**和**全局**复选框。
- en: Now when you run the Dragon Realm game by pressing F5, IDLE’s debugger will
    activate. This is called running a program *under a debugger*. When you run a
    Python program under the debugger, the program will stop before it executes the
    first instruction. If you click the file editor’s title bar (and you’ve selected
    the **Source** checkbox in the Debug Control window), the first instruction is
    highlighted in gray. The Debug Control window shows the execution is on line 1,
    which is the `import random` line.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您按下F5运行Dragon Realm游戏时，IDLE的调试器将激活。这被称为在调试器下运行程序。当您在调试器下运行Python程序时，程序将在执行第一条指令之前停止。如果您点击文件编辑器的标题栏（并且在调试控制窗口中选择了**源代码**复选框），第一条指令将会被用灰色突出显示。调试控制窗口显示执行位于第1行，即`import
    random`行。
- en: '![image](../Images/d728fd372ff64e66cb591855ebf010b3.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/d728fd372ff64e66cb591855ebf010b3.png)'
- en: '*Figure 6-1: The Debug Control window*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-1：调试控制窗口*'
- en: '![image](../Images/db717152b934f1c3d814a1f4b8d22fdd.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/db717152b934f1c3d814a1f4b8d22fdd.png)'
- en: '*Figure 6-2: Running the Dragon Realm game under the debugger*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-2：在调试器下运行Dragon Realm游戏*'
- en: '***Stepping Through the Program with the Debugger***'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用调试器逐步执行程序***'
- en: The debugger lets you execute one instruction at a time; this process is called
    *stepping*. Execute a single instruction now by clicking the **Step** button in
    the Debug Control window. Python will execute the `import random` instruction,
    and then stop before it executes the next instruction. The Debug Control window
    shows you what line is *about* to be executed when you click the Step button,
    so the execution should now be on line 2, the `import time` line. Click the **Quit**
    button to terminate the program for now.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器允许您一次执行一条指令；这个过程称为*步进*。现在通过点击调试控制窗口中的**步进**按钮来执行单个指令。Python将执行`import random`指令，然后在执行下一条指令之前停止。调试控制窗口会显示当您点击“步进”按钮时即将执行的行，所以现在执行应该在第2行，即`import
    time`行。点击**退出**按钮暂时终止程序。
- en: 'Here’s a summary of what happens when you click the Step button as you run
    Dragon Realm under a debugger. Press F5 to start running Dragon Realm again and
    then follow these instructions:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在调试器下运行Dragon Realm时点击“步进”按钮时发生的情况的摘要。按F5重新开始运行Dragon Realm，然后按照以下说明操作：
- en: Click the **Step** button twice to run the two `import` lines.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“步进”按钮两次来运行两个`import`行。
- en: Click the **Step** button three more times to execute the three `def` statements.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**步进**按钮三次来执行三个`def`语句。
- en: Click the **Step** button again to define the `playAgain` variable.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击**步进**按钮来定义`playAgain`变量。
- en: Click **Go** to run the rest of the program or click **Quit** to terminate the
    program.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**运行**来运行程序的其余部分，或点击**退出**来终止程序。
- en: The debugger skipped line 3 because it’s a blank line. Notice you can only step
    forward with the debugger; you can’t go backward.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器跳过了第3行，因为它是空行。请注意，您只能使用调试器向前步进；无法后退。
- en: '**Globals Area**'
  id: totrans-39
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**全局区域**'
- en: The *Globals area* in the Debug Control window is where all the global variables
    are displayed. Remember, global variables are variables created outside of any
    functions (that is, in the global scope).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 调试控制窗口中的*全局区域*是显示所有全局变量的地方。请记住，全局变量是在任何函数之外创建的变量（即在全局范围内）。
- en: The text next to the function names in the Globals area looks like `"<function
    checkCave at 0x012859B0>"`. The module names also have confusing-looking text
    next to them, like `"<module 'random' from 'C:\\Python31\\lib\\random.pyc'>"`.
    You don’t need to know what this text means to debug your programs. Just seeing
    whether the functions and modules are in the Globals area will tell you whether
    a function has been defined or a module has been imported.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在全局区域中函数名称旁边的文本看起来像`"<function checkCave at 0x012859B0>"`。模块名称旁边也有令人困惑的文本，如`"<module
    'random' from 'C:\\Python31\\lib\\random.pyc'>"`。您不需要知道这些文本的含义来调试程序。只需查看函数和模块是否在全局区域中，就可以知道函数是否已定义或模块是否已导入。
- en: You can also ignore the `__builtins__`, `__doc__`, `__name__`, and other similar
    lines in the Globals area. (Those are variables that appear in every Python program.)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以忽略全局区域中的`__builtins__`、`__doc__`、`__name__`和其他类似行。 （这些是出现在每个Python程序中的变量。）
- en: In the Dragon Realm program, the three `def` statements, which execute and define
    functions, will appear in the Globals area of the Debug Control window. When the
    `playAgain` variable is created, it will also show up in the Globals area. Next
    to the variable name will be the string `'yes'`. The debugger lets you see the
    values of all the variables in the program as the program runs. This is useful
    for fixing bugs.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Dragon Realm程序中，三个`def`语句，用于执行和定义函数，将出现在调试控制窗口的全局区域中。当创建`playAgain`变量时，它也将显示在全局区域中。变量名称旁边将是字符串'yes'。调试器允许您在程序运行时查看所有变量的值。这对于修复错误很有用。
- en: '**Locals Area**'
  id: totrans-44
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**局部区域**'
- en: In addition to the Globals area, there is a *Locals area*, which shows you the
    local scope variables and their values. The Locals area will contain variables
    only when the program execution is inside of a function. When the execution is
    in the global scope, this area is blank.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 除了全局区域，还有一个*局部区域*，它显示了局部范围变量及其值。当程序执行位于函数内部时，局部区域将包含变量。当执行位于全局范围时，此区域为空。
- en: '**The Go and Quit Buttons**'
  id: totrans-46
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**运行和退出按钮**'
- en: If you get tired of clicking the Step button repeatedly and just want the program
    to run normally, click the Go button at the top of the Debug Control window. This
    will tell the program to run normally instead of stepping.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您厌倦了反复点击“步进”按钮，只想让程序正常运行，点击调试控制窗口顶部的“运行”按钮。这将告诉程序正常运行而不是逐步执行。
- en: To terminate the program entirely, click the Quit button at the top of the Debug
    Control window. The program will exit immediately. This is helpful if you must
    start debugging again from the beginning of the program.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全终止程序，请点击调试控制窗口顶部的退出按钮。程序将立即退出。如果您必须从程序的开始处重新开始调试，这将非常有帮助。
- en: '**Stepping Into, Over, and Out**'
  id: totrans-49
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**步进进入、跳过和退出**'
- en: Start the Dragon Realm program with the debugger. Keep stepping until the debugger
    is at line 37\. As shown in [Figure 6-3](#calibre_link-88), this is the line with
    `displayIntro()`. When you click Step again, the debugger will jump into this
    function call and appear on line 5, the first line in the `displayIntro()` function.
    This kind of stepping, which is what you’ve been doing so far, is called *stepping
    into*.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用调试器启动Dragon Realm程序。保持步进直到调试器位于第37行。如[图6-3](#calibre_link-88)所示，这是带有`displayIntro()`的行。当您再次点击Step时，调试器将跳转到此函数调用并出现在第5行，即`displayIntro()`函数中的第一行。这种步进，就是您迄今为止一直在做的，称为*步进进入*。
- en: When the execution is paused at line 5, you’ll want to stop stepping. If you
    clicked Step once more, the debugger would step into the `print()` function. The
    `print()` function is one of Python’s built-in functions, so it isn’t useful to
    step through with the debugger. Python’s own functions—such as `print()`, `input()`,
    `str()`, and `randint()`—have been carefully checked for errors. You can assume
    they’re not the parts causing bugs in your program.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行暂停在第5行时，您将希望停止步进。如果再次单击Step，调试器将进入`print()`函数。`print()`函数是Python的内置函数之一，因此使用调试器逐步执行它并不有用。Python自己的函数，如`print()`、`input()`、`str()`和`randint()`，已经经过仔细检查，不会导致程序中的错误。您可以假设它们不是导致程序错误的部分。
- en: You don’t want to waste time stepping through the internals of the `print()`
    function. So, instead of clicking Step to step into the `print()` function’s code,
    click **Over**. This will *step over* the code inside the `print()` function.
    The code inside `print()` will be executed at normal speed, and then the debugger
    will pause once the execution returns from `print()`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您不希望浪费时间逐步执行`print()`函数的内部。因此，不要点击Step以进入`print()`函数的代码，而是点击**Over**。这将*跳过*`print()`函数内部的代码。`print()`内部的代码将以正常速度执行，然后一旦执行返回`print()`，调试器将暂停。
- en: Stepping over is a convenient way to skip stepping through code inside a function.
    The debugger will now be paused at line 38, `caveNumber = chooseCave()`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 跳过是一种方便的方式，可以跳过函数内部的代码。现在调试器将暂停在第38行，`caveNumber = chooseCave()`。
- en: Click **Step** again to step into the `chooseCave()` function. Keep stepping
    through the code until line 15, the `input()` call. The program will wait until
    you type a response into the interactive shell, just like when you run the program
    normally. If you try clicking the Step button now, nothing will happen because
    the program is waiting for a keyboard response.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 再次单击**Step**以进入`chooseCave()`函数。继续逐步执行代码，直到第15行，即`input()`调用。程序将等待您在交互式shell中键入响应，就像在正常运行程序时一样。如果您现在尝试单击Step按钮，将不会发生任何事情，因为程序正在等待键盘响应。
- en: '![image](../Images/3727196188599195afc23cbdd0be73d0.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/3727196188599195afc23cbdd0be73d0.png)'
- en: '*Figure 6-3: Keep stepping until you reach line 37.*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-3：保持步进直到达到第37行。*'
- en: Click back to the interactive shell and type which cave you want to enter. The
    blinking cursor must be on the bottom line in the interactive shell before you
    can type. Otherwise, the text you type will not appear.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 返回交互式shell并键入您想要进入的洞穴。在您键入之前，闪烁的光标必须位于交互式shell的底行。否则，您键入的文本将不会出现。
- en: Once you press ENTER, the debugger will continue to step through lines of code
    again.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦按下ENTER，调试器将继续逐行执行代码。
- en: Next, click the **Out** button on the Debug Control window. This is called *stepping
    out* because it will cause the debugger to step over as many lines as it needs
    to until the execution has returned from the function it is in. After it jumps
    out, the execution will be on the line after the one that called the function.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在调试控制窗口上点击**Out**按钮。这被称为*跳出*，因为它会导致调试器跳过尽可能多的行，直到执行返回所在的函数。跳出后，执行将位于调用该函数的下一行。
- en: If you are not inside a function, clicking Out will cause the debugger to execute
    all the remaining lines in the program. This is the same behavior that happens
    when you click the Go button.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不在一个函数内部，单击Out将导致调试器执行程序中的所有剩余行。这与单击Go按钮时发生的行为相同。
- en: 'Here’s a recap of what each button does:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是每个按钮的功能概述：
- en: '**Go** Executes the rest of the code as normal, or until it reaches a breakpoint
    (see “[Setting Breakpoints](#calibre_link-89)” on [page 73](#calibre_link-90)).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**Go**正常执行剩余的代码，或者直到达到断点（参见“[设置断点](#calibre_link-89)”第73页）。'
- en: '**Step** Executes one instruction or one step. If the line is a function call,
    the debugger will step into the function.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**Step**执行一条指令或一步。如果该行是一个函数调用，调试器将进入该函数。'
- en: '**Over** Executes one instruction or one step. If the line is a function call,
    the debugger won’t *step into* the function but instead will *step over* the call.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**Over**执行一条指令或一步。如果该行是一个函数调用，调试器不会*步进*进入函数，而是*跳过*该调用。'
- en: '**Out** Keeps stepping over lines of code until the debugger leaves the function
    it was in when Out was clicked. This *steps out* of the function.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**Out**保持跳过代码行，直到调试器离开单击Out时所在的函数。这会*跳出*该函数。'
- en: '**Quit** Immediately terminates the program.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 立即终止程序。
- en: Now that we know how to use the debugger, let’s try finding bugs in some programs.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何使用调试器，让我们尝试在一些程序中查找错误。
- en: '**Finding the Bug**'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**查找错误**'
- en: The debugger can help you find the cause of bugs in your program. As an example,
    here is a small program with a bug. The program comes up with a random addition
    problem for the user to solve. In the interactive shell, click **File** ![image](../Images/6213f577c15feb006bdab7161d1cfc75.png)
    **New Window** to open a new file editor window. Enter this program into that
    window and save it as *buggy.py*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器可以帮助您找出程序中的错误原因。例如，这是一个带有错误的小程序。该程序为用户提供一个随机的加法问题。在交互式shell中，单击**文件**![image](../Images/6213f577c15feb006bdab7161d1cfc75.png)**新建窗口**以打开一个新的文件编辑器窗口。将此程序输入到该窗口中，并将其保存为*buggy.py*。
- en: '*buggy.py*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*buggy.py*'
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Type the program exactly as it is shown, even if you can already tell what
    the bug is. Then run the program by pressing F5\. Here’s what it might look like
    when you run the program:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 按照显示的程序输入程序，即使你已经知道错误在哪里。然后按F5运行程序。运行程序时可能会看起来像这样：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: That’s a bug! The program doesn’t crash, but it’s not working correctly. The
    program says the user is wrong even if they enter the correct answer.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个错误！程序不会崩溃，但它没有正确工作。即使输入了正确答案，程序也会说用户是错误的。
- en: Running the program under a debugger will help find the bug’s cause. At the
    top of the interactive shell, click **Debug** ![image](../Images/6213f577c15feb006bdab7161d1cfc75.png)
    **Debugger** to display the Debug Control window. (Make sure you’ve checked the
    **Stack**, **Source**, **Locals**, and **Globals** checkboxes.) Then press F5
    in the file editor to run the program. This time it will run under the debugger.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试器下运行程序将有助于找到错误的原因。在交互式shell的顶部，点击**Debug** ![image](../Images/6213f577c15feb006bdab7161d1cfc75.png)
    **Debugger**来显示调试控制窗口。（确保你已经勾选了**Stack**、**Source**、**Locals**和**Globals**复选框。）然后在文件编辑器中按F5运行程序。这次它将在调试器下运行。
- en: 'The debugger starts at the `import random` line:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器从`import random`行开始。
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Nothing special happens here, so just click **Step** to execute it. You will
    see the `random` module added to the Globals area.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有发生特别的事情，所以只需点击**Step**来执行它。你会看到`random`模块添加到了全局区域。
- en: 'Click **Step** again to run line 2:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 再次点击**Step**运行第2行：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A new file editor window will appear with the *random.py* file. You have stepped
    inside the `randint()` function inside the `random` module. You know Python’s
    built-in functions won’t be the source of your bugs, so click **Out** to step
    out of the `randint()` function and back to your program. Then close the *random.py*
    file’s window. Next time, you can click Over to step over the `randint()` function
    instead of stepping into it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一个新的文件编辑器窗口将出现，其中包含*random.py*文件。你已经进入了`random`模块内部的`randint()`函数。你知道Python的内置函数不会是你的错误的源头，所以点击**Out**来从`randint()`函数中跳出，回到你的程序。然后关闭*random.py*文件的窗口。下次，你可以点击Over来跳过`randint()`函数的步骤，而不是进入它。
- en: 'Line 3 is also a `randint()` function call:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 第3行也是一个`randint()`函数调用：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Skip stepping into this code by clicking **Over**.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**Over**跳过进入这段代码的步骤。
- en: 'Line 4 is a `print()` call to show the player the random numbers:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 第4行是一个`print()`调用，用来显示随机数给玩家看：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You know what numbers the program will print even before it prints them! Just
    look at the Globals area of the Debug Control window. You can see the `number1`
    and `number2` variables, and next to them are the integer values stored in those
    variables.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至在打印它们之前就知道程序将打印什么数字！只需查看调试控制窗口的全局区域。你可以看到`number1`和`number2`变量，旁边是存储在这些变量中的整数值。
- en: The `number1` variable has the value `4` and the `number2` variable has the
    value `8`. (Your random numbers will probably be different.) When you click Step,
    the `str()` function will concatenate the string version of these integers, and
    the program will display the string in the `print()` call with these values. When
    I ran the debugger, it looked like [Figure 6-4](#calibre_link-91).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`number1`变量的值为`4`，`number2`变量的值为`8`。（你的随机数可能会不同。）当你点击Step时，`str()`函数将连接这些整数的字符串版本，并且程序将用这些值在`print()`调用中显示字符串。当我运行调试器时，它看起来像[图6-4](#calibre_link-91)。'
- en: Click **Step** from line 5 to execute `input()`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**Step**从第5行执行`input()`。
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The debugger waits until the player enters a response into the program. Enter
    the correct answer (in my case, 12) in the interactive shell. The debugger will
    resume and move down to line 6:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器会等待玩家在程序中输入响应。在交互式shell中输入正确的答案（在我的情况下是12）。调试器将恢复并移动到第6行：
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Line 6 is an `if` statement. The condition is that the value in `answer` must
    match the sum of `number1` and `number2`. If the condition is `True`, the debugger
    will move to line 7\. If the condition is `False`, the debugger will move to line
    9\. Click **Step** one more time to find out where it goes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 第6行是一个`if`语句。条件是`answer`的值必须与`number1`和`number2`的和相匹配。如果条件为`True`，调试器将移动到第7行。如果条件为`False`，调试器将移动到第9行。点击**Step**再次找出它去哪里了。
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![image](../Images/1d21e8fe269368a1a08e7b4274247a40.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/1d21e8fe269368a1a08e7b4274247a40.png)'
- en: '*Figure 6-4:* number1 *is set to* 4*, and* number2 *is set to* 8.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-4：*number1 *设置为* 4*，而* number2 *设置为* 8。'
- en: The debugger is now on line 9! What happened? The condition in the `if` statement
    must have been `False`. Look at the values for `number1`, `number2`, and `answer`.
    Notice that `number1` and `number2` are integers, so their sum would have also
    been an integer. But `answer` is a string.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在调试器在第9行！发生了什么？`if`语句中的条件必须是`False`。查看`number1`、`number2`和`answer`的值。注意`number1`和`number2`是整数，所以它们的和也将是一个整数。但`answer`是一个字符串。
- en: That means that `answer == number1 + number2` would have evaluated to `'12'
    == 12`. A string value and an integer value will never be equal to each other,
    so the condition evaluated to `False`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着`answer == number1 + number2`会被计算为`'12' == 12`。一个字符串值和一个整数值永远不会相等，所以条件计算为`False`。
- en: 'That is the bug in the program: the code uses `answer` when it should have
    used `int(answer)`. Change line 6 to `int(answer) == number1 + number2` and run
    the program again.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是程序中的错误：代码在应该使用`int(answer)`时使用了`answer`。将第6行改为`int(answer) == number1 + number2`，然后再次运行程序。
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now the program works correctly. Run it one more time and enter a wrong answer
    on purpose. You’ve now debugged this program! Remember, the computer will run
    your programs exactly as you type them, even if what you type isn’t what you intend.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在程序可以正确运行。再次运行程序，故意输入一个错误的答案。你现在已经调试了这个程序！记住，计算机会精确地按照你输入的程序来运行，即使你输入的不是你想要的。
- en: '**Setting Breakpoints**'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**设置断点**'
- en: Stepping through the code one line at a time might still be too slow. Often
    you’ll want the program to run at normal speed until it reaches a certain line.
    You can set a *breakpoint* on a line when you want the debugger to take control
    once the execution reaches that line. If you think there’s a problem with your
    code on, say, line 17, just set a breakpoint on that line (or maybe a few lines
    before that).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 逐行浏览代码可能仍然太慢。通常你会希望程序以正常速度运行，直到达到某一行。当你希望调试器在执行到达某一行时接管控制时，你可以在该行上设置一个*断点*。如果你认为你的代码有问题，比如在第17行，只需在该行（或者在该行之前几行）设置一个断点。
- en: When the execution reaches that line, the program will break into the debugger.
    Then you can step through lines to see what is happening. Clicking Go will execute
    the program normally until it reaches another breakpoint or the end of the program.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行到那一行时，程序将会进入调试器。然后你可以逐行查看发生了什么。点击“Go”将会正常执行程序，直到达到另一个断点或程序结束。
- en: To set a breakpoint on Windows, right-click the line in the file editor and
    select **Set Breakpoint** from the menu that appears. On OS X, CTRL-click to get
    to a menu and select **Set Breakpoint**. You can set breakpoints on as many lines
    as you want. The file editor highlights each breakpoint line in yellow. [Figure
    6-5](#calibre_link-92) shows an example of what a breakpoint looks like.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上设置断点，右键单击文件编辑器中的行，然后从出现的菜单中选择**Set Breakpoint**。在OS X上，CTRL-单击以打开菜单，然后选择**Set
    Breakpoint**。你可以在任意行上设置断点。文件编辑器会用黄色高亮显示每个断点行。[图6-5](#calibre_link-92)显示了一个断点的示例。
- en: '![image](../Images/51c9f1e766c95f43f6c2098e18216190.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/51c9f1e766c95f43f6c2098e18216190.png)'
- en: '*Figure 6-5: The file editor with two breakpoints set*'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-5：带有两个设置断点的文件编辑器*'
- en: To remove the breakpoint, click the line and select **Clear Breakpoint** from
    the menu that appears.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除断点，点击该行并从出现的菜单中选择**Clear Breakpoint**。
- en: '**Using Breakpoints**'
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用断点**'
- en: Next we’ll look at a program that calls `random.randint(0, 1)` to simulate coin
    flips. If the function returns the integer `1`, that will be heads, and if it
    returns the integer `0`, that will be tails. The `flips` variable will track how
    many coin flips have been done. The `heads` variable will track how many came
    up heads.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将看一个调用`random.randint(0, 1)`来模拟抛硬币的程序。如果函数返回整数`1`，那就是正面，如果返回整数`0`，那就是反面。`flips`变量将跟踪已经抛了多少次硬币。`heads`变量将跟踪有多少次是正面。
- en: The program will do coin flips 1,000 times. This would take a person over an
    hour to do, but the computer can do it in one second! There’s no bug in this program,
    but the debugger will let us look at the state of the program while it’s running.
    Enter the following code into the file editor and save it as *coinFlips.py*. If
    you get errors after entering this code, compare the code you typed to the book’s
    code with the online diff tool at *[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 程序将进行1000次抛硬币。这对一个人来说需要一个多小时，但计算机可以在一秒内完成！这个程序没有bug，但调试器可以让我们在程序运行时查看程序的状态。将以下代码输入到文件编辑器中，并保存为*coinFlips.py*。如果输入此代码后出现错误，请使用在线diff工具将你输入的代码与本书代码进行比较，网址为*[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*。
- en: '*coinFlips.py*'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '*coinFlips.py*'
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The program runs pretty fast. It spends more time waiting for the user to press
    ENTER than doing the coin flips. Let’s say you wanted to see it do coin flips
    one by one. On the interactive shell’s window, click **Debug** ![image](../Images/6213f577c15feb006bdab7161d1cfc75.png)
    **Debugger** to bring up the Debug Control window. Then press F5 to run the program.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 程序运行得相当快。它花费更多时间等待用户按下ENTER键，而不是进行抛硬币。假设你想看它一次抛一个硬币。在交互式shell窗口中，点击**Debug**
    ![image](../Images/6213f577c15feb006bdab7161d1cfc75.png) **Debugger**以打开调试控制窗口。然后按F5运行程序。
- en: The program starts in the debugger on line 1\. Press **Step** three times in
    the Debug Control window to execute the first three lines (that is, lines 1, 2,
    and 3). You’ll notice the buttons become disabled because `input()` was called
    and the interactive shell is waiting for the user to type something. Click the
    interactive shell and press ENTER. (Be sure to click beneath the text in the interactive
    shell; otherwise, IDLE might not receive your keystrokes.)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 程序将在调试器中从第1行开始。在调试控制窗口中按三次**Step**来执行前三行（即第1、2和3行）。你会注意到按钮变为禁用状态，因为调用了`input()`，交互式shell正在等待用户输入。点击交互式shell并按ENTER键。（确保点击交互式shell文本下方；否则，IDLE可能无法接收到你的按键输入。）
- en: You can click Step a few more times, but you’ll find that it would take quite
    a while to get through the entire program. Instead, set a breakpoint on lines
    12, 14, and 16 so that the debugger breaks in when `flips` is equal to `900`,
    `100`, and `500`, respectively. The file editor will highlight these lines as
    shown in [Figure 6-6](#calibre_link-93).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以点击“Step”几次，但你会发现要完整运行整个程序需要相当长的时间。相反，设置断点在第12、14和16行，这样当`flips`等于`900`、`100`和`500`时，调试器就会中断。文件编辑器将会用高亮显示这些行，如[图6-6](#calibre_link-93)所示。
- en: '![image](../Images/6101551abf247b90fbb462e756a4531c.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/6101551abf247b90fbb462e756a4531c.png)'
- en: '*Figure 6-6: Three breakpoints set in* coinflips.py'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-6：在*coinflips.py*中设置了三个断点*'
- en: After setting the breakpoints, click **Go** in the Debug Control window. The
    program will run at normal speed until it reaches the next breakpoint. When `flip`
    is set to `100`, the condition for the `if` statement on line 13 is `True`. This
    causes line 14 (where there’s a breakpoint set) to execute, which tells the debugger
    to stop the program and take over. Look at the Globals area of the Debug Control
    window to see what the values of `flips` and `heads` are.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 设置断点后，在调试控制窗口中点击**Go**。程序将以正常速度运行，直到达到下一个断点。当`flip`设置为`100`时，第13行的`if`语句条件为`True`。这导致执行第14行（其中设置了断点），告诉调试器停止程序并接管控制。查看调试控制窗口的全局区域，看看`flips`和`heads`的值是多少。
- en: Click **Go** again and the program will continue until it reaches the next breakpoint
    on line 16\. Again, see how the values in `flips` and `heads` have changed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 再次点击**Go**，程序将继续执行，直到达到第16行的下一个断点。再次查看`flips`和`heads`中的值已经发生了变化。
- en: Click **Go** again to continue the execution until the next breakpoint is reached,
    which is on line 12.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 再次点击**Go**以继续执行，直到达到下一个断点，即第12行。
- en: '**Summary**'
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Writing programs is only the first part of programming. The next part is making
    sure the code you wrote actually works. Debuggers let you step through the code
    one line at a time. You can examine which lines execute in what order and what
    values the variables contain. When stepping through line by line is too slow,
    you can set breakpoints to stop the debugger only at the lines you want.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 编写程序只是编程的第一部分。下一部分是确保您编写的代码实际上能够正常工作。调试器可以让您逐行执行代码。您可以检查哪些行以什么顺序执行，以及变量包含什么值。当逐行执行太慢时，您可以设置断点，以便在您想要的行处停止调试器。
- en: Using the debugger is a great way to understand what a program is doing. While
    this book provides explanations of all the game code we use, the debugger can
    help you find out more on your own.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 使用调试器是了解程序正在执行的操作的好方法。虽然本书提供了我们使用的所有游戏代码的解释，但调试器可以帮助您自己找出更多信息。
- en: '[Prev: Chapter 5 - Dragon Realm](chapter5.html) | [Next: Chapter 7 - Designing
    Hangman with Flowcharts](chapter7.html)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一页：第5章 - 龙之领域](chapter5.html) | [下一页：第7章 - 使用流程图设计猜词游戏](chapter7.html)'

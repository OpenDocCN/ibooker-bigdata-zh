- en: 'Virtual Memory, Part 1: Introduction to Virtual Memory'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟内存，第1部分：虚拟内存简介
- en: What is Virtual Memory?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是虚拟内存？
- en: In very simple embedded systems and early computers, processes directly access
    memory i.e. "Address 1234" corresponds to a particular byte stored in a particular
    part of physical memory. In modern systems, this is no longer the case. Instead
    each process is isolated; and there is a translation process between the address
    of a particular CPU instruction or piece of data of a process and the actual byte
    of physical memory ("RAM"). Memory addresses are no longer 'real'; the process
    runs inside virtual memory. Virtual memory not only keeps processes safe (because
    one process cannot directly read or modify another process's memory) it also allows
    the system to efficiently allocate and re-allocate portions of memory to different
    processes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在非常简单的嵌入式系统和早期计算机中，进程直接访问内存，即“地址1234”对应于物理内存的特定部分中存储的特定字节。在现代系统中，情况已经不再是这样。相反，每个进程都是隔离的；并且存在着一个地址转换过程，将进程的特定CPU指令或数据的地址与物理内存（“RAM”）的实际字节对应起来。内存地址不再是“真实的”；进程在虚拟内存中运行。虚拟内存不仅可以保护进程的安全（因为一个进程不能直接读取或修改另一个进程的内存），还允许系统有效地分配和重新分配内存的部分给不同的进程。
- en: What is the MMU?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MMU是什么？
- en: The Memory Management Unit is part of the CPU. It converts a virtual memory
    address into a physical address. The MMU may also interrupt the CPU if there is
    currently no mapping from a particular virtual address to a physical address or
    if the current CPU instruction attempts to write to location that the process
    only has read-access.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 内存管理单元是CPU的一部分。它将虚拟内存地址转换为物理地址。如果当前没有从特定虚拟地址到物理地址的映射，或者当前CPU指令尝试写入进程只有读取访问权限的位置，MMU也可能中断CPU。
- en: So how do we convert a virtual address into a physical address?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么我们如何将虚拟地址转换为物理地址？
- en: Imagine you had a 32 bit machine. Pointers can hold 32 bits i.e. they can address
    2^32 different locations i.e. 4GB of memory (we will be following the standard
    convention of one address can hold one byte).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你有一台32位的机器。指针可以保存32位，即它们可以寻址2^32个不同的位置，即4GB的内存（我们将遵循一个地址可以保存一个字节的标准约定）。
- en: Imagine we had a large table - here's the clever part - stored in memory! For
    every possible address (all 4 billion of them) we will store the 'real' i.e. physical
    address. Each physical address will need 4 bytes (to hold the 32 bits). This scheme
    would require 16 billion bytes to store all of entries. Oops - our lookup scheme
    would consume all of the memory that we could possibly buy for our 4GB machine.
    We need to do better than this. Our lookup table better be smaller than the memory
    we have otherwise we will have no space left for our actual programs and operating
    system data. The solution is to chunk memory into small regions called 'pages'
    and 'frames' and use a lookup table for each page.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 想象我们有一个大表 - 这是聪明的部分 - 存储在内存中！对于每个可能的地址（共40亿个），我们将存储“真实”即物理地址。每个物理地址将需要4个字节（以容纳32位）。这种方案将需要160亿字节来存储所有条目。哎呀
    - 我们的查找方案将消耗我们可能为我们的4GB机器购买的所有内存。我们需要做得比这更好。我们的查找表最好比我们拥有的内存小，否则我们将没有空间留给我们的实际程序和操作系统数据。解决方案是将内存分成称为“页面”和“帧”的小区域，并为每个页面使用查找表。
- en: What is a page? How many of them are there?
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是页面？有多少个页面？
- en: A page is a block of virtual memory. A typical block size on Linux operating
    system is 4KB (i.e. 2^12 addresses), though you can find examples of larger blocks.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 页面是一块虚拟内存。Linux操作系统上的典型块大小为4KB（即2^12个地址），尽管您可以找到更大块的示例。
- en: So rather than talking about individual bytes we can talk about blocks of 4KBs,
    each block is called a page. We can also number our pages ("Page 0" "Page 1" etc)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们不再谈论单个字节，而是谈论4KB的块，每个块称为一个页面。我们还可以对我们的页面进行编号（“页面0”“页面1”等）
- en: 'EX: How many pages are there in a 32bit machine (assume page size of 4KB)?'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 例如：32位机器有多少页（假设页面大小为4KB）？
- en: 'Answer: 2^32 address / 2^12 = 2^20 pages.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 答案：2^32地址 / 2^12 = 2^20页。
- en: Remember that 2^10 is 1024, so 2^20 is a bit more than one million.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 记住2^10是1024，所以2^20略大于一百万。
- en: For a 64 bit machine, 2^64 / 2^12 = 2^52, which is roughly 10^15 pages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于64位机器，2^64 / 2^12 = 2^52，大约是10^15页。
- en: What is a frame?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是帧？
- en: A frame (or sometimes called a 'page frame') is a block of *physical memory*
    or RAM (=Random Access Memory). This kind of memory is occasionally called 'primary
    storage' (and contrasted with slower, secondary storage such as spinning disks
    that have lower access times)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 帧（有时称为“页帧”）是一块*物理内存*或RAM（=随机存取存储器）。这种内存有时被称为“主存储器”（与较慢的辅助存储器相对，例如具有较低访问时间的旋转磁盘）
- en: A frame is the same number of bytes as a virtual page. If a 32 bit machine has
    2^32 (4GB) of RAM, then there will be the same number of them in the addressable
    space of the machine. It's unlikely that a 64 bit machine will ever have 2^64
    bytes of RAM - can you see why?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个帧的字节数与虚拟页面相同。如果32位机器有2^32（4GB）的RAM，那么在机器的可寻址空间中将有相同数量的帧。64位机器不太可能有2^64字节的RAM
    - 你能看出为什么吗？
- en: What is a page table and how big is it?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是页面表，它有多大？
- en: A page table is a mapping between a page to the frame. For example Page 1 might
    be mapped to frame 45, page 2 mapped to frame 30\. Other frames might be currently
    unused or assigned to other running processes, or used internally by the operating
    system.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 页面表是页面到帧之间的映射。例如，页面1可能映射到帧45，页面2映射到帧30。其他帧可能目前未使用或分配给其他正在运行的进程，或者由操作系统内部使用。
- en: A simple page table is just an array, `int frame = table[ page_num ];`
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的页面表就是一个数组，`int frame = table[ page_num ];`
- en: For a 32 bit machine with 4KB pages, each entry needs to hold a frame number
    - i.e. 20 bits because we calculated there are 2^20 frames. That's 2.5 bytes per
    entry! In practice, we'll round that up to 4 bytes per entry and find a use for
    those spare bits. With 4 bytes per entry x 2^20 entries = 4 MB of physical memory
    are required to hold the page table.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个32位机器，每个4KB页面的条目需要保存一个帧号-即20位，因为我们计算出有2^20个帧。每个条目需要2.5个字节！实际上，我们将每个条目四舍五入到4个字节，并找到这些多余位的用途。每个条目需要4个字节x
    2^20个条目= 4MB的物理内存用于存储页表。
- en: For a 64 bit machine with 4KB pages, each entry needs 52 bits. Let's round up
    to 64 bits (8 bytes) per entry. With 2^52 entries thats 2^55 bytes (roughly 40
    peta bytes...) Oops our page table is too large.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个64位机器，每个4KB页面的条目需要52位。让我们将每个条目四舍五入到64位（8字节）。有2^52个条目，大约需要2^55字节（大约40PB...）哎呀，我们的页表太大了。
- en: In 64 bit architectures memory addresses are sparse, so we need a mechanism
    to reduce the page table size, given that most of the entries will never be used.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在64位体系结构中，内存地址是稀疏的，因此我们需要一种机制来减小页表的大小，因为大多数条目永远不会被使用。
- en: '![](../Images/bddaf711271daa8286dff3dbac48867e.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bddaf711271daa8286dff3dbac48867e.jpg)'
- en: A visual example of the page table is here. Imagine accessing an array and grabbing
    array elements.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个页表的视觉示例。想象访问一个数组并获取数组元素。
- en: What is the offset and how is it used?
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 偏移量是什么，它是如何使用的？
- en: Remember our page table maps pages to frames, but each page is a block of contiguous
    addresses. How do we calculate which particular byte to use inside a particular
    frame? The solution is to re-use the lowest bits of the virtual memory address
    directly. For example, suppose our process is reading the following address- `VirtualAddress
    = 11110000111100001111000010101010 (binary)`
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们的页表将页面映射到帧，但每个页面都是一块连续的地址。我们如何计算在特定帧内使用哪个特定字节？解决方案是直接重用虚拟内存地址的最低位。例如，假设我们的进程正在读取以下地址-
    `VirtualAddress = 11110000111100001111000010101010（二进制）`
- en: On a machine with page size 256 Bytes, then the lowest 8 bits (10101010) will
    be used as the offset. The remaining upper bits will be the page number (111100001111000011110000).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面大小为256字节的机器上，最低的8位（10101010）将被用作偏移量。剩下的上位位将是页号（111100001111000011110000）。
- en: Multi-level page tables
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多级页表
- en: Multi-level pages are one solution to the page table size issue for 64 bit architectures.
    We'll look at the simplest implementation - a two level page table. Each table
    is a list of pointers that point to the next level of tables, not all sub-tables
    need to exist. An example, two level page table for a 32 bit architecture is shown
    below-
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 多级页面是64位体系结构的页表大小问题的一种解决方案。我们将看看最简单的实现-两级页表。每个表都是指向下一级表的指针列表，不需要所有子表都存在。下面是32位体系结构的两级页表的示例-
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the above scheme, determining the frame number requires two memory reads:
    The topmost 10 bits are used in a directory of page tables. If 2 bytes are used
    for each entry, we only need 2KB to store this entire directory. Each subtable
    will point to physical frames (i.e. required 4 bytes to store the 20 bits). However,
    for processes with only tiny memory needs, we only need to specify entries for
    low memory address (for the heap and program code) and high memory addresses (for
    the stack). Each subtable is 1024 entries x 4 bytes i.e. 4KB for each subtable.
    Thus the total memory overhead for our multi-level page table has shrunk from
    4MB (for the single level) to 3 frames of memory (12KB) !'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述方案中，确定帧号需要两次内存读取：使用顶部的10位在页表目录中。如果每个条目使用2个字节，我们只需要2KB来存储整个目录。每个子表将指向物理帧（即需要4个字节来存储20位）。然而，对于只需要微小内存的进程，我们只需要指定低内存地址（用于堆和程序代码）和高内存地址（用于堆栈）的条目。每个子表是1024个条目x
    4个字节，即每个子表需要4KB。因此，我们的多级页表的总内存开销已经从4MB（单级）减少到3帧内存（12KB）！
- en: Do page tables make memory access slower? (And what's a TLB)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 页表会使内存访问变慢吗？（TLB是什么）
- en: Yes - Significantly ! (But thanks to clever hardware, usually no...) Compared
    to reading or writing memory directly. For a single page table, our machine is
    now twice as slow! (Two memory accesses are required) For a two-level page table,
    memory access is now three times as slow. (Three memory accesses are required)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 是的-显著！（但由于聪明的硬件，通常不会...）与直接读取或写入内存相比。对于单个页表，我们的机器现在慢了一倍！（需要两次内存访问）对于两级页表，内存访问现在慢了三倍。（需要三次内存访问）
- en: To overcome this overhead, the MMU includes an associative cache of recently-used
    virtual-page-to-frame lookups. This cache is called the TLB ("translation lookaside
    buffer"). Everytime a virtual address needs to be translated into a physical memory
    location, the TLB is queried in parallel to the page table. For most memory accesses
    of most programs, there is a significant chance that the TLB has cached the results.
    However if a program does not have good cache coherence (for example is reading
    from random memory locations of many different pages) then the TLB will not have
    the result cache and now the MMU must use the much slower page table to determine
    the physical frame.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服这种开销，MMU包括一个最近使用的虚拟页到帧查找的关联缓存。这个缓存被称为TLB（“转换旁路缓冲区”）。每当需要将虚拟地址转换为物理内存位置时，TLB与页表并行查询。对于大多数程序的大多数内存访问，TLB缓存结果的机会很大。但是，如果一个程序没有良好的缓存一致性（例如从许多不同页面的随机内存位置读取），那么TLB将不会有结果缓存，现在MMU必须使用速度慢得多的页表来确定物理帧。
- en: '![](../Images/ef4830cf8767dd32936281aca42c8eac.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ef4830cf8767dd32936281aca42c8eac.jpg)'
- en: This may be how one splits up a multi level page table.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是如何分割多级页表的方式。
- en: Advanced Frames and Page Protections
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级帧和页面保护
- en: Can frames be shared between processes? Can they be specialized
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 帧可以在进程之间共享吗？它们可以被专门化吗？
- en: Yes! In addition to storing the frame number, the page table can be used to
    store whether a process can write or only read a particular frame. Read only frames
    can then be safely shared between multiple processes. For example, the C-library
    instruction code can be shared between all processes that dynamically load the
    code into the process memory. Each process can only read that memory. Meaning
    that if you try to write to a read-only page in memory you will get a `SEGFAULT`.
    That is why sometimes memory accesses segfault and sometimes they don't, it all
    depends on if your hardware says that you can access.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！除了存储帧编号之外，页面表还可以用于存储进程是否可以写入或只读特定帧。只读帧可以安全地在多个进程之间共享。例如，C库指令代码可以在所有动态将代码加载到进程内存中的进程之间共享。每个进程只能读取该内存。这意味着如果您尝试写入内存中的只读页面，您将收到`SEGFAULT`。这就是为什么有时内存访问会导致段错误，有时不会，这完全取决于您的硬件是否允许您访问。
- en: In addition, processes can share a page with a child process using the `mmap`
    system call. `mmap` is an interesting call because instead of tying each virtual
    address to a physical frame, it ties it to something else. That something else
    can be a file, a GPU unit, or any other memory mapped operation that you can think
    of! Writing to the memory address may write through to the device or the write
    may be paused by the operating system but this is a very powerful abstraction
    because often the operating system is able to perform optimizations (multiple
    processes memory mapping the same file can have the kernel create one mapping).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，进程可以使用`mmap`系统调用与子进程共享页面。`mmap`是一个有趣的调用，因为它不是将每个虚拟地址绑定到物理帧，而是绑定到其他东西。这个其他东西可以是文件、GPU单元或者你能想到的任何其他内存映射操作！写入内存地址可能会直接写入设备，或者写入可能会被操作系统暂停，但这是一个非常强大的抽象，因为操作系统通常能够执行优化（多个进程内存映射相同的文件可以让内核创建一个映射）。
- en: What else is stored in the page table and why?
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 页面表中还存储了什么，以及为什么？
- en: In addition to read-only bit and usage statistics discussed above, it is common
    to store at least read-only, modification and execution information.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上面讨论的只读位和使用统计信息之外，通常至少存储只读、修改和执行信息。
- en: What's a page fault?
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是页面故障？
- en: A page fault is when a running program tries to access some virtual memory in
    its address space that is not mapped to physical memory. Page faults will also
    occur in other situations.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 页面故障是指运行中的程序尝试访问其地址空间中未映射到物理内存的某些虚拟内存。页面故障也会在其他情况下发生。
- en: There are three types of Page Faults
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种类型的页面故障
- en: '**Minor** If there is no mapping yet for the page, but it is a valid address.
    This could be memory asked for by `sbrk(2)` but not written to yet meaning that
    the operating system can wait for the first write before allocating space. The
    OS simply makes the page, loads it into memory, and moves on.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**次要** 如果页面尚未映射，但是是有效地址。这可能是`sbrk(2)`要求的内存，但尚未写入，这意味着操作系统可以在分配空间之前等待第一次写入。操作系统只需创建页面，将其加载到内存中，然后继续进行。'
- en: '**Major** If the mapping to the page is not in memory but on disk. What this
    will do is swap the page into memory and swap another page out. If this happens
    frequently enough, your program is said to *thrash* the MMU.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**主要** 如果页面的映射不在内存中而在磁盘上。这将会将页面交换到内存中，并将另一个页面交换出去。如果这种情况发生频繁，您的程序就会被称为*抖动*MMU。'
- en: '**Invalid** When you try to write to a non-writable memory address or read
    to a non-readable memory address. The MMU generates an invalid fault and the OS
    will usually generate a `SIGSEGV` meaning segmentation violation meaning that
    you wrote outside the segment that you could write to.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**无效** 当您尝试写入不可写内存地址或读取不可读内存地址时。MMU会生成一个无效故障，操作系统通常会生成一个`SIGSEGV`，表示分段违规，这意味着您写入了超出您可以写入的段的位置。'
- en: Read-only bit
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 只读位
- en: The read-only bit marks the page as read-only. Attempts to write to the page
    will cause a page fault. The page fault will then be handled by the Kernel. Two
    examples of the read-only page include sharing the c runtime library between multiple
    processes (for security you wouldn't want to allow one process to modify the library);
    and Copy-On-Write where the cost of duplicating a page can be delayed until the
    first write occurs.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 只读位将页面标记为只读。尝试写入页面将导致页面故障。然后内核将处理页面故障。只读页面的两个例子包括在多个进程之间共享c运行时库（出于安全考虑，您不希望允许一个进程修改库）；以及写时复制，其中复制页面的成本可以延迟到第一次写入发生时。
- en: Dirty bit
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 脏位
- en: '[http://en.wikipedia.org/wiki/Page_table#Page_table_data](http://en.wikipedia.org/wiki/Page_table#Page_table_data)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://en.wikipedia.org/wiki/Page_table#Page_table_data](http://en.wikipedia.org/wiki/Page_table#Page_table_data)'
- en: The dirty bit allows for a performance optimization. A page on disk that is
    paged in to physical memory, then read from, and subsequently paged out again
    does not need to be written back to disk, since the page hasn't changed. However,
    if the page was written to after it's paged in, its dirty bit will be set, indicating
    that the page must be written back to the backing store. This strategy requires
    that the backing store retain a copy of the page after it is paged in to memory.
    When a dirty bit is not used, the backing store need only be as large as the instantaneous
    total size of all paged-out pages at any moment. When a dirty bit is used, at
    all times some pages will exist in both physical memory and the backing store.
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 脏位允许进行性能优化。从磁盘分页到物理内存，然后再次读取，然后再次分页出去的页面不需要写回磁盘，因为页面没有更改。但是，如果页面在分页后被写入，其脏位将被设置，表示页面必须写回备份存储。这种策略要求备份存储在将页面分页到内存后保留页面的副本。当不使用脏位时，备份存储只需与任何时刻分页出的所有页面的瞬时总大小一样大。当使用脏位时，始终会存在一些页面既存在于物理内存中又存在于备份存储中。
- en: Execution bit
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行位
- en: 'The execution bit defines whether bytes in a page can be executed as CPU instructions.
    By disabling a page, it prevents code that is maliciously stored in the process
    memory (e.g. by stack overflow) from being easily executed. (further reading:
    [http://en.wikipedia.org/wiki/NX_bit#Hardware_background](http://en.wikipedia.org/wiki/NX_bit#Hardware_background))'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 执行位定义了页面中的字节是否可以作为CPU指令执行。通过禁用页面，可以防止恶意存储在进程内存中的代码（例如通过堆栈溢出）被轻易执行。（更多阅读：[http://en.wikipedia.org/wiki/NX_bit#Hardware_background](http://en.wikipedia.org/wiki/NX_bit#Hardware_background)）
- en: Find out more
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解更多
- en: A lower level more and more technical discussion of paging and page bits on
    x86 platform is discussed at [[http://wiki.osdev.org/Paging](http://wiki.osdev.org/Paging)]
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在x86平台上，有关分页和页面位的更低级别的技术讨论可在[[http://wiki.osdev.org/Paging](http://wiki.osdev.org/Paging)]找到。

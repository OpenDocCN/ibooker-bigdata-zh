- en: 'Memory, Part 1: Heap Memory Introduction'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存，第1部分：堆内存介绍
- en: C Dynamic Memory Allocation
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C动态内存分配
- en: What happens when I call malloc?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当我调用malloc时会发生什么？
- en: The function `malloc` is a C library call and is used to reserve a contiguous
    block of memory. Unlike stack memory, the memory remains allocated until `free`
    is called with the same pointer. There is also `calloc` and `realloc` which are
    discussed below.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`malloc`是一个C库调用，用于保留一块连续的内存。与堆栈内存不同，内存保持分配状态，直到使用相同指针调用`free`。还有`calloc`和`realloc`，下面将讨论它们。
- en: Can malloc fail?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: malloc可能失败吗？
- en: If `malloc` fails to reserve any more memory then it returns `NULL`. Robust
    programs should check the return value. If your code assumes `malloc` succeeds
    and it does not, then your program will likely crash (segfault) when it tries
    to write to address 0.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`malloc`无法保留更多内存，则返回`NULL`。健壮的程序应该检查返回值。如果您的代码假设`malloc`成功，但实际上没有成功，那么当它尝试写入地址0时，您的程序很可能会崩溃（段错误）。
- en: Where is the heap and how big is it?
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆在哪里，有多大？
- en: The heap is part of the process memory and it does not have a fixed size. Heap
    memory allocation is performed by the C library when you call `malloc` (`calloc`,
    `realloc`) and `free`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 堆是进程内存的一部分，它没有固定的大小。当您调用`malloc`（`calloc`，`realloc`）和`free`时，C库将执行堆内存分配。
- en: 'First a quick review on process memory: A process is a running instance of
    your program. Each process has its own address space. For example on a 32 bit
    machine your process gets about 4 billion addresses to play with, however not
    all of these are valid or even mapped to actual physical memory (RAM). Inside
    the process''s memory you will find the executable code, space for the stack,
    environment variables, global (static) variables and the heap.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先快速回顾一下进程内存：进程是程序的运行实例。每个进程都有自己的地址空间。例如，在32位机器上，您的进程大约有40亿个地址可供使用，但并非所有这些地址都是有效的，甚至映射到实际的物理内存（RAM）。在进程的内存中，您将找到可执行代码、堆栈空间、环境变量、全局（静态）变量和堆。
- en: By calling `sbrk` the C library can increase the size of the heap as your program
    demands more heap memory. As the heap and stack (one for each thread) need to
    grow, we put them at opposite ends of the address space. So for typical architectures
    the heap will grow upwards and the stack grows downwards.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用`sbrk`，C库可以根据程序对堆内存的需求增加堆的大小。由于堆和堆栈（每个线程一个）需要增长，我们将它们放在地址空间的相对两端。因此，对于典型的架构，堆将向上增长，堆栈向下增长。
- en: 'Truthiness: Modern operating system memory allocators no longer need `sbrk`
    - instead they can request independent regions of virtual memory and maintain
    multiple memory regions. For example gigabyte requests may be placed in a different
    memory region than small allocation requests. However this detail is an unwanted
    complexity: The problems of fragmentation and allocating memory efficiently still
    apply, so we will ignore this implementation nicety here and will write as if
    the heap is a single region.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 真相：现代操作系统内存分配器不再需要`sbrk`-相反，它们可以请求独立的虚拟内存区域并维护多个内存区域。例如，大量请求可以放置在与小分配请求不同的内存区域中。但是，这个细节是一个不需要的复杂性：碎片化和有效分配内存的问题仍然存在，因此我们将忽略这个实现细节，并将其写成堆是一个单一区域的样子。
- en: If we write a multi-threaded program (more about that later) we will need multiple
    stacks (one per thread) but there's only ever one heap.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们编写一个多线程程序（稍后会详细介绍），我们将需要多个堆栈（每个线程一个），但只有一个堆。
- en: On typical architectures, the heap is part of the `Data segment` and starts
    just above the code and global variables.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型的架构中，堆是`数据段`的一部分，它从代码和全局变量的上方开始。
- en: Do programs need to call brk or sbrk?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 程序需要调用brk或sbrk吗？
- en: Not typically (though calling `sbrk(0)` can be interesting because it tells
    you where your heap currently ends). Instead programs use `malloc,calloc,realloc`
    and `free` which are part of the C library. The internal implementation of these
    functions will call `sbrk` when additional heap memory is required.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通常不需要（尽管调用`sbrk(0)`可能会很有趣，因为它告诉您堆当前的结束位置）。相反，程序使用`malloc，calloc，realloc`和`free`，它们是C库的一部分。当需要额外的堆内存时，这些函数的内部实现将调用`sbrk`。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Example output: `The top of heap went from 0x4000 to 0xa000`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 示例输出：`堆的顶部从0x4000到0xa000`
- en: What is calloc?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是calloc？
- en: 'Unlike `malloc`, `calloc` initializes memory contents to zero and also takes
    two arguments (the number of items and the size in bytes of each item). A naive
    but readable implementation of `calloc` looks like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与`malloc`不同，`calloc`将内存内容初始化为零，并且还接受两个参数（项目的数量和每个项目的字节大小）。一个朴素但可读的`calloc`实现如下：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: An advanced discussion of these limitations is [here](http://locklessinc.com/articles/calloc/).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这些限制的高级讨论在[这里](http://locklessinc.com/articles/calloc/)。
- en: Programmers often use `calloc` rather than explicitly calling `memset` after
    `malloc`, to set the memory contents to zero. Note `calloc(x,y)` is identical
    to `calloc(y,x)`, but you should follow the conventions of the manual.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员通常使用`calloc`而不是在`malloc`后显式调用`memset`，以将内存内容设置为零。请注意，`calloc(x,y)`与`calloc(y,x)`相同，但您应该遵循手册的约定。
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Why is the memory that is first returned by sbrk initialized to zero?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么sbrk首次返回的内存初始化为零？
- en: If the operating system did not zero out contents of physical RAM it might be
    possible for one process to learn about the memory of another process that had
    previously used the memory. This would be a security leak.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作系统没有清零物理RAM的内容，可能会导致一个进程了解到先前使用过该内存的另一个进程的内存。这将是一个安全漏洞。
- en: Unfortunately this means that for `malloc` requests before any memory has been
    freed and simple programs (which end up using newly reserved memory from the system)
    the memory is *often* zero. Then programmers mistaken write C programs that assume
    malloc'd memory will *always* be zero.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这意味着对于在释放任何内存之前进行的`malloc`请求和简单程序（最终使用系统中新保留的内存）来说，内存通常是零。然后程序员错误地编写了假设malloc'd内存将*始终*为零的C程序。
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Why doesn't malloc always initialize memory to zero?
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么malloc不总是将内存初始化为零？
- en: Performance! We want malloc to be as fast as possible. Zeroing out memory may
    be unnecessary.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 性能！我们希望malloc尽可能快。清零内存可能是不必要的。
- en: What is realloc and when would you use it?
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: realloc是什么，什么时候会用到它？
- en: '`realloc` allows you to resize an existing memory allocation that was previously
    allocated on the heap (via malloc,calloc or realloc). The most common use of realloc
    is to resize memory used to hold an array of values. A naive but readable version
    of realloc is suggested below'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`realloc`允许你调整之前通过malloc、calloc或realloc在堆上分配的现有内存分配的大小。realloc最常见的用途是调整用于保存值数组的内存。下面建议一个朴素但可读的realloc版本'
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'An INCORRECT use of realloc is shown below:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示了realloc的错误用法：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The above code contains two mistakes. Firstly we needed 3*sizeof(int) bytes
    not 3 bytes. Secondly realloc may need to move the existing contents of the memory
    to a new location. For example, there may not be sufficient space because the
    neighboring bytes are already allocated. A correct use of realloc is shown below.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码包含两个错误。首先，我们需要3*sizeof(int)字节，而不是3字节。其次，realloc可能需要将内存的现有内容移动到新位置。例如，可能没有足够的空间，因为相邻的字节已经被分配。下面显示了realloc的正确用法。
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A robust version would also check for a `NULL` return value. Note `realloc`
    can be used to grow and shrink allocations.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一个健壮的版本还会检查`NULL`返回值。注意`realloc`可以用来增加和缩小分配。
- en: Where can I read more?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我在哪里可以读到更多信息？
- en: See [the man page](http://man7.org/linux/man-pages/man3/malloc.3.html)!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[man页面](http://man7.org/linux/man-pages/man3/malloc.3.html)！
- en: How important is that memory allocation is fast?
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存分配的速度有多重要？
- en: Very! Allocating and de-allocating heap memory is a common operation in most
    applications.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要！在大多数应用程序中，分配和释放堆内存是常见操作。
- en: Intro to Allocating
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分配简介
- en: What is the silliest malloc and free implementation and what is wrong with it?
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最愚蠢的malloc和free实现是什么，有什么问题？
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The above implementation suffers from two major drawbacks:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上述实现遭受两个主要缺点：
- en: System calls are slow (compared to library calls). We should reserve a large
    amount of memory and only occasionally ask for more from the system.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统调用很慢（与库调用相比）。我们应该保留大量内存，只偶尔向系统请求更多。
- en: No reuse of freed memory. Our program never re-uses heap memory - it just keeps
    asking for a bigger heap.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不重用释放的内存。我们的程序从不重用堆内存-它只是不断地要求更大的堆。
- en: If this allocator was used in a typical program, the process would quickly exhaust
    all available memory. Instead we need an allocator that can efficiently use heap
    space and only ask for more memory when necessary.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个分配器在一个典型的程序中使用，进程将很快耗尽所有可用的内存。相反，我们需要一个能够有效利用堆空间，并且只在必要时请求更多内存的分配器。
- en: What are placement strategies?
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是放置策略？
- en: During program execution memory is allocated and de-allocated (freed), so there
    will be gaps (holes) in the heap memory that can be re-used for future memory
    requests. The memory allocator needs to keep track of which parts of the heap
    are currently allocated and which are parts are available.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序执行期间，内存被分配和释放，因此堆内存中会有间隙（空洞），可以重新用于未来的内存请求。内存分配器需要跟踪堆的哪些部分当前被分配，哪些部分是可用的。
- en: 'Suppose our current heap size is 64K, though not all of it is in use because
    some earlier malloc''d memory has already been freed by the program:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们当前的堆大小是64K，尽管并非所有都在使用，因为一些先前通过程序释放的malloc内存已经被释放了：
- en: '| 16KB free | 10KB allocated | 1KB free | 1KB allocated | 30KB free | 4KB allocated
    | 2KB free |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 16KB free | 10KB allocated | 1KB free | 1KB allocated | 30KB free | 4KB allocated
    | 2KB free |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: If a new malloc request for 2KB is executed (`malloc(2048)`), where should `malloc`
    reserve the memory? It could use the last 2KB hole (which happens to be the perfect
    size!) or it could split one of the other two free holes. These choices represent
    different placement strategies.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行一个新的2KB的malloc请求（`malloc(2048)`），malloc应该在哪里保留内存？它可以使用最后的2KB空洞（恰好是完美的大小！），或者它可以分割其他两个空闲空洞中的一个。这些选择代表不同的放置策略。
- en: 'Whichever hole is chosen, the allocator will need to split the hole into two:
    The newly allocated space (which will be returned to the program) and a smaller
    hole (if there is spare space left over).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 无论选择哪个空洞，分配器都需要将空洞分成两部分：新分配的空间（将返回给程序）和一个较小的空洞（如果有剩余空间）。
- en: 'A perfect-fit strategy finds the smallest hole that is of sufficient size (at
    least 2KB):'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 完美拟合策略找到足够大的最小空洞（至少2KB）：
- en: '| 16KB free | 10KB allocated | 1KB free | 1KB allocated | 30KB free | 4KB allocated
    | `2KB HERE!` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 16KB free | 10KB allocated | 1KB free | 1KB allocated | 30KB free | 4KB allocated
    | `2KB HERE!` |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: 'A worst-fit strategy finds the largest hole that is of sufficient size (so
    break the 30KB hole into two):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最坏的拟合策略找到足够大的最大空洞（所以将30KB的空洞分成两部分）：
- en: '| 16KB free | 10KB allocated | 1KB free | 1KB allocated | `2KB HERE!` | `28KB
    free` | 4KB allocated | 2KB free |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 16KB free | 10KB allocated | 1KB free | 1KB allocated | `2KB HERE!` | `28KB
    free` | 4KB allocated | 2KB free |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- |'
- en: 'A first-fit strategy finds the first available hole that is of sufficient size
    (break the 16KB hole into two):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个适合策略找到第一个足够大的可用空洞（将16KB的空洞分成两部分）：
- en: '| `2KB HERE!` | `14KB free` | 10KB allocated | 1KB free | 1KB allocated | 30KB
    free | 4KB allocated | 2KB free |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `2KB HERE!` | `14KB free` | 10KB allocated | 1KB free | 1KB allocated | 30KB
    free | 4KB allocated | 2KB free |'
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- | --- |'
- en: What is external fragmentation?
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是外部碎片？
- en: In the example below, of the 64KB of heap memory, 17KB is allocated, and 47KB
    is free. However the largest available block is only 30KB because our available
    unallocated heap memory is fragmented into smaller pieces.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，64KB的堆内存中，有17KB被分配，47KB是空闲的。然而，最大的可用块只有30KB，因为我们的可用未分配堆内存被分成了更小的块。
- en: '| `16KB free` | 10KB allocated | 1KB free | 1KB allocated | 30KB free | 4KB
    allocated | 2KB free |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `16KB free` | 10KB allocated | 1KB free | 1KB allocated | 30KB free | 4KB
    allocated | 2KB free |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: What effect do placement strategies have on external fragmentation and performance?
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 放置策略对外部碎片和性能有什么影响？
- en: Different strategies affect the fragmentation of heap memory in non-obvious
    ways, which only are discovered by mathematical analysis or careful simulations
    under real-world conditions (for example simulating the memory allocation requests
    of a database or webserver). For example, best-fit at first glance appears to
    be an excellent strategy however, if we can not find a perfectly-sized hole then
    this placement creates many tiny unusable holes, leading to high fragmentation.
    It also requires a scan of all possible holes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的策略以不明显的方式影响堆内存的碎片化，这只能通过数学分析或在真实条件下进行仔细模拟（例如模拟数据库或Web服务器的内存分配请求）来发现。例如，最佳适配乍看起来似乎是一个很好的策略，但是，如果我们找不到一个完全大小合适的空洞，那么这种放置会产生许多微小的无法使用的空洞，导致高度碎片化。它还需要扫描所有可能的空洞。
- en: First fit has the advantage that it will not evaluate all possible placements
    and therefore be faster.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首次适配的优势在于它不会评估所有可能的放置，因此更快。
- en: Since Worst-fit targets the largest unallocated space, it is a poor choice if
    large allocations are required.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于最坏适配针对最大的未分配空间，如果需要大量分配，则这是一个不好的选择。
- en: In practice first-fit and next-fit (which is not discussed here) are often common
    placement strategy. Hybrid approaches and many other alternatives exist (see implementing
    a memory allocator page).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，首次适配和下次适配（这里没有讨论）通常是常见的放置策略。还有混合方法和许多其他选择（请参见实现内存分配器页面）。
- en: What are the challenges of writing a heap allocator?
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写堆分配器的挑战是什么？
- en: The main challenges are,
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 主要挑战是，
- en: Need to minimize fragmentation (i.e. maximize memory utilization)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要最小化碎片化（即最大化内存利用）
- en: Need high performance
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要高性能
- en: Fiddly implementation (lots of pointer manipulation using linked lists and pointer
    arithmetic)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 繁琐的实现（使用链表和指针算术进行大量指针操作）
- en: 'Some additional comments:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一些额外的评论：
- en: Both fragmentation and performance depend on the application allocation profile,
    which can be evaluated but not predicted and in practice, under-specific usage
    conditions, a special-purpose allocator can often out-perform a general purpose
    implementation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 碎片化和性能都取决于应用程序的分配配置文件，这可以进行评估但无法预测，并且在实践中，在特定的使用条件下，专用分配器通常可以胜过通用实现。
- en: The allocator doesn't know the program's memory allocation requests in advance.
    Even if we did, this is the [Knapsack problem](http://en.wikipedia.org/wiki/Knapsack_problem)
    which is known to be NP hard!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 分配器事先不知道程序的内存分配请求。即使我们知道，这也是著名的NP难题[背包问题](http://en.wikipedia.org/wiki/Knapsack_problem)！
- en: How do you implement a memory allocator?
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现内存分配器？
- en: Good question. [Implementing a memory allocator](https://github.com/angrave/SystemProgramming/wiki/Memory%2C-Part-2%3A-Implementing-a-Memory-Allocator)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 好问题。[实现内存分配器](https://github.com/angrave/SystemProgramming/wiki/Memory%2C-Part-2%3A-Implementing-a-Memory-Allocator)

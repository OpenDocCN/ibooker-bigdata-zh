- en: 'Pthreads, Part 3: Parallel Problems (Bonus)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pthreads，第3部分：并行问题（奖励）
- en: Overview
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: The next section deals with what happens when pthreads collide, but what if
    we have each thread do something entirely different, no overlap?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论当pthread发生冲突时会发生什么，但如果每个线程做的事情完全不同，没有重叠呢？
- en: We have found the maximum speedup parallel problems?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们找到了最大加速并行问题吗？
- en: Embarrassingly Parallel Problems
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尴尬的并行问题
- en: The study of parallel algorithms has exploded over the past few years. An embarrassingly
    parallel problem is any problem that needs little effort to turn parallel. A lot
    of them have some synchronization concepts with them but not always. You already
    know a parallelizable algorithm, Merge Sort!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 并行算法的研究在过去几年里迅速发展。一个尴尬的并行问题是指需要很少的工作就可以转换为并行的问题。其中很多问题都涉及一些同步概念，但并非总是如此。你已经知道一个可并行化的算法，归并排序！
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With your new understanding of threads, all you need to do is create a thread
    for the left half, and one for the right half. Given that your CPU has multiple
    real cores, you will see a speedup in accordance with [Amdahl's Law](https://en.wikipedia.org/wiki/Amdahl's_law).
    The time complexity analysis gets interesting here as well. The parallel algorithm
    runs in O(log^3(n)) running time (because we fancy analysis assuming that we have
    a lot of cores.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有了对线程的新理解，你只需要为左半部分创建一个线程，为右半部分创建一个线程。鉴于你的CPU有多个真实核心，你将看到与[Amdahl's Law](https://en.wikipedia.org/wiki/Amdahl's_law)相符的加速。时间复杂度分析在这里也变得有趣。并行算法的运行时间为O(log^3(n))（因为我们假设有很多核心）。
- en: In practice though, we typically do two changes. One, once the array gets small
    enough, we ditch the parallel mergesort algorithm and do a quicksort or other
    algorithm that works fast on small arrays (something something cache coherency).
    The other thing that we know is that CPUs don't have infinite cores. To get around
    that, we typically keep a worker pool.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而在实践中，我们通常会做两个改变。一是，一旦数组变得足够小，我们就会放弃并行归并排序算法，转而使用快速排序或其他在小数组上运行快速的算法（某种缓存一致性）。另一件我们知道的事情是，CPU并不拥有无限的核心。为了解决这个问题，我们通常会保留一个工作池。
- en: Worker Pool
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作池
- en: We know that CPUs have a finite amount of cores. A lot of times we start up
    a number of threads and give them tasks as they idle.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道CPU的核心数量是有限的。很多时候我们会启动一些线程，并在它们空闲时给它们任务。
- en: Another problem, Parallel Map
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另一个问题，Parallel Map
- en: Say we want to apply a function to an entire array, one element at a time.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要对整个数组应用一个函数，一次处理一个元素。
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Since none of the elements depend on any other element, how would you go about
    parallelizing this? What do you think would be the best way to split up the work
    between threads.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有任何元素依赖于其他元素，你会如何并行化这个问题？你认为在线程之间如何分配工作最好？
- en: Scheduling
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调度
- en: There are a few ways to split up the work.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以分解工作。
- en: 'static scheduling: break up the problems into fixed size chunks (predetermined)
    and have each thread work on each of the chunks. This works well when each of
    the subproblems take roughly the same time because there is no additional overhead.
    All you need to do is write a loop and give the map function to each subarray.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态调度：将问题分解成固定大小的块（预先确定的），并让每个线程处理其中的每个块。当每个子问题花费的时间大致相同时，这种方法效果很好，因为没有额外的开销。你只需要编写一个循环，并将map函数分配给每个子数组。
- en: 'dynamic scheduling: as a new problem becomes available have a thread serve
    it. This is useful when you don''t know how long the scheduling will take'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态调度：当一个新问题可用时，让一个线程处理它。当你不知道调度需要多长时间时，这是很有用的。
- en: 'guided scheduling: This is a mix of the above with a mix of the benefits and
    the tradeoffs. You start with a static scheduling and move slowly to dynamic if
    needed'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引导调度：这是上述两种方法的混合，具有各自的优点和权衡。你可以从静态调度开始，如果需要的话慢慢转向动态调度。
- en: 'runtime scheduling: You have absolutely no idea how long the problems are going
    to take. Instead of deciding it yourself, let the program decide what to do!'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行时调度：你完全不知道问题需要多长时间。与其自己决定，不如让程序决定该做什么！
- en: '[source](https://software.intel.com/en-us/articles/openmp-loop-scheduling),
    but no need to memorize.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[来源](https://software.intel.com/en-us/articles/openmp-loop-scheduling)，但不需要记住。'
- en: Few Drawbacks
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些缺点
- en: You won't see the speedup right away because of things like cache coherency
    and scheduling extra threads.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你不会立即看到加速，因为缓存一致性和调度额外的线程等原因。
- en: Other Problems
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他问题
- en: From [Wikipedia](https://en.wikipedia.org/wiki/Embarrassingly_parallel)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从[Wikipedia](https://en.wikipedia.org/wiki/Embarrassingly_parallel)
- en: Serving static files on a webserver to multiple users at once.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Web服务器上为多个用户提供静态文件。
- en: The Mandelbrot set, Perlin noise and similar images, where each point is calculated
    independently.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 曼德勃罗集、Perlin噪声和类似的图像，其中每个点都是独立计算的。
- en: Rendering of computer graphics. In computer animation, each frame may be rendered
    independently (see parallel rendering).
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算机图形的渲染。在计算机动画中，每一帧可能是独立渲染的（参见并行渲染）。
- en: Brute-force searches in cryptography.[8] Notable real-world examples include
    distributed.net and proof-of-work systems used in cryptocurrency.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在密码学中的暴力搜索。值得注意的现实世界例子包括distributed.net和加密货币中使用的工作证明系统。
- en: BLAST searches in bioinformatics for multiple queries (but not for individual
    large queries) [9]
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生物信息学中用于多个查询的BLAST搜索（但不适用于单个大查询）[9]
- en: Large scale facial recognition systems that compare thousands of arbitrary acquired
    faces (e.g., a security or surveillance video via closed-circuit television) with
    similarly large number of previously stored faces (e.g., a rogues gallery or similar
    watch list).[10]
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大规模人脸识别系统将数千个任意获取的人脸（例如，通过闭路电视的安全或监控视频）与同样大量的先前存储的人脸（例如，罪犯库或类似的观察名单）进行比较。
- en: Computer simulations comparing many independent scenarios, such as climate models.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较许多独立场景的计算机模拟，例如气候模型。
- en: Evolutionary computation metaheuristics such as genetic algorithms.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进化计算元启发式，如遗传算法。
- en: Ensemble calculations of numerical weather prediction.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值天气预报的集合计算。
- en: Event simulation and reconstruction in particle physics.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 粒子物理中的事件模拟和重建。
- en: The marching squares algorithm
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Marching squares算法
- en: Sieving step of the quadratic sieve and the number field sieve.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二次筛和数域筛的筛选步骤。
- en: Tree growth step of the random forest machine learning technique.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机森林机器学习技术中的树生长步骤。
- en: Discrete Fourier Transform where each harmonic is independently calculated.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 离散傅立叶变换，其中每个谐波都是独立计算的。

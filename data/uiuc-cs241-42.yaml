- en: 'Deadlock, Part 2: Deadlock Conditions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 死锁，第2部分：死锁条件
- en: Coffman conditions
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Coffman条件
- en: There are four *necessary* and *sufficient* conditions for deadlock. These are
    known as the Coffman conditions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 死锁有四个*必要*和*充分*条件。这些被称为Coffman条件。
- en: Mutual Exclusion
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互斥
- en: Circular Wait
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环等待
- en: Hold and Wait
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持有并等待
- en: No pre-emption
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无抢占
- en: If you break any of them, you cannot have deadlock!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果打破其中任何一个，就不会发生死锁！
- en: All of these conditions are required for deadlock, so let's discuss each one
    in turn. First the easy ones-
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些条件都是死锁所必需的，所以让我们依次讨论每一个。首先是简单的-
- en: 'Mutual Exclusion: The resource cannot be shared'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互斥：资源不能被共享
- en: 'Circular Wait: There exists a cycle in the Resource Allocation Graph. There
    exists a set of processes {P1,P2,...} such that P1 is waiting for resources held
    by P2, which is waiting for P3,..., which is waiting for P1.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环等待：资源分配图中存在一个循环。存在一组进程{P1，P2，...}，使得P1正在等待P2持有的资源，P2正在等待P3，...，P3正在等待P1持有的资源。
- en: 'Hold and Wait: A process acquires an incomplete set of resources and holds
    onto them while waiting for the other resources.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持有并等待：一个进程获取了一个不完整的资源集，并在等待其他资源时保持它们。
- en: 'No pre-emption: Once a process has acquired a resource, the resource cannot
    be taken away from a process and the process will not voluntarily give up a resource.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无抢占：一旦一个进程获取了一个资源，该资源就不能被从一个进程那里拿走，而且进程也不会自愿放弃一个资源。
- en: Breaking the Coffman Conditions
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打破Coffman条件
- en: 'Two students need a pen and paper:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 两个学生需要一支笔和一张纸：
- en: The students share a pen and paper. Deadlock is avoided because Mutual Exclusion
    was not required.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学生们共享一支笔和一张纸。避免了死锁，因为不需要互斥。
- en: The students both agree to grab the pen before grabbing the paper. Deadlock
    is avoided because there cannot be a circular wait.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学生们都同意先拿笔再拿纸。避免了死锁，因为不会有循环等待。
- en: The students grab both the pen and paper in one operation ("Get both or get
    none"). Deadlock is avoided because there is no *Hold and Wait*
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学生们一次拿起笔和纸（“要么都拿，要么都不拿”）。避免了死锁，因为没有*持有并等待*
- en: The students are friends and will ask each other to give up a held resource.
    Deadlock is avoided because pre-emption is allowed.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学生们是朋友，会要求对方放弃持有的资源。避免了死锁，因为允许抢占。
- en: Livelock
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活锁
- en: Livelock is *not* deadlock-
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 活锁不是死锁-
- en: Consider the following 'solution'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下的“解决方案”
- en: The students will put down one held resource if they are unable to pick up the
    other resource within 10 seconds. This solution avoids deadlock however it may
    suffer from livelock.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果他们无法在10秒内拿起另一个资源，学生们会放下一个持有的资源。这个解决方案避免了死锁，但可能会遭受活锁。
- en: Livelock occurs when a process continues to execute but is unable to make progress.
    In practice Livelock may occur because the programmer has taken steps to avoid
    deadlock. In the above example, in a busy system, the student will continually
    release the first resource because they are never able to obtain the second resource.
    The system is not deadlock (the student process is still executing) however it's
    not making any progress either.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 活锁发生在一个进程继续执行但无法取得进展。在实践中，活锁可能是因为程序员已经采取措施避免死锁。在上面的例子中，在繁忙的系统中，学生将不断释放第一个资源，因为他们永远无法获得第二个资源。系统不是死锁（学生进程仍在执行），但也没有取得任何进展。
- en: Deadlock Prevention/Avoidance vs Deadlock Detection
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 死锁预防/避免 vs 死锁检测
- en: Deadlock prevention is making sure that deadlock cannot happen, meaning that
    you break a coffman condition. This works the best inside a single program and
    the software engineer making the choice to break a certain coffman condition.
    Consider the [Banker's Algorithm](https://en.wikipedia.org/wiki/Banker's_algorithm).
    It is another algorithm for deadlock avoidance. The whole implementation is outside
    the scope of this class, just know that there are more generalized algorithms
    for operating systems.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 死锁预防是确保死锁不会发生，这意味着你打破了Coffman条件。这在单个程序内效果最好，软件工程师可以选择打破某个Coffman条件。考虑[银行家算法](https://en.wikipedia.org/wiki/Banker's_algorithm)。这是另一个用于避免死锁的算法。整个实现超出了本课程的范围，只需知道操作系统有更通用的算法。
- en: Deadlock detection on the other hand is allowing the system to enter a deadlocked
    state. After entering, the system uses the information that it has to break deadlock.
    As an example, consider multiple processes accessing files. The operating system
    is able to keep track of all of the files/resources through file descriptors at
    some level (either abstracted through an API or directly). If the operating system
    detects a directed cycle in the operating system file descriptor table it may
    break one process' hold (through scheduling for example) and let the system proceed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，死锁检测允许系统进入死锁状态。进入后，系统使用其拥有的信息来打破死锁。例如，考虑多个进程访问文件。操作系统能够通过文件描述符在某个级别（通过API或直接）跟踪所有文件/资源。如果操作系统在操作系统文件描述符表中检测到一个有向循环，它可能会打破一个进程的持有（例如通过调度）并让系统继续进行。
- en: Dining Philosophers
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 餐桌哲学家
- en: The Dining Philosophers problem is a classic synchronization problem. Imagine
    I invite N (let's say 5) philosophers to a meal. We will sit them at a table with
    5 chopsticks (one between each philosopher). A philosopher alternates between
    wanting to eat or think. To eat the philosopher must pick up the two chopsticks
    either side of their position (the original problem required each philosopher
    to have two forks). However these chopsticks are shared with his neighbor.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 餐桌哲学家问题是一个经典的同步问题。想象我邀请N（假设为5）位哲学家共进晚餐。我们将他们安排在一张桌子旁，放置5根筷子（每位哲学家之间各有一根）。哲学家交替地想要吃饭或思考。为了吃饭，哲学家必须拿起他们位置两侧的两根筷子（原始问题要求每位哲学家有两把叉子）。然而这些筷子是与他的邻居共享的。
- en: '![5DiningPhilosophers](../Images/faa7ac1f5f07a2ceee3dcc5057f329c6.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![5DiningPhilosophers](../Images/faa7ac1f5f07a2ceee3dcc5057f329c6.jpg)'
- en: Is it possible to design an efficient solution such that all philosophers get
    to eat? Or, will some philosophers starve, never obtaining a second chopstick?
    Or will all of them deadlock? For example, imagine each guest picks up the chopstick
    on their left and then waits for the chopstick on their right to be free. Oops
    - our philosophers have deadlocked!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一种有效的解决方案，使所有哲学家都能吃饭吗？或者，会有一些哲学家挨饿，永远得不到第二根筷子吗？或者他们全部陷入僵局？例如，想象每个客人都拿起左边的筷子，然后等待右边的筷子空闲。哎呀
    - 我们的哲学家陷入了僵局！

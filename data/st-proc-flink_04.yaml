- en: Chapter 4\. Setting Up a Development Environment for Apache Flink
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章。为 Apache Flink 设置开发环境
- en: Now that we have all that knowledge, it’s time to get our hands dirty and start
    developing Flink applications! In this chapter, you will learn how to set up an
    environment to develop, run, and debug Flink applications. We will start by discussing
    the required software and where you can get the code examples of this book. Using
    these examples, we will show how Flink applications are executed and debugged
    in an IDE. Finally, we show how to bootstrap a Flink Maven project, the starting
    point for a new application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了所有这些知识，是时候动手开始开发 Flink 应用程序了！在本章中，您将学习如何设置环境来开发、运行和调试 Flink 应用程序。我们将从讨论所需软件和本书代码示例的获取位置开始。利用这些示例，我们将展示如何在
    IDE 中执行和调试 Flink 应用程序。最后，我们展示如何启动一个 Flink Maven 项目，这是新应用程序的起点。
- en: Required Software
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所需软件
- en: First, let’s discuss the software you need to develop Flink applications. You
    can develop and execute Flink applications on Linux, macOS, and Windows. However,
    UNIX-based setups enjoy the richest tooling support because this environment is
    preferred by most Flink developers. We will be assuming a UNIX-based setup in
    the rest of this chapter. As a Windows user you can use the Windows subsystem
    for Linux (WSL), Cygwin, or a Linux virtual machine to run Flink in a UNIX environment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们讨论您需要开发 Flink 应用程序的软件。您可以在 Linux、macOS 和 Windows 上开发和执行 Flink 应用程序。但是，UNIX-based
    设置因其被大多数 Flink 开发人员偏好的环境而享有最丰富的工具支持。在本章的其余部分，我们将假设 UNIX-based 设置。作为 Windows 用户，您可以使用
    Windows 子系统用于 Linux（WSL）、Cygwin 或 Linux 虚拟机来在 UNIX 环境中运行 Flink。
- en: Flink’s DataStream API is available for Java and Scala. Hence, a Java JDK is
    required to implement Flink DataStream applications—Java JDK 8 (or higher). A
    Java JRE is not sufficient.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Flink 的 DataStream API 可用于 Java 和 Scala。因此，实现 Flink DataStream 应用程序需要 Java JDK
    — Java JDK 8（或更高版本）。仅安装 Java JRE 是不够的。
- en: 'We assume the following software is installed as well, although it is not strictly
    required to develop Flink applications:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还假设以下软件也已安装，尽管这些并不是开发 Flink 应用程序的严格要求：
- en: Apache Maven 3.x. The code examples of the book use Maven build management.
    Moreover, Flink provides Maven archetypes to bootstrap new Flink Maven projects.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Maven 3.x。本书的代码示例使用 Maven 构建管理。此外，Flink 提供了 Maven 原型来启动新的 Flink Maven
    项目。
- en: An IDE for Java and/or Scala development. Common choices are IntelliJ IDEA,
    Eclipse, or Netbeans with the appropriate plugins (such as for Maven, Git, and
    Scala support). We recommend using IntelliJ IDEA. You can follow the instructions
    at the [IntelliJ IDEA website](http://bit.ly/1yi9UP3) to download and install
    it.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于 Java 和/或 Scala 开发的 IDE。常见选择包括 IntelliJ IDEA、Eclipse 或带有适当插件（如 Maven、Git 和
    Scala 支持）的 Netbeans。我们建议使用 IntelliJ IDEA。您可以按照 [IntelliJ IDEA 网站](http://bit.ly/1yi9UP3)
    上的说明下载和安装它。
- en: Run and Debug Flink Applications in an IDE
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 IDE 中运行和调试 Flink 应用程序
- en: Even though Flink is a distributed data processing system, you will typically
    develop and run initial tests on your local machine. This makes development easier
    and simplifies cluster deployment, as you can run the exact same code in a cluster
    environment without making any changes. In the following, we describe how to obtain
    the code examples we use here, how to import them into IntelliJ, how to run an
    example application, and how to debug it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Flink 是一个分布式数据处理系统，但您通常会在本地机器上开发和运行初始测试。这样做可以简化开发，并简化集群部署，因为您可以在集群环境中运行完全相同的代码而无需进行任何更改。接下来，我们将描述如何获取我们在此处使用的代码示例，如何将其导入
    IntelliJ，如何运行示例应用程序以及如何调试它。
- en: Import the Book’s Examples in an IDE
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 IDE 中导入本书示例
- en: The code examples of this book are hosted on GitHub. At the book’s [GitHub page](http://github.com/streaming-with-flink),
    you will find one repository with Scala examples and one repository with Java
    examples. We will be using the Scala repository for the setup, but you should
    be able to follow the same instructions if you prefer Java.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的代码示例托管在 GitHub 上。在书的 [GitHub 页面](http://github.com/streaming-with-flink)
    上，您将找到一个包含 Scala 示例和一个包含 Java 示例的存储库。我们将使用 Scala 存储库进行设置，但如果您更喜欢 Java，您应该能够按照相同的说明操作。
- en: Open a terminal and run the following Git command to clone the `examples-scala`
    repository to your local machine:^([1](ch04.html#idm45499020391784))
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并运行以下 Git 命令，将 `examples-scala` 存储库克隆到您的本地机器上：^([1](ch04.html#idm45499020391784))
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can also download the source code of the examples as a zip-archive from
    GitHub:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以从 GitHub 下载示例源代码的 zip 存档：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The book examples are provided as a Maven project. You will find the source
    code in the `src/` directory, grouped by chapter:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍示例以 Maven 项目的形式提供。你会在`src/`目录中找到按章节分组的源代码：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now open your IDE and import the Maven project. The import steps are similar
    for most IDEs. In the following, we explain this step in detail for IntelliJ.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开你的集成开发环境，并导入 Maven 项目。对大多数集成开发环境来说，导入步骤是相似的。以下我们详细解释 IntelliJ 中的这一步骤。
- en: Navigate to File -> New -> Project from Existing Sources, select the book examples
    folder *examples-scala*, and click OK. Make sure that “Import project from external
    model” and “Maven” are selected and click Next.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 转到 文件 -> 新建 -> 从现有资源导入项目，选择书籍示例文件夹 *examples-scala*，然后点击确定。确保选择了“从外部模型导入项目”和“Maven”，然后点击下一步。
- en: A project import wizard will guide you though the next steps, such as selecting
    the Maven project to import (there should only be one), selecting the SDK, and
    naming the project. Figures [4-1](#setup-1) to [4-3](#setup-3) illustrate the
    import process.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个项目导入向导将引导你执行接下来的步骤，例如选择要导入的 Maven 项目（应该只有一个），选择 SDK，并命名项目。图[4-1](#setup-1)到图[4-3](#setup-3)展示了导入过程。
- en: '![](assets/spaf_0401.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/spaf_0401.png)'
- en: Figure 4-1\. Import the book examples repository into IntelliJ
  id: totrans-22
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-1\. 将书籍示例存储库导入 IntelliJ
- en: '![](assets/spaf_0402.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/spaf_0402.png)'
- en: Figure 4-2\. Select the Maven project to import
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-2\. 选择要导入的 Maven 项目
- en: '![](assets/spaf_0403.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/spaf_0403.png)'
- en: Figure 4-3\. Give your project a name and click Finish
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4-3\. 给你的项目命名并点击完成
- en: That’s it! You should now be able to browse and inspect the code of the book
    examples.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在你应该能够浏览和检查书籍示例代码了。
- en: Run Flink Applications in an IDE
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在集成开发环境中运行 Flink 应用程序
- en: Next, let’s run one of the book example applications in your IDE. Search for
    the `AverageSensorReadings` class and open it. As discussed in [“A Quick Look
    at Flink”](ch01.html#chap-1-taste-flink), the program generates read events for
    multiple thermal sensors, converts the temperature of the events from Fahrenheit
    to Celsius, and computes the average temperature of each sensor every second.
    The results of the program are emitted to standard output. Just like many DataStream
    applications, the source, sink, and operators of the program are assembled in
    the `main()` method of the `AverageSensorReadings` class.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在你的集成开发环境中运行一本书的示例应用程序。搜索`AverageSensorReadings`类并打开它。正如在[“快速浏览 Flink”](ch01.html#chap-1-taste-flink)中所讨论的，该程序生成多个热传感器的读取事件，将事件的温度从华氏度转换为摄氏度，并计算每秒钟每个传感器的平均温度。程序的结果将被输出到标准输出。和许多
    DataStream 应用程序一样，该程序的源、汇以及操作符被组装在`AverageSensorReadings`类的`main()`方法中。
- en: 'To start the application, run the `main()` method. The output of the program
    is written to the standard out (or console) window of your IDE. The output starts
    with a few log statements about the states that parallel operator tasks go through,
    such as SCHEDULING, DEPLOYING, and RUNNING. Once all tasks are up and running,
    the program starts to produce its results, which should look similar to the following
    lines:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动应用程序，请运行`main()`方法。程序的输出将被写入集成开发环境的标准输出（或控制台）窗口。程序的输出将以几条关于并行操作符任务状态的日志语句开头，如
    SCHEDULING、DEPLOYING 和 RUNNING。一旦所有任务都启动并运行，程序开始生成其结果，结果应类似于以下几行：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The program will continue to generate new events, process them, and emit new
    results every second until you terminate it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 程序将继续生成新事件，处理它们，并每秒钟发出新结果，直到你终止它。
- en: Now let’s quickly discuss what is happening under the hood. As explained in
    [“Components of a Flink Setup”](ch03.html#chap-3-setup-components), a Flink application
    is submitted to the JobManager (master), which distributes execution tasks to
    one or more TaskManagers (workers). Since Flink is a distributed system, the JobManager
    and TaskManagers typically run as separate JVM processes on different machines.
    Usually, the program’s `main()` method assembles the dataflow and submits it to
    a remote JobManager when the `StreamExecutionEnvironment.execute()` method is
    called.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们快速讨论一下内部原理。如在[“Flink 设置的组件”](ch03.html#chap-3-setup-components)中所解释的，Flink
    应用程序被提交给 JobManager（主节点），后者将执行任务分发给一个或多个 TaskManager（工作节点）。由于 Flink 是一个分布式系统，JobManager
    和 TaskManagers 通常在不同的机器上作为单独的 JVM 进程运行。通常情况下，程序的`main()`方法组装数据流，并在调用`StreamExecutionEnvironment.execute()`方法时将其提交给远程
    JobManager。
- en: However, there is also a mode in which the call of the `execute()` method starts
    a JobManager and a TaskManager (by default with as many slots as available CPU
    threads) as separate threads within the same JVM. Consequently, the whole Flink
    application is multithreaded and executed within the same JVM process. This mode
    is used to execute a Flink program within an IDE.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，也有一种模式，在这种模式下，调用 `execute()` 方法会启动一个 JobManager 和一个 TaskManager（默认情况下，具有与可用
    CPU 线程一样多的插槽作为单独的线程在同一个 JVM 中）。因此，整个 Flink 应用程序是多线程的，并在同一个 JVM 进程中执行。这种模式用于在 IDE
    中执行 Flink 程序。
- en: Debug Flink Applications in an IDE
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 IDE 中调试 Flink 应用程序
- en: Due to the single JVM execution mode, it is also possible to debug Flink applications
    in an IDE almost like any other program in your IDE. You can define breakpoints
    in the code and debug your application as you would normally do.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于单个 JVM 执行模式，几乎可以像在 IDE 中调试任何其他程序一样调试 Flink 应用程序。您可以在代码中定义断点，并像正常调试应用程序一样调试您的应用程序。
- en: 'However, there are a few things to consider when debugging a Flink application
    in an IDE:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在使用 IDE 调试 Flink 应用程序时，有几件事情需要考虑：
- en: Unless you specify a parallelism, a program is executed by as many threads as
    the number of CPU threads of your development machine. Hence, you should be aware
    that you might debug a multithreaded program.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非您指定并行性，否则程序将由与开发机器的 CPU 线程数相同的线程执行。因此，您应该意识到您可能在调试一个多线程程序。
- en: In contrast to executing a Flink program by sending it to a remote JobManager,
    the program is executed in a single JVM. Therefore, certain issues, such as classloading
    issues, cannot be properly debugged.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与将 Flink 程序发送到远程 JobManager 执行不同，该程序在单个 JVM 中执行。因此，某些问题，如类加载问题，无法正确调试。
- en: Although a program is executed in a single JVM, records are serialized for cross-thread
    communication and possibly state persistance.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管程序在单个 JVM 中执行，但记录被序列化以进行跨线程通信和可能的状态持久化。
- en: Bootstrap a Flink Maven Project
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动一个 Flink Maven 项目
- en: Importing the `examples-scala` repository into your IDE to experiment with Flink
    is a good first step. However, you should also know how to create a new Flink
    project from scratch.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `examples-scala` 仓库导入到您的 IDE 中以试验 Flink 是一个很好的第一步。但是，您还应该知道如何从头开始创建一个新的 Flink
    项目。
- en: 'Flink provides Maven archetypes to generate Maven projects for Java or Scala
    Flink applications. Open a terminal and run the following command to create a
    Flink Maven Quickstart Scala project as a starting point for your Flink application:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Flink 提供了用于生成 Java 或 Scala Flink 应用程序的 Maven 原型。打开终端并运行以下命令，创建一个 Flink Maven
    快速启动 Scala 项目作为您的 Flink 应用程序的起点：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will generate a Maven project for Flink 1.7.1 in a folder called *flink-scala-project*.
    You can change the Flink version, group and artifact IDs, version, and generated
    package by changing the respective parameters of the above *mvn* command. The
    generated folder contains a *src/* folder and a *pom.xml* file. The *src/* folder
    has the following structure:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在名为 *flink-scala-project* 的文件夹中生成一个 Flink 1.7.1 的 Maven 项目。您可以通过更改上述 *mvn*
    命令的相应参数来更改 Flink 版本、组和构件 ID、版本和生成的包。生成的文件夹包含一个 *src/* 文件夹和一个 *pom.xml* 文件。*src/*
    文件夹具有以下结构：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The project contains two skeleton files, *BatchJob.scala* and *StreamingJob.scala*,
    as a starting point for your own programs. You can also delete them if you do
    not need them.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目包含两个骨架文件，*BatchJob.scala* 和 *StreamingJob.scala*，作为您自己程序的起点。如果不需要，您也可以删除它们。
- en: 'You can import the project in your IDE following the steps we described in
    the previous section or you can execute the following command to build a JAR file:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照我们在上一节中描述的步骤将项目导入到您的 IDE 中，或者您可以执行以下命令来构建一个 JAR 文件：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If the command completed successfully, you will find a new *target* folder in
    your project folder. The folder contains a file *flink-scala-project-0.1.jar*,
    which is the JAR file of your Flink application. The generated *pom.xml* file
    also contains instructions on how to add new dependencies to your project.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果命令成功完成，您将在项目文件夹中找到一个新的 *target* 文件夹。该文件夹包含一个名为 *flink-scala-project-0.1.jar*
    的文件，这是您的 Flink 应用程序的 JAR 文件。生成的 *pom.xml* 文件还包含如何向项目添加新依赖项的说明。
- en: Summary
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter you learned how to set up an environment to develop and debug
    Flink DataStream applications and how to generate a Maven project using Flink’s
    Maven archetype. The obvious next step is to learn how to actually implement a
    DataStream program.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何设置环境来开发和调试 Flink DataStream 应用程序，并使用 Flink 的 Maven 原型生成了一个 Maven 项目。显然的下一步是学习如何实际实现一个
    DataStream 程序。
- en: '[Chapter 5](ch05.html#chap-5) will introduce you to the basics of the DataStream
    API, and Chapters [6](ch06.html#chap-6), [7](ch07.html#chap-7), and [8](ch08.html#chap-8)
    will introduce everything you need to know about time-based operators, stateful
    functions, and source and sink connectors.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[第五章](ch05.html#chap-5)将介绍DataStream API的基础知识，而第[六章](ch06.html#chap-6)，第[七章](ch07.html#chap-7)，和第[八章](ch08.html#chap-8)将介绍与基于时间的操作符、有状态函数以及源和接收器连接器相关的一切。'
- en: ^([1](ch04.html#idm45499020391784-marker)) We also provide an [`examples-Java`
    repository](https://github.com/streaming-with-flink/examples-java) with all the
    examples implemented in Java.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch04.html#idm45499020391784-marker)) 我们还提供了一个名为[`examples-Java`的示例库](https://github.com/streaming-with-flink/examples-java)，其中包含所有用Java实现的示例。

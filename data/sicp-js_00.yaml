- en: Foreword
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: 'I had the pleasure of meeting the amazing Alan Perlis and talking with him
    a few times, when I was still a student. He and I had in common a deep love and
    respect for two very different programming languages: Lisp and APL. Following
    in his footsteps is a daunting task, even though he blazed an excellent trail.
    Still, I would like to reexamine one comment he made in the original foreword
    to this book (and, please, I suggest that you read *his* foreword, which immediately
    follows this one, before you finish this one). Is it really true that it is better
    to have 100 functions operate on one data structure than to have 10 functions
    operate on 10 data structures?'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我有幸在我还是学生的时候见到了了不起的Alan Perlis，并和他交谈了几次。他和我共同深爱和尊重两种非常不同的编程语言：Lisp和APL。跟随他的脚步是一项艰巨的任务，尽管他开辟了一条优秀的道路。尽管如此，我想重新审视他在这本书的原始前言中所做的一条评论（请阅读*他的*前言，它紧随在这个前言之后，然后再完成这个前言）。是否真的比起有10个函数作用于10个数据结构，有100个函数作用于一个数据结构更好？
- en: 'To answer that question carefully, we first need to ask whether that one data
    structure is “universal”: can it conveniently fulfill the roles of those 10 more
    specialized data structures?'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要仔细回答这个问题，我们首先需要问这个数据结构是否“通用”：它是否可以方便地满足那10个更专门的数据结构的作用？
- en: 'For that matter, we can also ask: do we really need 100 functions? Is there
    a single universal function that can fulfill the roles of all those other functions?'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 就此而言，我们还可以问：我们真的需要100个函数吗？是否有一个单一的通用函数可以满足所有其他函数的作用？
- en: The surprising answer to that last question is “yes”; it is only slightly tricky
    to construct a function that accepts (1) a data structure that serves as a description
    of some other function, and (2) a list of arguments, and behaves exactly as that
    other function would when applied to the given arguments. And it is only slightly
    tricky to design a data structure capable of describing any computation whatsoever.
    One such data structure (the tagged-list representation of expressions and statements,
    paired with environments that associate names with values) and one such universal
    function (`apply`) are described in [Chapter 4](c004.xhtml) of this book. So maybe
    we need only one function and one data structure.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最后一个问题的令人惊讶的答案是“是的”；构造一个接受（1）作为某个其他函数描述的数据结构和（2）参数列表的函数，当应用于给定的参数时，其行为与该其他函数完全相同，只是稍微有些棘手。设计一个能够描述任何计算的数据结构也只是稍微有些棘手。这本书的[第4章](c004.xhtml)中描述了这样的一个数据结构（表达式和语句的标记列表表示，配对环境将名称与值关联）和这样一个通用函数（`apply`）。所以也许我们只需要一个函数和一个数据结构。
- en: That is true in theory. In practice, we find it convenient to draw distinctions
    that help us, as human beings constructing descriptions of computations, to organize
    the structure of our code so that we can better understand them. I believe that
    Perlis was making a remark not about computational capability, but about human
    abilities and human limitations.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上是这样的。实际上，我们发现方便的是划分出有助于我们作为构建计算描述的人类来组织代码结构，以便更好地理解它们的区别。我相信Perlis所说的不是关于计算能力，而是关于人类的能力和局限性。
- en: One thing the human mind seems to do well is to name things; we have powerful
    associative memories. Given a name, we can quickly recall some associated thing
    to mind. This is why we typically find it easier to work with the lambda calculus
    than the combinatory calculus; it is much easier for most people to interpret
    the Lisp expression `(lambda (x) (lambda (y) (+ x y)))` or the JavaScript expression
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 人类大脑似乎擅长给事物命名；我们有强大的联想记忆。给定一个名称，我们可以快速地回忆起一些相关的事物。这就是为什么我们通常发现使用λ演算比组合演算更容易；对于大多数人来说，解释Lisp表达式`(lambda
    (x) (lambda (y) (+ x y)))`或JavaScript表达式
- en: '`x => y => x + y` than the combinatory expression'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`x => y => x + y`比组合表达式更容易。'
- en: ((S ((S (K S)) ((S ((S (K S)) ((S (K K)) (K +)))) ((S (K K)) I)))) (K I))
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: ((S ((S (K S)) ((S ((S (K S)) ((S (K K)) (K +)))) ((S (K K)) I)))) (K I))
- en: even though there is a direct structural correspondence, easily expressed in
    five lines of Lisp code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有直接的结构对应，可以用五行Lisp代码轻松表达。
- en: So while in principle we could get by with just one universal function, we prefer
    to modularize our code, to give names to the various pieces, and to mention the
    names of function descriptions rather than constantly feeding the descriptions
    themselves to the universal function.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，虽然原则上我们可以只使用一个通用函数，但我们更喜欢将代码模块化，给各个部分命名，并提到函数描述的名称，而不是不断地将描述本身提供给通用函数。
- en: In my 1998 talk “Growing a Language,” I commented that a good programmer “does
    not just write programs. A good programmer builds a working vocabulary.” As we
    design and define more and more parts of our programs, we give names to those
    parts, and the result is that we have a richer language in which to write the
    rest.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我1998年的演讲“语言的成长”中，我评论说，一个优秀的程序员“不仅仅是编写程序。一个优秀的程序员建立了一个工作词汇。”当我们设计和定义程序的更多部分时，我们给这些部分命名，结果是我们有了一个更丰富的语言来编写其余的部分。
- en: But we also find it natural to draw distinctions among data structures, and
    to give them names.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们也发现在数据结构之间划分出区别，并给它们命名是很自然的。
- en: It may be that nested lists are a universal data structure (and it is worth
    noting that many modern and widely used data structures, such as HTML and XML
    and JSON, are also parenthetically nested representations, only slightly more
    elaborate than Lisp's bare parentheses). There are also many functions, such as
    finding the length of a list or applying a function to every element of a list
    and getting back a list of the results, that are useful in a wide variety of situations.
    And yet, when I am thinking about a specific computation, I often say to myself,
    “This list of two things I expect to be a personal name and a surname, but that
    list of two things I expect to be the real and imaginary parts of a complex number,
    and that other list of two things I will regard as the numerator and denominator
    of a fraction.” In other words, I draw distinctions—and it may be useful to represent
    those distinctions explicitly in the data structure, in part to prevent mistakes
    such as accidentally treating a complex number as a fraction. (Again, this is
    a comment about human abilities and human limitations.)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套列表可能是一种通用的数据结构（值得注意的是，许多现代和广泛使用的数据结构，如HTML、XML和JSON，也是括号嵌套表示，只是比Lisp的裸括号稍微复杂一点）。还有许多函数，比如找到列表的长度或将函数应用于列表的每个元素并得到结果列表，这些函数在各种情况下都很有用。然而，当我考虑特定的计算时，我经常对自己说：“我期望这个两个元素的列表是名字和姓氏，但我期望那个两个元素的列表是复数的实部和虚部，而我将把另一个两个元素的列表视为分数的分子和分母。”换句话说，我在区分——并且在数据结构中明确表示这些区分可能是有用的，部分原因是为了防止错误，比如意外地将复数视为分数。（再次强调，这是关于人类能力和人类局限性的评论。）
- en: Since the first edition of this book was written, almost four decades ago, a
    lot more ways of organizing data have become relatively standard, in particular
    the “object-oriented” approach, and many languages, including JavaScript, support
    specialized data structures such as objects and strings and heaps and maps with
    a variety of built-in mechanisms and libraries. But in doing so, many languages
    abandoned support for more general, universal notions. Java, for example, originally
    did not support first-class functions, and has incorporated them only relatively
    recently, greatly increasing its expressive power.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 自本书第一版写成以来，几乎已经有将近四十年的时间，许多组织数据的方式已经相对标准化，特别是“面向对象”的方法，许多语言，包括JavaScript，都支持对象、字符串、堆和映射等专门的数据结构，并具有各种内置机制和库。但在这样做的过程中，许多语言放弃了对更一般、通用概念的支持。例如，Java最初也不支持一流函数，直到相对较近的时候才将其纳入，大大增强了其表达能力。
- en: 'APL, likewise, originally did not support first-class functions, and moreover
    its original single data structure—arrays of any number of dimensions—was not
    so conveniently useful as a universal data structure because arrays could not
    contain other arrays as elements. More recent versions of APL do support anonymous
    function values and nested arrays, and these have made APL dramatically more expressive.
    (The original design of APL did have two very good things going for it: a comprehensive
    set of functions applicable to that one data structure, and moreover an extremely
    well chosen set of names for those functions. I''m not talking about the funny
    symbols and Greek letters, but the spoken words that APL programmers use when
    mentioning them, words like `shape`, `reshape`, `compress`, `expand`, and `laminate`;
    these are names not for the symbols, but for the functions they represent. Ken
    Iverson had a real knack for choosing short, memorable, vivid names for functions
    on arrays.)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: APL最初也不支持一流函数，而且它最初的单一数据结构——任意维度的数组——并不像通用数据结构那样方便使用，因为数组不能包含其他数组作为元素。最近的APL版本确实支持匿名函数值和嵌套数组，这使得APL的表达能力大大增强。（APL的原始设计确实有两个非常好的地方：一个是适用于该数据结构的全面函数集，另一个是非常合适的函数名称集。我说的不是有趣的符号和希腊字母，而是APL程序员在提到它们时使用的口头词汇，比如`shape`、`reshape`、`compress`、`expand`和`laminate`；这些名称不是指代符号，而是指代它们所代表的函数。Ken
    Iverson非常擅长为数组函数选择简短、易记、生动的名称。）
- en: While JavaScript, like Java, was originally designed with objects and methods
    in mind, it also incorporated first-class functions from the beginning, and it
    is not difficult to use its objects to define a universal data structure. As a
    result, JavaScript is not as distant from Lisp as you would think, and as this
    edition of *Structure and Interpretation of Computer Programs* demonstrates, it
    is a good alternate framework for presenting the key ideas. *SICP* was never about
    a programming language; it presents powerful, general ideas for program organization
    that ought to be useful in any language.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然JavaScript和Java一样最初设计时考虑了对象和方法，但它从一开始就纳入了一流函数，并且使用其对象定义通用数据结构并不困难。因此，JavaScript并不像你想象的那样远离Lisp，正如《计算机程序的构造和解释》的这一版本所展示的，它是一个呈现关键思想的良好替代框架。*SICP*从来不是关于一种编程语言；它提出了有用于任何语言的强大、通用的程序组织思想。
- en: What do Lisp and JavaScript have in common? The ability to abstract a computation
    (code plus some associated data) for later execution as a function; the ability
    to embed references to such functions within data structures; the ability to invoke
    functions on arguments; the ability to draw a distinction (conditional execution);
    a convenient universal data structure; completely automatic storage management
    for that data (which seems like a no-brainer, given everything else, until you
    realize that many widely used programming languages don't have it); a large set
    of useful functions for operating on that universal data structure; and standard
    strategies for using the universal data structure to represent more specialized
    data structures.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Lisp和JavaScript有什么共同之处？抽象计算的能力（代码加上一些相关数据）以便以后作为函数进行执行；在数据结构中嵌入对这些函数的引用的能力；对参数调用函数的能力；区分的能力（条件执行）；一个方便的通用数据结构；完全自动的数据存储管理（鉴于其他一切，这似乎是理所当然的，直到你意识到许多广泛使用的编程语言没有它）；一大套对通用数据结构进行操作的有用函数；以及使用通用数据结构表示更专门的数据结构的标准策略。
- en: So maybe the truth is somewhere in between the extremes that Perlis so eloquently
    posited. Maybe the sweet spot is something more like 40 functions general enough
    to operate usefully on a universal data structure such as lists, but also 10 sets
    of 6 functions each that are relevant when we take one of 10 specialized views
    of that universal data structure. This is manageable if we give good names to
    these functions and specialized views.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所以也许真相在Perlis如此雄辩地提出的两个极端之间。也许最佳点更像是40个足够通用地在通用数据结构（如列表）上有用地操作的函数，但也有10组每组6个函数，当我们从10个专门的视角看待通用数据结构时是相关的。如果我们给这些函数和专门视角起好名字，这是可以管理的。
- en: As you read this book, please pay attention not only to the programming language
    constructs and how they are used, but also to the *names* given to functions and
    variables and data structures. They are not all as short and vivid as the names
    Iverson chose for his APL functions, but they have been chosen in a deliberate
    and systematic way to enhance your understanding of the overall program structure.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你阅读这本书时，请不仅注意编程语言的构造和它们的使用方式，还要注意给函数、变量和数据结构起的*名称*。它们并不都像Iverson为他的APL函数选择的那样简短和生动，但它们是以一种有意识和系统的方式选择的，以增强你对整体程序结构的理解。
- en: 'Primitives, means of combination, functional abstraction, naming, and conventions
    for using a universal data structure in specialized ways by drawing distinctions:
    these are the fundamental building blocks of a good programming language. From
    there, imagination and good engineering judgment based on experience can do the
    rest.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 原语、组合方式、函数抽象、命名以及使用通用数据结构的约定方式来专门区分：这些是一个良好编程语言的基本构建块。从那里开始，想象力和基于经验的良好工程判断可以做剩下的事情。
- en: —Guy L. Steele Jr., Lexington, Massachusetts, 2021
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: —Guy L. Steele Jr.，马萨诸塞州列克星敦，2021

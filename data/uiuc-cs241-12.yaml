- en: 'C Programming, Part 5: Debugging'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C编程，第5部分：调试
- en: The Hitchhiker's Guide to Debugging C Programs
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 《C程序调试指南》
- en: This is going to be a massive guide to helping you debug your C programs. There
    are different levels that you can check errors and we will be going through most
    of them. Feel free to add anything that you found helpful in debugging C programs
    including but not limited to, debugger usage, recognizing common error types,
    gotchas, and effective googling tips.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个帮助您调试C程序的大型指南。您可以检查错误的不同级别，我们将逐个介绍。请随时添加您在调试C程序中发现有用的任何内容，包括但不限于，调试器的使用，识别常见错误类型，陷阱和有效的搜索技巧。
- en: In-Code Debugging
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在代码中调试
- en: Clean code
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清洁代码
- en: Make your code modular using helper functions. If there is a repeated task (getting
    the pointers to contiguous blocks in MP2 for example), make them helper functions.
    And make sure each function does one thing very well, so that you don't have to
    debug twice.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 使用辅助函数使您的代码模块化。如果有重复的任务（例如在MP2中获取连续块的指针），请将它们制作为辅助函数。确保每个函数都非常擅长做一件事，这样您就不必两次调试。
- en: Let's say that we are doing selection sort by finding the minimum element each
    iteration like so,
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在通过每次迭代找到最小元素来进行选择排序，如下所示，
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Many can see the bug in the code, but it can help to refactor the above method
    into
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人可以看到代码中的错误，但将上述方法重构为
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And the error is specifically in one function.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 而错误特别在一个函数中。
- en: In the end, we are not a class about refactoring/debugging your code -- In fact
    most systems code is so atrocious that you don't want to read it. But for the
    sake of debugging, it may benefit you in the long run to adopt some practices.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们不是一个关于重构/调试代码的课程--事实上，大多数系统代码都很糟糕，你不想读它。但是为了调试，长远来看，采用一些实践可能对你有好处。
- en: Asserts!
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断言！
- en: Use assertions to make sure your code works up to a certain point -- and importantly,
    to make sure you don't break it later. For example, if your data structure is
    a doubly linked list, you can do something like, assert(node->size == node->next->prev->size)
    to assert that the next node has a pointer to the current node. You can also check
    the pointer is pointing to an expected range of memory address, not null, ->size
    is reasonable etc. The NDEBUG macro will disable all assertions, so don't forget
    to set that once you finish debugging. [http://www.cplusplus.com/reference/cassert/assert/](http://www.cplusplus.com/reference/cassert/assert/)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用断言来确保您的代码在某个特定点之前工作--并且重要的是，确保您以后不会破坏它。例如，如果您的数据结构是双向链表，您可以这样做，assert(node->size
    == node->next->prev->size)来断言下一个节点指向当前节点。您还可以检查指针是否指向预期的内存地址范围，而不是null，->size是合理的等等。NDEBUG宏将禁用所有断言，因此在调试完成后不要忘记设置它。[http://www.cplusplus.com/reference/cassert/assert/](http://www.cplusplus.com/reference/cassert/assert/)
- en: A quick example with assert is let's say that I'm writing code using memcpy
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用assert的一个快速示例是，假设我正在使用memcpy编写代码
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This check can be turned off at compile time, but will save you **tons** of
    trouble debugging!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个检查可以在编译时关闭，但会帮助您避免大量的调试麻烦！
- en: printfs
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: printfs
- en: When all else fails, print like crazy! Each of your functions should have an
    idea of what it is going to do (ie find_min better find the minimum element).
    You want to test that each of your functions is doing what it set out to do and
    see exactly where your code breaks. In the case with race conditions, tsan may
    be able to help, but having each thread print out data at certain times could
    help you identify the race condition.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当一切都失败时，疯狂地打印！您的每个函数都应该知道它要做什么（例如，find_min最好找到最小的元素）。您希望测试每个函数是否正在做它设定的事情，并确切地查看代码在哪里出错。在竞态条件的情况下，tsan可能有所帮助，但让每个线程在特定时间打印数据可能有助于您识别竞态条件。
- en: Valgrind
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Valgrind
- en: (ToDo)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: （待办事项）
- en: Tsan
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Tsan
- en: ThreadSanitizer is a tool from Google, built into clang (and gcc), to help you
    detect race conditions in your code. For more information about the tool, see
    the Github wiki.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ThreadSanitizer是Google的一个工具，内置在clang（和gcc）中，可以帮助您检测代码中的竞态条件。有关该工具的更多信息，请参阅Github维基。
- en: Note that running with tsan will slow your code down a bit.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用tsan会使您的代码变慢一些。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can see that there is a race condition on the variable Global. Both the main
    thread and the thread created with pthread_create will try to changethe value
    at the same time. But, does ThreadSantizer catch it?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到变量Global存在竞态条件。主线程和使用pthread_create创建的线程将尝试同时更改值。但是，ThreadSantizer能否捕捉到它呢？
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If we compiled with the debug flag, then it would give us the variable name
    as well.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用调试标志编译，那么它将给我们变量名。
- en: GDB
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GDB
- en: 'Introduction: [http://www.cs.cmu.edu/~gilpin/tutorial/](http://www.cs.cmu.edu/%7Egilpin/tutorial/)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍：[http://www.cs.cmu.edu/~gilpin/tutorial/](http://www.cs.cmu.edu/%7Egilpin/tutorial/)
- en: Setting breakpoints programmatically
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 以编程方式设置断点
- en: A very useful trick when debugging complex C programs with GDB is setting breakpoints
    in the source code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用GDB调试复杂的C程序时，一个非常有用的技巧是在源代码中设置断点。
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Checking memory content
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查内存内容
- en: '[http://www.delorie.com/gnu/docs/gdb/gdb_56.html](http://www.delorie.com/gnu/docs/gdb/gdb_56.html)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.delorie.com/gnu/docs/gdb/gdb_56.html](http://www.delorie.com/gnu/docs/gdb/gdb_56.html)'
- en: For example,
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, by using the `x` command with parameters `16xb`, we can see that starting
    at memory address `0x7fff5fbff9c` (value of `bad_string`), printf would actually
    see the following sequence of bytes as a string because we provided a malformed
    string without a null terminator.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，通过使用带有参数`16xb`的`x`命令，我们可以看到从内存地址`0x7fff5fbff9c`（`bad_string`的值）开始，printf实际上会看到以下字节序列作为字符串，因为我们提供了一个没有空终止符的格式不正确的字符串。
- en: '`0x43 0x61 0x74 0xe0 0xf9 0xbf 0x5f 0xff 0x7f 0x00`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`0x43 0x61 0x74 0xe0 0xf9 0xbf 0x5f 0xff 0x7f 0x00`'
- en: '[Back: C Programming, Part 4: Strings and Structs](https://github.com/angrave/SystemProgramming/wiki/C-Programming,-Part-4:-Strings-and-Structs)
    | [Back: C Programming, Review Questions](https://github.com/angrave/SystemProgramming/wiki/C-Programming%2C-Review-Questions)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回：C编程，第4部分：字符串和结构](https://github.com/angrave/SystemProgramming/wiki/C-Programming,-Part-4:-Strings-and-Structs)
    | [返回：C编程，复习问题](https://github.com/angrave/SystemProgramming/wiki/C-Programming%2C-Review-Questions)'

- en: 'C Programming, Part 2: Text Input And Output'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C 编程，第2部分：文本输入和输出
- en: Printing to Streams
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打印到流
- en: How do I print strings, ints, chars to the standard output stream?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何将字符串、整数、字符打印到标准输出流中？
- en: Use `printf`. The first parameter is a format string that includes placeholders
    for the data to be printed. Common format specifiers are `%s` treat the argument
    as a c string pointer, keep printing all characters until the NULL-character is
    reached; `%d` print the argument as an integer; `%p` print the argument as a memory
    address.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `printf`。第一个参数是格式字符串，其中包括要打印的数据的占位符。常见的格式说明符是 `%s` 将参数视为 C 字符串指针，一直打印到达到
    NULL 字符为止；`%d` 将参数打印为整数；`%p` 将参数打印为内存地址。
- en: 'A simple example is shown below:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示了一个简单的示例：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By default, for performance, `printf` does not actually write anything out (by
    calling write) until its buffer is full or a newline is printed.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，为了性能，`printf` 实际上并不会写任何东西（通过调用 write），直到它的缓冲区满或打印换行符。
- en: How else can I print strings and single characters?
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我还可以如何打印字符串和单个字符？
- en: Use `puts( name );` and `putchar( c )` where name is a pointer to a C string
    and c is just a `char`
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `puts( name );` 和 `putchar( c )`，其中 name 是指向 C 字符串的指针，c 只是一个 `char`
- en: How do I print to other file streams?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何将内容打印到其他文件流中？
- en: 'Use `fprintf( _file_ , "Hello %s, score: %d", name, score);` Where _file_ is
    either predefined ''stdout'' ''stderr'' or a FILE pointer that was returned by
    `fopen` or `fdopen`'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '使用 `fprintf( _file_ , "Hello %s, score: %d", name, score);` 其中 _file_ 是预定义的
    ''stdout'' ''stderr'' 或者是由 `fopen` 或 `fdopen` 返回的 FILE 指针'
- en: Can I use file descriptors?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以使用文件描述符吗？
- en: Yes! Just use `dprintf(int fd, char* format_string, ...);` Just remember the
    stream may be buffered, so you will need to assure that the data is written to
    the file descriptor.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！只需使用 `dprintf(int fd, char* format_string, ...);` 只需记住流可能是缓冲的，所以您需要确保数据被写入文件描述符。
- en: How do I print data into a C string?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何将数据打印到C字符串中？
- en: Use `sprintf` or better `snprintf`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `sprintf` 或更好的 `snprintf`。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: snprintf returns the number of characters written excluding the terminating
    byte. In the above example this would be a maximum of 199.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: snprintf 返回写入的字符数，不包括终止字节。在上面的示例中，这将是最多 199 个。
- en: What if I really really want `printf` to call `write` without a newline?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果我真的非常想要 `printf` 调用 `write` 而不换行怎么办？
- en: Use `fflush( FILE* inp )`. The contents of the file will be written. If I wanted
    to write "Hello World" with no newline, I could write it like this.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `fflush( FILE* inp )`。文件的内容将被写入。如果我想要写入 "Hello World" 而不换行，我可以这样写。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How is `perror` helpful?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`perror` 有什么帮助？'
- en: Let's say that you have a function call that just failed (because you checked
    the man page and it is a failing return code). `perror(const char* message)` will
    print the english version of the error to stderr
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个函数调用刚刚失败了（因为您检查了 man 页面并且它是一个失败的返回代码）。`perror(const char* message)` 将把错误的英文版本打印到
    stderr
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Parsing Input
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析输入
- en: How do I parse numbers from strings?
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何从字符串中解析数字？
- en: Use `long int strtol(const char *nptr, char **endptr, int base);` or `long long
    int strtoll(const char *nptr, char **endptr, int base);`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `long int strtol(const char *nptr, char **endptr, int base);` 或 `long long
    int strtoll(const char *nptr, char **endptr, int base);`。
- en: What these functions do is take the pointer to your string `*nptr` and a `base`
    (ie binary, octal, decimal, hexadecimal etc) and an optional pointer `endptr`
    and returns a parsed int.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数的作用是获取指向您的字符串 `*nptr` 和一个 `base`（即二进制、八进制、十进制、十六进制等）以及一个可选的指针 `endptr`，并返回解析的整数。
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Be careful though! Error handling is kinda tricky because the function won't
    return an error code. On error, it'll return 0, and you have to manually check
    errno, but that could lead to trouble.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但要小心！错误处理有点棘手，因为该函数不会返回错误代码。出错时，它将返回 0，您必须手动检查 errno，但这可能会导致麻烦。
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How do I parse input using `scanf` into parameters?
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用 `scanf` 解析输入为参数？
- en: Use `scanf` (or `fscanf` or `sscanf`) to get input from the default input stream,
    an arbitrary file stream or a C string respectively. It's a good idea to check
    the return value to see how many items were parsed. `scanf` functions require
    valid pointers. It's a common source of error to pass in an incorrect pointer
    value. For example,
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `scanf`（或 `fscanf` 或 `sscanf`）从默认输入流、任意文件流或C字符串中获取输入。检查返回值以查看解析了多少项是个好主意。`scanf`
    函数需要有效的指针。将错误的指针值传入是一个常见的错误来源。例如，
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We wanted to write the character value into c and the integer value into the
    malloc'd memory. However we passed the address of the data pointer, not what the
    pointer is pointing to! So `sscanf` will change the pointer itself. i.e. the pointer
    will now point to address 10 so this code will later fail e.g. when free(data)
    is called.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要将字符值写入 c，将整数值写入 malloc'd 内存。然而我们传递的是数据指针的地址，而不是指针指向的内容！所以 `sscanf` 将会改变指针本身。也就是说，指针现在将指向地址
    10，所以这段代码以后会失败，例如当调用 `free(data)` 时。
- en: How do I stop scanf from causing a buffer overflow?
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何阻止 scanf 导致缓冲区溢出？
- en: The following code assumes the scanf won't read more than 10 characters (including
    the terminating byte) into the buffer.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码假设 scanf 不会读取超过 10 个字符（包括终止字节）到缓冲区中。
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can include an optional integer to specify how many characters EXCLUDING
    the terminating byte:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以包含一个可选的整数来指定多少个字符，不包括终止字节：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Why is `gets` dangerous? What should I use instead?
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么 `gets` 是危险的？我应该用什么代替？
- en: The following code is vulnerable to buffer overflow. It assumes or trusts that
    the input line will be no more than 10 characters, including the terminating byte.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码容易受到缓冲区溢出的影响。它假定或信任输入行不会超过 10 个字符，包括终止字节。
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`gets` is deprecated in C99 standard and has been removed from the latest C
    standard (C11). Programs should use `fgets` or `getline` instead.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`gets` 在 C99 标准中已被弃用，并且已从最新的 C 标准（C11）中删除。程序应该使用 `fgets` 或 `getline` 代替。'
- en: 'Where each have the following structure respectively:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 它们分别具有以下结构：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here''s a simple, safe way to read a single line. Lines longer than 9 characters
    will be truncated:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一种简单、安全的读取单行的方法。超过9个字符的行将被截断：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The result is NULL if there was an error or the end of the file is reached.
    Note, unlike `gets`, `fgets` copies the newline into the buffer, which you may
    want to discard-
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现错误或者到达文件末尾，结果将为NULL。请注意，与`gets`不同，`fgets`会将换行符复制到缓冲区中，您可能希望将其丢弃-
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How do I use `getline`?
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何使用`getline`？
- en: One of the advantages of `getline` is that will automatically (re-) allocate
    a buffer on the heap of sufficient size.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`getline`的优点之一是它将自动（重新）分配足够大小的堆上的缓冲区。'
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[Back: C Programming, Part 1: Introduction](https://github.com/angrave/SystemProgramming/wiki/C-Programming,-Part-1:-Introduction)
    | [Next: C Programming, Part 3: Common Gotchas](https://github.com/angrave/SystemProgramming/wiki/C-Programming%2C-Part-3%3A-Common-Gotchas)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回：C编程，第1部分：介绍](https://github.com/angrave/SystemProgramming/wiki/C-Programming,-Part-1:-Introduction)
    | [下一步：C编程，第3部分：常见陷阱](https://github.com/angrave/SystemProgramming/wiki/C-Programming%2C-Part-3%3A-Common-Gotchas)'

- en: Deadlock Review Questions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 死锁复习问题
- en: Topics
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主题
- en: Coffman Conditions Resource Allocation Graphs Dining Philosophers
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Coffman条件资源分配图餐厅哲学家
- en: Failed DP Solutions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败的DP解决方案
- en: Livelocking DP Solutions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活锁DP解决方案
- en: 'Working DP Solutions: Benefits/Drawbacks'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作的DP解决方案：优缺点
- en: Questions
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: What are the Coffman Conditions?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 科夫曼条件是什么？
- en: What do each of the Coffman conditions mean? (e.g. can you provide a definition
    of each one)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 科夫曼条件的每个意思是什么？（例如，你能提供每个条件的定义吗？）
- en: 'Give a real life example of breaking each Coffman condition in turn. A situation
    to consider: Painters, Paint, Paintbrushes etc. How would you assure that work
    would get done?'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 举一个打破科夫曼条件的真实例子。一个需要考虑的情况：画家，油漆，画笔等。你如何确保工作会完成？
- en: Be able to identify when Dining Philosophers code causes a deadlock (or not).
    For example, if you saw the following code snippet which Coffman condition is
    not satisfied?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够识别餐厅哲学家代码何时导致死锁（或者不导致）。例如，如果你看到以下代码片段，哪个科夫曼条件没有满足？
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If one thread calls
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个线程调用
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: and another threads calls
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个线程调用
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What happens and why? What happens if a third thread calls `pthread_mutex_lock(m1)`
    ?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么，为什么？如果第三个线程调用`pthread_mutex_lock(m1)`会发生什么？
- en: How many processes are blocked? As usual assume that a process is able to complete
    if it is able to acquire all of the resources listed below.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多少进程被阻塞？通常情况下，假设一个进程能够完成，如果它能够获取下面列出的所有资源。
- en: P1 acquires R1
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: P1获取R1
- en: P2 acquires R2
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: P2获取R2
- en: P1 acquires R3
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: P1获取R3
- en: P2 waits for R3
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: P2等待R3
- en: P3 acquires R5
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: P3获取R5
- en: P1 waits for R4
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: P1等待R4
- en: P3 waits for R1
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: P3等待R1
- en: P4 waits for R5
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: P4等待R5
- en: P5 waits for R1
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: P5等待R1
- en: (Draw out the resource graph!)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: （画出资源图！）

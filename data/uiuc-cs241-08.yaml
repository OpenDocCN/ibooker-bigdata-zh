- en: 'C Programming, Part 1: Introduction'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C编程，第1部分：介绍
- en: Want a quick introduction to C?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 想要快速了解C吗？
- en: Keep reading for the quick crash-course to C Programming below
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继续阅读下面的C编程快速入门课程
- en: Then see the [C Gotchas wiki page](/angrave/SystemProgramming/wiki/C-Programming%2C-Part-3%3A-Common-Gotchas).
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后查看[C Gotchas wiki页面](/angrave/SystemProgramming/wiki/C-Programming%2C-Part-3%3A-Common-Gotchas)。
- en: And learn about [text I/O](/angrave/SystemProgramming/wiki/C-Programming%2C-Part-2%3A-Text-Input-And-Output).
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并了解[文本I/O](/angrave/SystemProgramming/wiki/C-Programming%2C-Part-2%3A-Text-Input-And-Output)。
- en: Kick back relax with [Lawrence's intro videos](http://cs-education.github.io/sys/#)
    (Also there is a virtual machine-in-a-browser you can play with!)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与[劳伦斯的介绍视频](http://cs-education.github.io/sys/#)一起放松身心（还有一个可以玩的浏览器中的虚拟机！）
- en: External resources
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外部资源
- en: '[Learn X in Y](https://learnxinyminutes.com/docs/c/) (Highly recommended to
    skim through!)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在Y分钟内学习X](https://learnxinyminutes.com/docs/c/)（强烈建议快速浏览！）'
- en: '[C for C++/Java Programmers](http://www.ccs.neu.edu/course/com3620/parent/C-for-Java-C++/c-for-c++-alt.html)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[C for C++/Java程序员](http://www.ccs.neu.edu/course/com3620/parent/C-for-Java-C++/c-for-c++-alt.html)'
- en: '[C Tutorial by Brian Kernighan](http://www.lysator.liu.se/c/bwk-tutor.html)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Brian Kernighan的C教程](http://www.lysator.liu.se/c/bwk-tutor.html)
- en: '[c faq](http://c-faq.com/)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[c faq](http://c-faq.com/)'
- en: '[C Bootcamp](http://gribblelab.org/CBootCamp/index.html)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[C Bootcamp](http://gribblelab.org/CBootCamp/index.html)'
- en: '[C/C++ function reference](http://www.cplusplus.com/reference/clibrary/)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[C/C++函数参考](http://www.cplusplus.com/reference/clibrary/)'
- en: '[gdb (Gnu debugger) tutorial](http://www.unknownroad.com/rtfm/gdbtut/gdbtoc.html)
    Tip: run gdb with the "-tui" command line argument to get a full screen version
    of the debugger.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[gdb（Gnu调试器）教程](http://www.unknownroad.com/rtfm/gdbtut/gdbtoc.html)提示：使用“-tui”命令行参数运行gdb，以获得调试器的全屏版本。'
- en: Add your favorite resources here
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里添加您喜欢的资源
- en: Crash course intro to C
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C的快速入门课程
- en: '*Warning new page* Please fix typos and formatting mistakes for me and add
    useful links too.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*警告新页面* 请为我修复拼写错误和格式错误，并添加有用的链接。*'
- en: How do you write a complete hello world program in C?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在C中编写一个完整的hello world程序？
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Why do we use '`#include <stdio.h>`'?
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么我们使用`#include <stdio.h>`？
- en: We're lazy! We don't want to declare the `printf` function. It's already done
    for us inside the file '`stdio.h`'. The `#include` includes the text of the file
    as part of our file to be compiled.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '我们很懒！我们不想声明`printf`函数。它已经在文件`''stdio.h''`中为我们完成。`#include`将文件的文本包含为要编译的文件的一部分。 '
- en: Specifically, the `#include` directive takes the file `stdio.h` (which stands
    for **st**an**d**ard **i**nput and **o**utput) located somewhere in your operating
    system, copies the text, and substitutes it where the `#include` was.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，`#include`指令获取操作系统中某个位置的文件`stdio.h`（代表**st**an**d**ard **i**nput和**o**utput），复制文本，并将其替换为`#include`所在的位置。
- en: How are C strings represented?
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C字符串是如何表示的？
- en: They are represented as characters in memory. The end of the string includes
    a NULL (0) byte. So "ABC" requires four(4) bytes `['A','B','C','\0']`. The only
    way to find out the length of a C string is to keep reading memory until you find
    the NULL byte. C characters are always exactly one byte each.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它们在内存中表示为字符。字符串的结尾包括一个NULL（0）字节。因此，“ABC”需要四（4）个字节`['A'，'B'，'C'，'\0']`。查找C字符串的长度的唯一方法是继续读取内存，直到找到NULL字节。C字符始终每个都是一个字节。
- en: When you write a string literal `"ABC"` in an expression the string literal
    evaluates to a char pointer (`char *`), which points to the first byte/char of
    the string. This means `ptr` in the example below will hold the memory address
    of the first character in the string.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在表达式中写入字符串文字`"ABC"`时，字符串文字将计算为char指针（`char *`），它指向字符串的第一个字节/字符。这意味着下面示例中的`ptr`将保存字符串中第一个字符的内存地址。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How do you declare a pointer?
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何声明一个指针？
- en: A pointer refers to a memory address. The type of the pointer is useful - it
    tells the compiler how many bytes need to be read/written. You can declare a pointer
    as follows.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 指针指的是一个内存地址。指针的类型很有用-它告诉编译器需要读取/写入多少字节。您可以声明指针如下。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Due to C's grammar, a `int*` or any pointer is not actually its own type. You
    have to precede each pointer variable with an asterisk. As a common gotcha, the
    following
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于C的语法，`int*`或任何指针实际上并不是自己的类型。您必须在每个指针变量之前加上一个星号。作为一个常见的陷阱，以下
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Will only declare `*ptr3` as a pointer. `ptr4` will actually be a regular int
    variable. To fix this declaration, keep the `*` preceding to the pointer
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 只会声明`*ptr3`作为指针。`ptr4`实际上将是一个常规的整数变量。要修复此声明，请保留指针之前的`*`
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How do you use a pointer to read/write some memory?
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用指针读/写一些内存？
- en: Let's say that we declare a pointer `int *ptr`. For the sake of discussion,
    let's say that `ptr` points to memory address `0x1000`. If we want to write to
    a pointer, we can deference and assign `*ptr`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们声明一个指针`int *ptr`。为了讨论，假设`ptr`指向内存地址`0x1000`。如果我们想要写入指针，我们可以推迟并分配`*ptr`。
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What C will do is take the type of the pointer which is an `int` and writes
    `sizeof(int)` bytes from the start of the pointer, meaning that bytes `0x1000`,
    `0x1004`, `0x1008`, `0x100a` will all be zero. The number of bytes written depends
    on the pointer type. It is the same for all primitive types but structs are a
    little different.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: C将执行的操作是获取指针的类型，即`int`，并从指针的起始位置写入`sizeof(int)`字节，这意味着字节`0x1000`，`0x1004`，`0x1008`，`0x100a`都将为零。写入的字节数取决于指针类型。对于所有原始类型都是相同的，但是结构体有点不同。
- en: What is pointer arithmetic?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是指针算术？
- en: 'You can add an integer to a pointer. However the pointer type is used to determine
    how much to increment the pointer. For char pointers this is trivial because characters
    are always one byte:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将整数添加到指针。但是，指针类型用于确定要增加指针的量。对于char指针，这是微不足道的，因为字符始终是一个字节：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If an int is 4 bytes then ptr+1 points to 4 bytes after whatever ptr is pointing
    at.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果int是4个字节，那么ptr+1指向ptr指向的位置之后的4个字节。
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Because pointer arithmetic in C is always automatically scaled by the size of
    the type that is pointed to, you can't perform pointer arithmetic on void pointers.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因为C中的指针算术始终自动按指向的类型的大小进行缩放，所以不能对void指针执行指针算术。
- en: You can think of pointer arithmetic in C as essentially doing the following
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在C中，你可以将指针算术视为基本上是在做以下操作
- en: If I want to do
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我想要做
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Think
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 思考
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To get the value. **Every time you do pointer arithmetic, take a deep breath
    and make sure that you are shifting over the number of bytes you think you are
    shifting over.**
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取值。**每次进行指针算术运算时，深呼吸并确保你移动的字节数是你认为的那么多。**
- en: What is a void pointer?
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是void指针？
- en: A pointer without a type (very similar to a void variable). Void pointers are
    used when either a datatype you're dealing with is unknown or when you're interfacing
    C code with other programming languages. You can think of this as a raw pointer,
    or just a memory address. You cannot directly read or write to it because the
    void type does not have a size. For Example
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 没有类型的指针（非常类似于void变量）。当你处理的数据类型未知或者当你将C代码与其他编程语言进行接口时，会使用void指针。你可以把它看作是一个原始指针，或者只是一个内存地址。你不能直接读取或写入它，因为void类型没有大小。例如
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This does not require a cast because C automatically promotes `void*` to its
    appropriate type. **Note:**
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这不需要转换，因为C会自动将`void*`提升为其适当的类型。**注意：**
- en: gcc and clang are not total ISO-C compliant, meaning that they will let you
    do arithmetic on a void pointer. They will treat it as a char pointer but do not
    do this because it may not work with all compilers!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: gcc和clang并不是完全符合ISO-C标准，这意味着它们会允许你对void指针进行算术运算。它们会将其视为char指针，但不要这样做，因为它可能无法在所有编译器上工作！
- en: Does `printf` call write or does write call `printf`?
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`printf`调用write还是write调用`printf`？'
- en: '`printf` calls `write`. `printf` includes an internal buffer so, to increase
    performance `printf` may not call `write` everytime you call `printf`. `printf`
    is a C library function. `write` is a system call and as we know system calls
    are expensive. On the other hand `printf` uses a buffer which suits our needs
    better at that point'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`printf`调用`write`。`printf`包括一个内部缓冲区，所以为了提高性能，`printf`可能不会在每次调用`printf`时都调用`write`。`printf`是一个C库函数。`write`是一个系统调用，我们知道系统调用是昂贵的。另一方面，`printf`使用一个更适合我们需求的缓冲区'
- en: How do you print out pointer values? integers? strings?
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何打印出指针值？整数？字符串？
- en: Use format specifiers "%p" for pointers, "%d" for integers and "%s" for Strings.
    A full list of all of the format specifiers is found [here](http://www.cplusplus.com/reference/cstdio/printf/)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用格式说明符“%p”表示指针，“%d”表示整数，“%s”表示字符串。所有格式说明符的完整列表在[这里](http://www.cplusplus.com/reference/cstdio/printf/)中找到
- en: 'Example of integer:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 整数的例子：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Example of integer pointer:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 整数指针的例子：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Example of string:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串的例子：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[Strings as Pointers & Arrays @ BU](https://www.cs.bu.edu/teaching/c/string/intro/)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[字符串作为指针和数组@ BU](https://www.cs.bu.edu/teaching/c/string/intro/)'
- en: How would you make standard out be saved to a file?
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何将标准输出保存到文件？
- en: 'Simplest way: run your program and use shell redirection e.g.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的方法：运行你的程序并使用shell重定向，例如
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'More complicated way: close(1) and then use open to re-open the file descriptor.
    See [http://cs-education.github.io/sys/#chapter/0/section/3/activity/0](http://cs-education.github.io/sys/#chapter/0/section/3/activity/0)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的方法：关闭（1），然后使用open重新打开文件描述符。参见[http://cs-education.github.io/sys/#chapter/0/section/3/activity/0](http://cs-education.github.io/sys/#chapter/0/section/3/activity/0)
- en: What's the difference between a pointer and an array? Give an example of something
    you can do with one but not the other.
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指针和数组有什么区别？举一个你可以用其中一个做而另一个做不到的例子。
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Example
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 例子
- en: 'The array name points to the first byte of the array. Both `ary` and `ptr`
    can be printed out:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 数组名指向数组的第一个字节。`ary`和`ptr`都可以打印出来：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The array is mutable, so we can change its contents (be careful not to write
    bytes beyond the end of the array though). Fortunately 'World' is no longer than
    'Hello"
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是可变的，所以我们可以改变它的内容（但要小心不要写超出数组末尾的字节）。幸运的是，“World”不会比“Hello”更长
- en: In this case, the char pointer `ptr` points to some read only memory (where
    the statically allocated string literal is stored), so we cannot change those
    contents.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，char指针`ptr`指向一些只读内存（静态分配的字符串文字存储的地方），所以我们不能改变这些内容。
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We can, however, unlike the array, we change `ptr` to point to another piece
    of memory,
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与数组不同的是，我们可以将`ptr`更改为指向另一块内存，
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: What to take away from this is that pointers * can point to any type of memory
    while C arrays [] can only point to memory on the stack. In a more common case,
    pointers will point to heap memory in which case the memory referred to by the
    pointer CAN be modified.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从中可以得出的结论是指针*可以指向任何类型的内存，而C数组[]只能指向堆栈上的内存。在更常见的情况下，指针将指向堆内存，这种情况下指针引用的内存是可以修改的。
- en: '`sizeof()` returns the number of bytes. So using above code, what is sizeof(ary)
    and sizeof(ptr)?'
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`sizeof()`返回字节数。所以使用上面的代码，`ary`和`ptr`的`sizeof()`分别是多少？'
- en: '`sizeof(ary)`: `ary` is an array. Returns the number of bytes required for
    the entire array (5 chars + zero byte = 6 bytes) `sizeof(ptr)`: Same as sizeof(char
    *). Returns the number bytes required for a pointer (e.g. 4 or 8 for a 32 bit
    or 64 bit machine)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`sizeof(ary)`: `ary`是一个数组。返回整个数组所需的字节数（5个字符+零字节=6个字节）`sizeof(ptr)`: 与`sizeof(char
    *)`相同。返回指针所需的字节数（例如32位或64位机器的4或8）'
- en: '`sizeof` is a special operator. Really it''s something the compiler substitutes
    in before compiling the program because the size of all types is known at compile
    time. When you have `sizeof(char*)` that takes the size of a pointer on your machine
    (8 bytes for a 64 bit machine and 4 for a 32 bit and so on). When you try `sizeof(char[])`,
    the compiler looks at that and substitutes the number of bytes that the **entire**
    array contains because the total size of the array is known at compile time.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`sizeof`是一个特殊的运算符。实际上，它是编译程序之前编译器替换的东西，因为所有类型的大小在编译时是已知的。当你有`sizeof(char*)`时，它会获取你的机器上指针的大小（64位机器为8字节，32位机器为4字节等）。当你尝试`sizeof(char[])`时，编译器会查看并替换整个数组包含的字节数，因为数组的总大小在编译时是已知的。'
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Be careful, using sizeof for the length of a string!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 小心，使用sizeof获取字符串的长度！
- en: Which of the following code is incorrect or correct and why?
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以下代码中哪些是不正确的或正确的，为什么？
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Explanation: An array p is created on the stack for the correct size to hold
    H,e,l,l,o, and a null byte i.e. (6) bytes. This array is stored on the stack and
    is invalid after we return from f2.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 解释：在堆栈上为包含H，e，l，l，o和一个空字节即（6）字节的正确大小创建了一个数组p。这个数组存储在堆栈上，在我们从f2返回后就无效了。
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Explanation: p is a pointer. It holds the address of the string constant. The
    string constant is unchanged and valid even after f3 returns.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 解释：p是一个指针。它保存了字符串常量的地址。字符串常量在f3返回后仍然保持不变和有效。
- en: '[PRE23]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Explanation: The array is static meaning it exists for the lifetime of the
    process (static variables are not on the heap or the stack).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 解释：数组是静态的，这意味着它存在于进程的整个生命周期（静态变量不在堆或栈上）。
- en: How do you look up information C library calls and system calls?
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何查找C库调用和系统调用的信息？
- en: 'Use the man pages. Note the man pages are organized into sections. Section
    2 = System calls. Section 3 = C libraries. Web: Google "man7 open" shell: man
    -S2 open or man -S3 printf'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用man手册。请注意，man手册分为几个部分。第2部分=系统调用。第3部分=C库。网络：谷歌“man7 open” shell：man -S2 open或man
    -S3 printf
- en: How do you allocate memory on the heap?
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在堆上分配内存？
- en: Use malloc. There's also realloc and calloc. Typically used with sizeof. e.g.
    enough space to hold 10 integers
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用malloc。还有realloc和calloc。通常与sizeof一起使用。例如，足够的空间来容纳10个整数
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: What's wrong with this string copy code?
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这个字符串复制代码有什么问题？
- en: '[PRE25]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the above code it simply changes the dest pointer to point to source string.
    Also the nuls bytes are not copied. Here's a better version -
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，它只是改变了dest指针指向源字符串。而且nuls字节没有被复制。这是一个更好的版本 -
- en: '[PRE26]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Note it's also usual to see the following kind of implementation, which does
    everything inside the expression test, including copying the nul byte.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，通常还会看到以下类型的实现，其中包括在表达式测试中执行所有操作，包括复制nul字节。
- en: '[PRE27]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How do you write a strdup replacement?
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何编写一个strdup替代品？
- en: '[PRE28]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How do you unallocate memory on the heap?
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在堆上取消分配内存？
- en: Use free!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用free！
- en: '[PRE29]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: What is double free error? How can you avoid? What is a dangling pointer? How
    do you avoid?
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是双重释放错误？如何避免？什么是悬空指针？如何避免？
- en: A double free error is when you accidentally attempt to free the same allocation
    twice.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 双重释放错误是当您意外地尝试两次释放相同的分配时发生的。
- en: '[PRE30]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The fix is firstly to write correct programs! Secondly, it's good programming
    hygiene to reset pointers once the memory has been freed. This ensures the pointer
    cant be used incorrectly without the program crashing.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 修复首先是编写正确的程序！其次，一旦内存被释放，重置指针是良好的编程习惯。这确保了指针在没有程序崩溃的情况下不能被错误使用。
- en: 'Fix:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 修复：
- en: '[PRE31]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: What is an example of buffer overflow?
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓冲区溢出的一个例子是什么？
- en: 'Famous example: Heart Bleed (performed a memcpy into a buffer that was of insufficient
    size). Simple example: implement a strcpy and forget to add one to strlen, when
    determining the size of the memory required.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 著名的例子：心脏出血（将一个memcpy复制到一个不足大小的缓冲区）。简单的例子：实现一个strcpy并忘记在确定所需内存大小时添加一个strlen。
- en: What is 'typedef' and how do you use it?
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “typedef”是什么，你如何使用它？
- en: Declares an alias for a type. Often used with structs to reduce the visual clutter
    of having to write 'struct' as part of the type.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 声明类型的别名。通常与结构一起使用，以减少必须将“struct”写为类型的一部分的视觉混乱。
- en: '[PRE32]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In this class, we regularly typedef functions. A typedef for a function can
    be this for example
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个课程中，我们经常使用typedef函数。例如，函数的typedef可以是这样的
- en: '[PRE33]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This declares a function type comparator that accepts two `void*` params and
    returns an integer.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这声明了一个接受两个`void*`参数并返回整数的比较器函数类型。
- en: Wow that was a lot of C
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哇，这是很多C的内容
- en: Don't worry more to come!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 别担心，还有更多要来的！
- en: '[Next: C Programming, Part 2: Text Input And Output](https://github.com/angrave/SystemProgramming/wiki/C-Programming%2C-Part-2%3A-Text-Input-And-Output)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[下一步：C编程，第2部分：文本输入和输出](https://github.com/angrave/SystemProgramming/wiki/C-Programming%2C-Part-2%3A-Text-Input-And-Output)'

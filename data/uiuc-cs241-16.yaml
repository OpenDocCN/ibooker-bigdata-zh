- en: 'Forking, Part 1: Introduction'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分叉，第1部分：介绍
- en: A word of warning
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 警告
- en: Process forking is a very powerful (and very dangerous) tool. If you mess up
    and cause a fork bomb (explained later on this page), **you can bring down the
    entire system**. To reduce the chances of this, limit your maximum number of processes
    to a small number e.g 40 by typing `ulimit -u 40` into a command line. Note that
    this limit is only for the user, which means if you fork bomb, then you won't
    be able to kill all of the processes you just created since calling `killall`
    requires your shell to fork() ... ironic right? So what can we do about this.
    One solution is to spawn another shell instance as another user (for example root)
    before hand and kill processes from there. Another is to use the built in `exec`
    command to kill all the user processes (careful you only have one shot at this).
    Finally you could reboot the system :)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 进程分叉是一个非常强大（也非常危险）的工具。如果出错并导致分叉炸弹（稍后在本页解释），**你可能会导致整个系统崩溃**。为了减少这种可能性，通过在命令行中输入`ulimit
    -u 40`来将最大进程数限制为一个小数字，例如40。请注意，此限制仅适用于用户，这意味着如果你引发了分叉炸弹，那么你将无法杀死你刚刚创建的所有进程，因为调用`killall`需要你的shell来`fork()`...讽刺吧？那么我们该怎么办呢？一个解决方案是提前生成另一个用户（例如root）的另一个shell实例并从那里杀死进程。另一个方法是使用内置的`exec`命令杀死所有用户进程（小心，你只有一次机会）。最后，你可以重新启动系统
    :)
- en: When testing fork() code, ensure that you have either root and/or physical access
    to the machine involved. If you must work on fork () code remotely, remember that
    **kill -9 -1** will save you in the event of an emergency.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试`fork()`代码时，请确保你有根用户和/或物理访问权限。如果你必须远程处理`fork()`代码，请记住，在紧急情况下**kill -9 -1**会帮助你。
- en: 'TL;DR: Fork can be **extremely** dangerous if you aren''t prepared for it.
    **You have been warned.**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 总结：如果你没有准备好，`fork`可能会**非常**危险。**你已经被警告过了。**
- en: Intro to Fork
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分叉介绍
- en: What does fork do?
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`fork`做什么？'
- en: The `fork` system call clones the current process to create a new process. It
    creates a new process (the child process) by duplicating the state of the existing
    process with a few minor differences (discussed below). The child process does
    not start from main. Instead it returns from `fork()` just as the parent process
    does.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '`fork`系统调用克隆当前进程以创建一个新进程。它通过复制现有进程的状态创建一个新进程（子进程），有一些细微的差异（下面讨论）。子进程不是从main开始。相反，它像父进程一样从`fork()`返回。'
- en: What is the simplest `fork()` example?
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是最简单的`fork()`例子？
- en: Here's a very simple example...
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的例子...
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Why does this example print 42 twice?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么这个例子会打印两次42？
- en: The following program prints out 42 twice - but the `fork()` is after the `printf`!?
    Why?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序打印出42两次 - 但`fork()`在`printf`之后！？为什么？
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `printf` line *is* executed only once however notice that the printed contents
    is not flushed to standard out (there's no newline printed, we didn't call `fflush`,
    or change the buffering mode). The output text is therefore still in process memory
    waiting to be sent. When `fork()` is executed the entire process memory is duplicated
    including the buffer. Thus the child process starts with a non-empty output buffer
    which will be flushed when the program exits.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`printf`行*只执行一次，但请注意打印的内容没有刷新到标准输出（没有打印换行，我们没有调用`fflush`或更改缓冲模式）。因此，输出文本仍然在进程内存中等待发送。当执行`fork()`时，整个进程内存被复制，包括缓冲区。因此，子进程从一个非空输出缓冲区开始，该缓冲区将在程序退出时刷新。'
- en: How do you write code that is different for the parent and child process?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何编写针对父进程和子进程不同的代码？
- en: 'Check the return value of `fork()`. Return value `-1` = failed; `0` = in child
    process; positive = in parent process (and the return value is the child process
    id). Here''s one way to remember which is which:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 检查`fork()`的返回值。返回值`-1` = 失败；`0` = 在子进程中；正数 = 在父进程中（返回值是子进程id）。以下是记住哪个是哪个的一种方法：
- en: 'The child process can find its parent - the original process that was duplicated
    - by calling `getppid()` - so does not need any additional return information
    from `fork()`. The parent process however can only find out the id of the new
    child process from the return value of `fork`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 子进程可以通过调用`getppid()`找到其父进程 - 被复制的原始进程 - 因此不需要从`fork()`获得任何额外的返回信息。然而，父进程只能从`fork`的返回值中找到新子进程的id：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What is a fork bomb ?
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是分叉炸弹？
- en: 'A ''fork bomb'' is when you attempt to create an infinite number of processes.
    A simple example is shown below:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '''分叉炸弹''是指尝试创建无限数量的进程。下面是一个简单的例子：'
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will often bring a system to a near-standstill as it attempts to allocate
    CPU time and memory to a very large number of processes that are ready to run.
    Comment: System administrators don''t like fork-bombs and may set upper limits
    on the number of processes each user can have or may revoke login rights because
    it creates a disturbance in the force for other users'' programs. You can also
    limit the number of child processes created by using `setrlimit()`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常会使系统几乎停滞，因为它试图为大量准备运行的进程分配CPU时间和内存。评论：系统管理员不喜欢分叉炸弹，可能会设置每个用户可以拥有的进程数量的上限，或者可能会撤销登录权限，因为它会为其他用户的程序带来麻烦。你也可以使用`setrlimit()`来限制创建的子进程数量。
- en: fork bombs are not necessarily malicious - they occasionally occur due to student
    coding errors.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 分叉炸弹并不一定是恶意的 - 它们偶尔会由于学生编码错误而发生。
- en: Angrave suggests that the Matrix trilogy, where the machine and man finally
    work together to defeat the multiplying Agent-Smith, was a cinematic plot based
    on an AI-driven fork-bomb.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Angrave建议《黑客帝国》三部曲，机器和人最终共同努力击败不断增殖的Agent-Smith，是基于一个基于AI驱动的分叉炸弹的电影情节。
- en: Waiting and Execing
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 等待和执行
- en: How does the parent process wait for the child to finish?
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 父进程如何等待子进程完成？
- en: Use `waitpid` (or `wait`).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`waitpid`（或`wait`）。
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Can I make the child process execute another program?
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以让子进程执行另一个程序吗？
- en: Yes. Use one of the [`exec`](http://man7.org/linux/man-pages/man3/exec.3.html)
    functions after forking. The `exec` set of functions replaces the process image
    with the the process image of what is being called. This means that any lines
    of code after the `exec` call are replaced. Any other work you want the child
    process to do should be done before the `exec` call.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。在fork后使用其中一个[`exec`](http://man7.org/linux/man-pages/man3/exec.3.html)函数。`exec`函数集用正在调用的进程映像替换进程映像。这意味着`exec`调用后的任何代码行都将被替换。任何其他要求子进程执行的工作都应该在`exec`调用之前完成。
- en: The [Wikipedia article](https://en.wikipedia.org/wiki/Exec_(system_call)#C_language_prototypes)
    does a great job helping you make sense of the names of the exec family.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[Wikipedia文章](https://en.wikipedia.org/wiki/Exec_(system_call)#C_language_prototypes)在帮助您理解exec系列名称方面做得很好。'
- en: The naming schemes can be shortened like this
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 命名方案可以缩短如下
- en: 'The base of each is exec (execute), followed by one or more letters:'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每个的基础都是exec（执行），后面跟着一个或多个字母：
- en: ''
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: e – An array of pointers to environment variables is explicitly passed to the
    new process image.
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: e - 指向环境变量的指针数组被显式传递给新的进程映像。
- en: ''
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: l – Command-line arguments are passed individually (a list) to the function.
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: l - 命令行参数被逐个传递（列表）给函数。
- en: ''
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: p – Uses the PATH environment variable to find the file named in the file argument
    to be executed.
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: p - 使用PATH环境变量来查找要执行的文件名。
- en: ''
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: v – Command-line arguments are passed to the function as an array (vector) of
    pointers.
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: v - 命令行参数作为指针数组（向量）传递给函数。
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A simpler way to execute another program
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行另一个程序的简单方法
- en: 'Use `system`. Here is how to use it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`system`。以下是如何使用它的方法：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `system` call will fork, execute the command passed by parameter and the
    original parent process will wait for this to finish. This also means that `system`
    is a blocking call: The parent process can''t continue until the process started
    by `system` exits. This may or may not be useful. Also, `system` actually creates
    a shell which is then given the string, which is more overhead than just using
    `exec` directly. The standard shell will use the `PATH` environment variable to
    search for a filename that matches the command. Using system will usually be sufficient
    for many simple run-this-command problems but can quickly become limiting for
    more complex or subtle problems, and it hides the mechanics of the fork-exec-wait
    pattern so we encourage you to learn and use `fork` `exec` and `waitpid` instead.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`system`调用将分叉，执行由参数传递的命令，原始父进程将等待其完成。这也意味着`system`是一个阻塞调用：父进程在由`system`启动的进程退出之前无法继续。这可能有用，也可能没有。此外，`system`实际上创建了一个shell，然后给出字符串，这比直接使用`exec`更耗费资源。标准shell将使用`PATH`环境变量搜索与命令匹配的文件名。对于许多简单的运行此命令问题，使用system通常足够了，但对于更复杂或微妙的问题，它可能很快变得有限，并且它隐藏了分叉-执行-等待模式的机制，因此我们鼓励您学习并使用`fork`
    `exec`和`waitpid`。'
- en: What is the silliest fork example?
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最愚蠢的fork示例是什么？
- en: A slightly silly example is shown below. What will it print? Try it with multiple
    arguments to your program.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示了一个稍微愚蠢的例子。它会打印什么？尝试使用多个参数运行您的程序。
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The amazing parallel apparent-O(N) *sleepsort* is today's silly winner. First
    published on [4chan in 2011](https://dis.4chan.org/read/prog/1295544154) . A version
    of this awful but amusing sorting algorithm is shown below.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊奇的并行明显O(N) *sleepsort*是今天的愚蠢赢家。首次发布于[2011年的4chan](https://dis.4chan.org/read/prog/1295544154)。下面显示了这种糟糕但有趣的排序算法的一个版本。
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note: The algorithm isn''t actually O(N) because of how the system scheduler
    works. Though there are parallel algorithms that run in O(log(N)) per process,
    this is sadly not one of them.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：由于系统调度程序的工作方式，该算法实际上并不是O(N)。虽然有并行算法可以在每个进程中以O(log(N))运行，但这不幸地不是其中之一。
- en: What is different in the child process than the parent process?
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子进程与父进程有什么不同？
- en: 'The key differences include:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 关键区别包括：
- en: The process id returned by `getpid()`. The parent process id returned by `getppid()`.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由`getpid()`返回的进程ID。由`getppid()`返回的父进程ID。
- en: The parent is notified via a signal, SIGCHLD, when the child process finishes
    but not vice versa.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当子进程完成时，父进程通过信号SIGCHLD被通知，但反之则不然。
- en: The child does not inherit pending signals or timer alarms. For a complete list
    see the [fork man page](http://man7.org/linux/man-pages/man2/fork.2.html)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子进程不会继承未决信号或定时器警报。完整列表请参阅[fork man page](http://man7.org/linux/man-pages/man2/fork.2.html)
- en: Do child processes share open filehandles?
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子进程共享打开的文件句柄吗？
- en: Yes! In fact both processes use the same underlying kernel file descriptor.
    For example if one process rewinds the random access position back to the beginning
    of the file, then both processes are affected.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！实际上，两个进程都使用相同的底层内核文件描述符。例如，如果一个进程将随机访问位置倒回到文件的开头，那么两个进程都会受到影响。
- en: Both child and parent should `close` (or `fclose`) their file descriptors or
    file handle respectively.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 子进程和父进程都应该`close`（或`fclose`）它们的文件描述符或文件句柄。
- en: How can I find out more?
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何获取更多信息？
- en: Read the man pages!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读man页面！
- en: '[fork](http://man7.org/linux/man-pages/man2/fork.2.html)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[fork](http://man7.org/linux/man-pages/man2/fork.2.html)'
- en: '[exec](http://man7.org/linux/man-pages/man3/exec.3.html)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[exec](http://man7.org/linux/man-pages/man3/exec.3.html)'
- en: '[wait](http://man7.org/linux/man-pages/man2/wait.2.html)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[wait](http://man7.org/linux/man-pages/man2/wait.2.html)'
- en: '[Back: Processes, Part 1: Introduction](https://github.com/angrave/SystemProgramming/wiki/Processes,-Part-1:-Introduction)
    | [Next: Forking, Part 2: Fork, Exec, Wait](https://github.com/angrave/SystemProgramming/wiki/Forking%2C-Part-2%3A-Fork%2C-Exec%2C-Wait)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回：进程，第1部分：介绍](https://github.com/angrave/SystemProgramming/wiki/Processes,-Part-1:-Introduction)
    | [下一步：分叉，第2部分：分叉，执行，等待](https://github.com/angrave/SystemProgramming/wiki/Forking%2C-Part-2%3A-Fork%2C-Exec%2C-Wait)'

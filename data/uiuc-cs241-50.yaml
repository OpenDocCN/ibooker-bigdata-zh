- en: 'Scheduling, Part 1: Scheduling Processes'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调度，第1部分：调度进程
- en: Thinking about scheduling.
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考虑调度。
- en: '[CPU Scheduling](https://en.wikipedia.org/wiki/Scheduling_(computing)) is the
    problem of efficiently selecting which process to run on a system''s CPU cores.
    In a busy system there will be more ready-to-run processes than there are CPU
    cores, so the system kernel must evaluate which processes should be scheduled
    to run on the CPU and which processes should be placed in a ready queue to be
    executed later.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[CPU调度](https://en.wikipedia.org/wiki/Scheduling_(computing))是有效地选择要在系统CPU核心上运行的进程的问题。在繁忙的系统中，准备运行的进程将比CPU核心多，因此系统内核必须评估应该调度哪些进程在CPU上运行，以及应该将哪些进程放在就绪队列中以便稍后执行。'
- en: The additional complexity of multi-threaded and multiple CPU cores are considered
    a distraction to this initial exposition so are ignored here.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 多线程和多CPU核心的额外复杂性被认为是对这个初始阐述的干扰，因此在这里被忽略。
- en: 'Another gotcha for non-native speakers is the dual meanings of "Time": The
    word "Time" can be used in both clock and elapsed duration context. For example
    "The arrival time of the first process was 9:00am." and, "The running time of
    the algorithm is 3 seconds".'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非母语的人来说，另一个需要注意的是“时间”一词的双重含义：单词“时间”可以在时钟和经过的持续时间上下文中使用。例如，“第一个进程的到达时间是上午9:00。”和“算法的运行时间为3秒。”
- en: How is scheduling measured and which scheduler is best?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调度如何衡量，哪种调度程序最好？
- en: Scheduling effects the performance of the system, specifically the *latency*
    and *throughput* of the system. The throughput might be measured by a system value,
    for example the I/O throughput - the number of bytes written per second, or number
    of small processes that can complete per unit time, or using a higher level of
    abstraction for example number of customer records processed per minute. The latency
    might be measured by the response time (elapse time before a process can start
    to send a response) or wait time or turnaround time (the elapsed time to complete
    a task). Different schedulers offer different optimization trade-offs that may
    or may not be appropriate to desired use - there is no optimal scheduler for all
    possible environments and goals. For example 'shortest-job-first' will minimize
    total wait time across all jobs but in interactive (UI) environments it would
    be preferable to minimize response time (at the expense of some throughput), while
    FCFS seems intuitively fair and easy to implement but suffers from the Convoy
    Effect.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 调度影响系统的性能，特别是系统的延迟和吞吐量。吞吐量可以通过系统值来衡量，例如I/O吞吐量-每秒写入的字节数，或者每单位时间可以完成的小进程数量，或者使用更高级的抽象，例如每分钟处理的客户记录数量。延迟可以通过响应时间（进程开始发送响应之前的经过时间）或等待时间或周转时间（完成任务所经过的时间）来衡量。不同的调度程序提供不同的优化权衡，可能适用于所需的使用-并非所有可能的环境和目标都有最佳的调度程序。例如，“最短作业优先”将最小化所有作业的总等待时间，但在交互（UI）环境中，最好是最小化响应时间（以牺牲一些吞吐量），而FCFS似乎直观公平且易于实现，但受到车队效应的影响。
- en: What is arrival time?
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 到达时间是什么？
- en: The time at which a process first arrives at the ready queue, and is ready to
    start executing. If a CPU is idle, the arrival time would also be the starting
    time of execution.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 进程首次到达就绪队列并准备开始执行的时间。如果CPU空闲，到达时间也将是执行的开始时间。
- en: What is preemption?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是抢占？
- en: 'Without preemption processes will run until they are unable to utilize the
    CPU any further. For example the following conditions would remove a process from
    the CPU and the CPU would be available to be scheduled for other processes: The
    process terminates due to a signal, is blocked waiting for concurrency primitive,
    or exits normally. Thus once a process is scheduled it will continue even if another
    process with a high priority (e.g. shorter job) appears on the ready queue.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 没有抢占，进程将运行，直到无法再利用CPU。例如，以下条件将从CPU中移除进程，并使CPU可供其他进程调度：进程因信号终止，被阻塞等待并发原语，或正常退出。因此，一旦进程被调度，即使另一个具有较高优先级（例如更短的作业）的进程出现在就绪队列上，它也将继续运行。
- en: With preemption, the existing processes may be removed immediately if a more
    preferable process is added to the ready queue. For example, suppose at t=0 with
    a Shortest Job First scheduler there are two processes (P1 P2) with 10 and 20
    ms execution times. P1 is scheduled. P1 immediately creates a new process P3,
    with execution time of 5 ms, which is added to the ready queue. Without preemption,
    P3 will run 10ms later (after P1 has completed). With preemption, P1 will be immediately
    evicted from the CPU and instead placed back in the ready queue, and P3 will be
    executed instead by the CPU.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通过抢占，如果就绪队列中添加了一个更可取的进程，现有进程可能会立即被移除。例如，假设在t=0时，使用最短作业优先调度程序有两个进程（P1 P2），执行时间分别为10和20毫秒。P1被调度。P1立即创建一个新的进程P3，执行时间为5毫秒，将其添加到就绪队列。如果没有抢占，P3将在10毫秒后运行（在P1完成后）。有了抢占，P1将立即从CPU中驱逐，并放回就绪队列，CPU将执行P3。
- en: Which schedulers suffer from starvation?
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哪些调度程序会导致饥饿？
- en: Any scheduler that uses a form of prioritization can result in starvation because
    earlier processes may never be scheduled to run (assigned a CPU). For example
    with SJF, longer jobs may never be scheduled if the system continues to have many
    short jobs to schedule. It all depends on the [type of scheduler](https://en.wikipedia.org/wiki/Scheduling_(computing)#Types_of_operating_system_schedulers).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 任何使用优先级形式的调度程序都可能导致饥饿，因为较早的进程可能永远不会被调度运行（分配CPU）。例如，使用SJF，如果系统继续有许多短作业要调度，较长的作业可能永远不会被调度。这一切取决于调度程序的类型。
- en: Why might a process (or thread) be placed on the ready queue?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么进程（或线程）会被放置在就绪队列上？
- en: 'A process is placed on the ready queue when it is able to use a CPU. Some examples
    include:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当进程能够使用CPU时，进程将被放置在就绪队列上。一些例子包括：
- en: A process was blocked waiting for a `read` from storage or socket to complete
    and data is now available.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进程被阻塞等待存储或套接字的“读”完成，现在数据可用。
- en: A new process has been created and is ready to start.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个新进程已经创建并准备好开始。
- en: A process thread was blocked on a synchronization primitive (condition variable,
    semaphore, mutex lock) but is now able to continue.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个进程线程被阻塞在同步原语（条件变量、信号量、互斥锁）上，但现在可以继续。
- en: A process is blocked waiting for a system call to complete but a signal has
    been delivered and the signal handler needs to run.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个进程被阻塞，等待系统调用完成，但已经传递了一个信号，信号处理程序需要运行。
- en: Similar examples can be generated when considering threads.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑线程时可以生成类似的例子。
- en: Measures of Efficiency
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 效率的度量
- en: '`start_time` is the wall-clock start time of the process (CPU starts working
    on it) `end_time` is the end wall-clock of the process (CPU finishes the process)
    `run_time` is the total amount of CPU time required `arrival_time` is the time
    the process enters the scheduler (CPU may not start working on it)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`开始时间`是进程的挂钟开始时间（CPU开始处理它）`结束时间`是进程的结束挂钟（CPU完成进程）`运行时间`是所需的CPU时间总量`到达时间`是进程进入调度程序的时间（CPU可能不开始处理它）'
- en: What is 'turnaround time'?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是“周转时间”？
- en: The total time from when you the process arrives to when it ends.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从进程到达到结束的总时间。
- en: '`turnaround_time = end_time - arrival_time`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`周转时间=结束时间-到达时间`'
- en: What is 'response time'?
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是“响应时间”？
- en: The total latency (time) that it takes from when the process arrives to when
    the CPU actually starts working on it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从进程到达到CPU实际开始处理它所需的总延迟（时间）。
- en: '`response_time = start_time - arrival_time`'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`响应时间=开始时间-到达时间`'
- en: What is 'wait time'?
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是“等待时间”？
- en: Wait time is the *total* wait time i.e. the total time that a process is on
    the ready queue. A common mistake is to believe it is only the initial waiting
    time in the ready queue.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 等待时间是*总*等待时间，即进程在就绪队列上的总时间。一个常见的错误是认为它只是在就绪队列中的初始等待时间。
- en: If a CPU intensive process with no I/O takes 7 minutes of CPU time to complete
    but required 9 minutes of wall-clock time to complete we can conclude that it
    was placed on the ready-queue for 2 minutes. For those 2 minutes the process was
    ready to run but had no CPU assigned. It does not matter when the job was waiting,
    the wait time is 2 minutes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个不进行I/O的CPU密集型进程需要7分钟的CPU时间才能完成，但需要9分钟的挂钟时间才能完成，我们可以得出结论，它在就绪队列中等待了2分钟。在这2分钟内，进程准备好运行，但没有分配CPU。作业等待的时间是2分钟，无论作业等待的时间是什么时候。
- en: '`wait_time = (end_time - arrival_time) - run_time`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`等待时间=（结束时间-到达时间）-运行时间`'
- en: What is the Convoy Effect?
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是车队效应？
- en: '"The Convoy Effect is where I/O intensive processes are continually backed
    up, waiting for CPU-intensive processes that hog the CPU. This results in poor
    I/O performance, even for processes that have tiny CPU needs."'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: “车队效应是指I/O密集型进程不断积压，等待占用CPU的CPU密集型进程。这导致I/O性能不佳，即使对于CPU需求很小的进程也是如此。”
- en: Suppose the CPU is currently assigned to a CPU intensive task and there is a
    set of I/O intensive processes that are in the ready queue. These processes require
    just a tiny amount of CPU time but they are unable to proceed because they are
    waiting for the CPU-intensive task to be removed from the processor. These processes
    are starved until the the CPU bound process releases the CPU. But the CPU will
    rarely be released (for example in the case of a FCFS scheduler, we must wait
    until the processes is blocked due to an I/O request). The I/O intensive processes
    can now finally satisfy their CPU needs, which they can do quickly because their
    CPU needs are small and the CPU is assigned back to the CPU-intensive process
    again. Thus the I/O performance of the whole system suffers through an indirect
    effect of starvation of CPU needs of all processes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 假设CPU当前被分配给一个CPU密集型任务，并且有一组I/O密集型进程在就绪队列中。这些进程只需要很少的CPU时间，但它们无法继续进行，因为它们正在等待CPU密集型任务从处理器中移除。这些进程会饿死，直到CPU绑定的进程释放CPU。但CPU很少会被释放（例如，在FCFS调度程序的情况下，我们必须等到进程因I/O请求而被阻塞）。I/O密集型进程现在可以满足它们的CPU需求，因为它们的CPU需求很小，而CPU又被分配给CPU密集型进程。因此，整个系统的I/O性能会因所有进程的CPU需求饥饿而受到间接影响。
- en: This effect is usually discussed in the context of FCFS scheduler, however a
    round robin scheduler can also exhibit the Convoy effect for long time-quanta.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这种效应通常在FCFS调度程序的情况下讨论，但是循环调度程序也可能出现长时间量的车队效应。
- en: Linux Scheduling
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux调度
- en: As of February 2016, Linux by default uses the *Completely Fair Scheduler* for
    CPU scheduling and the Budget Fair Scheduling "BFQ" for I/O scheduling. Appropriate
    scheduling can have a significant impact on throughput and latency. Latency is
    particularly important for interactive and soft-real time applications such as
    audio and video streaming. See the discussion and comparative benchmarks here
    [[https://lkml.org/lkml/2014/5/27/314](https://lkml.org/lkml/2014/5/27/314)] for
    more information.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2016年2月，Linux默认使用*完全公平调度程序*进行CPU调度，使用I/O调度的“BFQ”进行预算公平调度。适当的调度对吞吐量和延迟有重大影响。延迟对交互式和软实时应用程序特别重要，例如音频和视频流。有关更多信息，请参见此处的讨论和比较基准[[https://lkml.org/lkml/2014/5/27/314](https://lkml.org/lkml/2014/5/27/314)]。
- en: Here is how the CFS schedules
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是CFS的调度方式
- en: The CPU creates a Red-Black tree with the processes virtual runtime (runtime
    / nice_value) and sleeper fairness (if the process is waiting on something give
    it the CPU when it is done waiting).
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU使用进程的虚拟运行时间（运行时间/优先级值）和睡眠公平性（如果进程正在等待某些东西，当它完成等待时给它CPU）创建红黑树。
- en: (Nice values are the kernel's way of giving priority to certain processes, the
    lower the higher priority)
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: （优先级值是内核给予某些进程优先级的方式，值越低，优先级越高）
- en: The kernel chooses the lowest one based on this metric and schedules that process
    to run next, taking it off the queue. Since the red-black tree is self balancing
    this operation is guaranteed $O(log(n))$ (selecting the min process is the same
    runtime)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核根据此度量选择最低的度量，并安排该进程作为下一个运行，将其从队列中移除。由于红黑树是自平衡的，此操作保证为$O(log(n))$（选择最小进程是相同的运行时间）
- en: Although it is called the Fair Scheduler there are a fair bit of problems.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它被称为公平调度器，但存在相当多的问题。
- en: Groups of processes that are scheduled may have imbalanced loads so the scheduler
    roughly distributes the load. When another CPU gets free it can only look at the
    average load of a group schedule not the individual cores. So the free CPU may
    not take the work from a CPU that is burning so long as the average is fine.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被调度的进程组可能负载不平衡，因此调度器会大致分配负载。当另一个CPU空闲时，它只能查看组调度的平均负载，而不是单独的核心。因此，只要平均负载正常，空闲的CPU可能不会接手一个长时间运行的CPU的工作。
- en: If a group of processes is running, on non adjacent cores then there is a bug.
    If the two cores are more than a hop away, the load balancing algorithm won't
    even consider that core. Meaning if a CPU is free and a CPU that is doing more
    work is more than a hop away, it won't take the work (may have been patched).
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一组进程在非相邻的核心上运行，那么就会出现问题。如果两个核心的距离超过一个跳跃，负载平衡算法甚至不会考虑那个核心。这意味着如果一个CPU空闲，而另一个CPU的工作量超过一个跳跃的距离，它不会接手这个工作（可能已经修复）。
- en: After a thread goes to sleep on a subset of cores, when it wakes up it can only
    be scheduled on the cores that it was sleeping on. If those cores are now bus
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程在一组核心上休眠后，醒来时只能在它休眠的核心上被调度。如果这些核心现在很忙，那么就会出现问题。

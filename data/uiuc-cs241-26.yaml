- en: 'Pthreads, Part 1: Introduction'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pthreads，第1部分：介绍
- en: Intro to Threads
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线程简介
- en: What is a thread?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是线程？
- en: A thread is short for 'thread-of-execution'. It represents the sequence of instructions
    that the CPU has (and will) execute. To remember how to return from function calls,
    and to store the values of automatic variables and parameters a thread uses a
    stack.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 线程是“执行线程”的缩写。它表示CPU已经（并将）执行的指令序列。为了记住如何从函数调用返回，并存储自动变量和参数的值，线程使用堆栈。
- en: What is a Lightweight Process (LWP)? How does it relate to threads?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轻量级进程（LWP）是什么？它与线程有什么关系？
- en: Well for all intents and purposes a thread is a process (meaning that creating
    a thread is similar to `fork`) except there is **no copying** meaning no copy
    on write. What this allows is for a process to share the same address space, variables,
    heap, file descriptors and etc.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有目的和意图来说，线程就是一个进程（意味着创建线程类似于`fork`），只是**没有复制**，意味着没有写时复制。这允许进程共享相同的地址空间、变量、堆、文件描述符等。
- en: The actual system call to create a thread is similar to `fork`; it's `clone`.
    We won't go into the specifics but you can read the [man pages](http://man7.org/linux/man-pages/man2/clone.2.html)
    keeping in mind that it is outside the direct scope of this course.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 创建线程的实际系统调用类似于`fork`；它是`clone`。我们不会深入讨论，但您可以阅读[man pages](http://man7.org/linux/man-pages/man2/clone.2.html)，请记住这超出了本课程的直接范围。
- en: LWP or threads are preferred to forking for a lot of scenarios because there
    is a lot less overhead creating them. But in some cases (notably python uses this)
    multiprocessing is the way to make your code faster.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，LWP或线程比forking更受欢迎，因为创建它们的开销要少得多。但在某些情况下（特别是Python使用这种方式），多进程是使代码更快的方法。
- en: How does the thread's stack work?
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线程的堆栈是如何工作的？
- en: Your main function (and other functions you might call) has automatic variables.
    We will store them in memory using a stack and keep track of how large the stack
    is by using a simple pointer (the "stack pointer"). If the thread calls another
    function, we move our stack pointer down, so that we have more space for parameters
    and automatic variables. Once it returns from a function, we can move the stack
    pointer back up to its previous value. We keep a copy of the old stack pointer
    value - on the stack! This is why returning from a function is very quick - it's
    easy to 'free' the memory used by automatic variables - we just need to change
    the stack pointer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您的主函数（以及您可能调用的其他函数）具有自动变量。我们将使用堆栈将它们存储在内存中，并使用简单指针（“堆栈指针”）跟踪堆栈的大小。如果线程调用另一个函数，我们将将堆栈指针向下移动，以便我们有更多的空间用于参数和自动变量。一旦从函数返回，我们可以将堆栈指针移回到其先前的值。我们在堆栈上保留旧的堆栈指针值的副本！这就是为什么从函数返回非常快速的原因-释放自动变量使用的内存很容易-我们只需要更改堆栈指针。
- en: '![](../Images/e209a7428a9ce45094abf36a151c7d63.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e209a7428a9ce45094abf36a151c7d63.jpg)'
- en: In a multi threaded program, there are multiple stack but only one address space.
    The pthread library allocates some stack space (either in the heap or using a
    part of the main program's stack) and uses the `clone` function call to start
    the thread at that stack address. The total address space may look something like
    this.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在多线程程序中，有多个堆栈，但只有一个地址空间。pthread库分配一些堆栈空间（可以在堆中分配，也可以使用主程序的堆栈的一部分），并使用`clone`函数调用在该堆栈地址启动线程。总地址空间可能看起来像这样。
- en: '![](../Images/4013002f4b22a09d0fc6a117c0a29816.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4013002f4b22a09d0fc6a117c0a29816.jpg)'
- en: How many threads can my process have?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我的进程可以有多少个线程？
- en: You can have more than one thread running inside a process. You get the first
    thread for free! It runs the code you write inside 'main'. If you need more threads
    you can call `pthread_create` to create a new thread using the pthread library.
    You'll need to pass a pointer to a function so that the thread knows where to
    start.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在一个进程内运行多个线程。您可以免费获得第一个线程！它运行您在“main”内编写的代码。如果您需要更多线程，可以使用pthread库调用`pthread_create`创建一个新线程。您需要传递一个指向函数的指针，以便线程知道从哪里开始。
- en: The threads you create all live inside the same virtual memory because they
    are part of the same process. Thus they can all see the heap, the global variables
    and the program code etc. Thus you can have two (or more) CPUs working on your
    program at the same time and inside the same process. It's up to the operating
    system to assign the threads to CPUs. If you have more active threads than CPUs
    then the kernel will assign the thread to a CPU for a short duration (or until
    it runs out of things to do) and then will automatically switch the CPU to work
    on another thread. For example, one CPU might be processing the game AI while
    another thread is computing the graphics output.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您创建的所有线程都存在于相同的虚拟内存中，因为它们是同一进程的一部分。因此，它们都可以看到堆、全局变量和程序代码等。因此，您可以让两个（或更多）CPU同时在同一进程中运行您的程序。由操作系统来分配线程给CPU。如果活动线程多于CPU，则内核将为线程分配一个CPU进行短暂的持续时间（或直到它没有要做的事情），然后将自动切换CPU以处理另一个线程。例如，一个CPU可能正在处理游戏AI，而另一个线程正在计算图形输出。
- en: Simple Usage
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单用法
- en: Hello world pthread example
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Hello world pthread示例
- en: To use pthreads you will need to include `pthread.h` AND you need to compile
    with `-pthread` (or `-lpthread`) compiler option. This option tells the compiler
    that your program requires threading support
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用pthread，您需要包括`pthread.h`，并且需要使用`-pthread`（或`-lpthread`）编译器选项进行编译。此选项告诉编译器您的程序需要线程支持
- en: 'To create a thread use the function `pthread_create`. This function takes four
    arguments:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建线程，请使用函数`pthread_create`。此函数有四个参数：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first is a pointer to a variable that will hold the id of the newly created
    thread.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个是指向将保存新创建的线程的ID的变量的指针。
- en: The second is a pointer to attributes that we can use to tweak and tune some
    of the advanced features of pthreads.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个是指向属性的指针，我们可以使用它来调整和调优一些pthread的高级特性。
- en: The third is a pointer to a function that we want to run
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个是指向我们想要运行的函数的指针
- en: Fourth is a pointer that will be given to our function
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四个是将赋予我们的函数的指针
- en: The argument `void *(*start_routine) (void *)` is difficult to read! It means
    a pointer that takes a `void *` pointer and returns a `void *` pointer. It looks
    like a function declaration except that the name of the function is wrapped with
    `(* .... )`
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`void *(*start_routine) (void *)` 这个参数很难理解！它表示一个接受 `void *` 指针并返回 `void *`
    指针的指针。它看起来像一个函数声明，只是函数的名称被 `(* .... )` 包裹起来。'
- en: 'Here''s the simplest example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最简单的例子：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If we want to wait for our thread to finish use `pthread_join`
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要等待线程完成，可以使用 `pthread_join`。
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the above example, `result` will be `null` because the busy function returned
    `null`. We need to pass the address-of result because `pthread_join` will be writing
    into the contents of our pointer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，`result` 将会是 `null`，因为忙碌的函数返回了 `null`。我们需要传递结果的地址，因为 `pthread_join`
    将会写入指针的内容。
- en: See [Pthreads Part 2](https://github.com/angrave/SystemProgramming/wiki/Pthreads%2C-Part-2%3A-Usage-in-Practice)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[Pthreads Part 2](https://github.com/angrave/SystemProgramming/wiki/Pthreads%2C-Part-2%3A-Usage-in-Practice)

- en: 'Networking, Part 1: Introduction'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络，第1部分：介绍
- en: 'Caveat: It should be obvious that page is *not* a complete description of IP,
    UDP or TCP! Instead it is a short introduction and is sufficient so that we can
    build upon these concepts in later lectures.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：显而易见，本页*不是*IP、UDP或TCP的完整描述！相反，这是一个简短的介绍，足以让我们在以后的讲座中建立在这些概念之上。
- en: What is "IP4" "IP6"?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “IP4”“IP6”是什么？
- en: The following is the "30 second" introduction to internet protocol (IP) - which
    is the primary way to send packets ("datagrams") of information from one machine
    to another.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是互联网协议（IP）的“30秒”介绍-这是从一台机器向另一台机器发送信息包（“数据报”）的主要方法。
- en: '"IP4", or more precisely, "IPv4" is version 4 of the Internet Protocol that
    describes how to send packets of information across a network from one machine
    to another . Roughly 95% of all packets on the Internet today are IPv4 packets.
    A significant limitation of IPv4 is that source and destination addresses are
    limited to 32 bits (IPv4 was designed at a time when the idea of 4 billion devices
    connected to the same network was unthinkable - or at least not worth making the
    packet size larger)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: “IP4”，或更准确地说，“IPv4”是互联网协议的第4版，描述了如何在网络上从一台机器发送信息包到另一台机器。大约95%的互联网数据包今天都是IPv4数据包。IPv4的一个重要限制是源地址和目的地址被限制为32位（IPv4是在当时认为4亿台设备连接到同一网络是不可想象的时候设计的，或者至少不值得增加数据包大小）
- en: Each IPv4 packet includes a very small header - typically 20 bytes (more precisely,
    "octets"), that includes a source and destination address.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 每个IPv4数据包包括一个非常小的头部-通常为20字节（更准确地说，“八位字节”），其中包括源地址和目的地址。
- en: 'Conceptually the source and destination addresses can be split into two: a
    network number (the upper bits) and the lower bits represent a particular host
    number on that network.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念上讲，源地址和目的地址可以分为两部分：网络号（高位）和低位表示该网络上特定主机号。
- en: A newer packet protocol "IPv6" solves many of the limitations of IPv4 (e.g.
    makes routing tables simpler and 128 bit addresses) however less than 5% of web
    traffic is IPv6 based.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 更新的数据包协议“IPv6”解决了IPv4的许多限制（例如，使路由表更简单和128位地址），但是不到5%的网络流量是基于IPv6的。
- en: A machine can have an IPv6 address and an IPv4 address.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一台机器可以有一个IPv6地址和一个IPv4地址。
- en: '"There''s no place like 127.0.0.1"!'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “没有像127.0.0.1这样的地方”！
- en: A special IPv4 address is `127.0.0.1` also known as localhost. Packets sent
    to 127.0.0.1 will never leave the machine; the address is specified to be the
    same machine.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊的IPv4地址是`127.0.0.1`，也称为本地主机。发送到127.0.0.1的数据包永远不会离开机器；该地址被指定为同一台机器。
- en: Notice that the 32 bits address is split into 4 octets i.e. each number in the
    dot notation can be 0-255 inclusive. However IPv4 addresses can also be written
    as an integer.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，32位地址被分成4个八位字节，即点表示法中的每个数字可以是0-255。但是IPv4地址也可以写成整数。
- en: '... and ... "There''s no place like 0:0:0:0:0:0:0:1?"'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '...和...“没有像0:0:0:0:0:0:0:1这样的地方”？'
- en: The 128bit localhost address in IPv6 is `0:0:0:0:0:0:0:1` which can be written
    in its shortened form, `::1`
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6中的128位本地主机地址是`0:0:0:0:0:0:0:1`，可以用缩写形式`::1`来表示。
- en: What is a port?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是端口？
- en: To send a datagram (packet) to a host on the Internet using IPv4 (or IPv6) you
    need to specify the host address and a port. The port is an unsigned 16 bit number
    (i.e. the maximum port number is 65535).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用IPv4（或IPv6）向互联网上的主机发送数据报（数据包），您需要指定主机地址和端口。端口是一个无符号的16位数字（即最大端口号为65535）。
- en: A process can listen for incoming packets on a particular port. However only
    processes with super-user (root) access can listen on ports < 1024\. Any process
    can listen on ports 1024 or higher.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个进程可以监听特定端口上的传入数据包。但是只有具有超级用户（root）访问权限的进程才能监听端口<1024。任何进程都可以监听1024或更高的端口。
- en: 'An often used port is port 80: Port 80 is used for unencrypted http requests
    (i.e. web pages). For example, if a web browser connects to [http://www.bbc.com/](http://www.bbc.com/),
    then it will be connecting to port 80.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 经常使用的端口是端口80：端口80用于未加密的http请求（即网页）。例如，如果一个网络浏览器连接到[http://www.bbc.com/](http://www.bbc.com/)，那么它将连接到端口80。
- en: What is UDP? When is it used?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UDP是什么？它什么时候使用？
- en: 'UDP is a connectionless protocol that is built on top of IPv4 and IPv6\. It''s
    very simple to use: Decide the destination address and port and send your data
    packet! However the network makes no guarantee about whether the packets will
    arrive. Packets (aka Datagrams) may be dropped if the network is congested. Packets
    may be duplicated or arrive out of order.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: UDP是建立在IPv4和IPv6之上的无连接协议。它非常简单易用：决定目的地址和端口，然后发送数据包！然而，网络不能保证数据包是否会到达。如果网络拥挤，数据包（也称为数据报）可能会丢失。数据包可能会重复或无序到达。
- en: Between two distant data-centers it's typical to see 3% packet loss.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个远程数据中心之间，典型的数据包丢失率为3%。
- en: A typical use case for UDP is when receiving up to date data is more important
    than receiving all of the data. For example, a game may send continuous updates
    of player positions. A streaming video signal may send picture updates using UDP
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: UDP的典型用例是当接收最新数据比接收所有数据更重要时。例如，游戏可能会发送玩家位置的持续更新。流媒体视频信号可能使用UDP发送图片更新。
- en: What is TCP? When is it used?
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TCP是什么？它什么时候使用？
- en: 'TCP is a connection-based protocol that is built on top of IPv4 and IPv6 (and
    therefore can be described as "TCP/IP" or "TCP over IP"). TCP creates a *pipe*
    between two machines and abstracts away the low level packet-nature of the Internet:
    Thus, under most conditions, bytes sent from one machine will eventually arrive
    at the other end without duplication or data loss.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: TCP是建立在IPv4和IPv6之上的基于连接的协议（因此可以被描述为“TCP/IP”或“TCP over IP”）。TCP在两台机器之间创建了一个“管道”，并抽象了互联网的低级数据包特性：因此，在大多数情况下，从一台机器发送的字节最终会到达另一端，而不会重复或丢失数据。
- en: TCP will automatically manage resending packets, ignoring duplicate packets,
    re-arranging out-of-order packets and changing the rate at which packets are sent.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: TCP将自动管理重发数据包，忽略重复数据包，重新排列无序数据包，并改变发送数据包的速率。
- en: TCP's three way handshake is known as SYN, SYN-ACK, and ACK. The diagram on
    this page helps with understanding the TCP handshake. [TCP Handshake](http://www.inetdaemon.com/tutorials/internet/tcp/3-way_handshake.shtml)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: TCP的三次握手被称为SYN，SYN-ACK和ACK。本页面上的图表有助于理解TCP握手。[TCP握手](http://www.inetdaemon.com/tutorials/internet/tcp/3-way_handshake.shtml)
- en: Most services on the Internet today (e.g. a web service) use TCP because it
    hides the complexity of lower, packet-level nature of the Internet.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 今天互联网上的大多数服务（例如Web服务）使用TCP，因为它隐藏了互联网更低级别的数据包特性的复杂性。

- en: 9 EXTENDING HANGMAN
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9 扩展猜词游戏
- en: 原文：[https://inventwithpython.com/invent4thed/chapter9.html](https://inventwithpython.com/invent4thed/chapter9.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://inventwithpython.com/invent4thed/chapter9.html](https://inventwithpython.com/invent4thed/chapter9.html)
- en: '[Prev: Chapter 8 - Writing the Hangman Code](chapter8.html) | [Next: Chapter
    10 - Tic-Tac-Toe](chapter10.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一章：第8章 - 编写猜词游戏代码](chapter8.html) | [下一章：第10章 - 井字棋](chapter10.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
- en: Now that you’ve created a basic Hangman game, let’s look at some ways you can
    extend it with new features. In this chapter, you’ll add multiple word sets for
    the computer to draw from and the ability to change the game’s difficulty level.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了一个基本的猜词游戏，让我们看看如何通过新功能来扩展它。在本章中，你将为计算机添加多个词组，并且能够改变游戏的难度级别。
- en: '**TOPICS COVERED IN THIS CHAPTER**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**本章涵盖的主题**'
- en: • The dictionary data type
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: • 字典数据类型
- en: • Key-value pairs
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: • 键值对
- en: • The `keys()` and `values()` dictionary methods
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: • `keys()`和`values()`字典方法
- en: • Multiple variable assignment
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • 多变量赋值
- en: '**Adding More Guesses**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加更多的猜测**'
- en: After you’ve played Hangman a few times, you might think that six guesses isn’t
    enough for the player to get many of the words. You can easily give them more
    guesses by adding more multiline strings to the `HANGMAN_PICS` list.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在玩了几次猜词游戏之后，你可能会觉得六次猜测对玩家来说不够。你可以通过向`HANGMAN_PICS`列表添加更多的多行字符串来轻松地给他们更多的猜测。
- en: 'Save your *hangman.py* program as *hangman2.py*. Then add the following instructions
    on line 37 and after to extend the list that contains the hanging man ASCII art:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的*hangman.py*程序另存为*hangman2.py*。然后在第37行和之后添加以下指令，以扩展包含吊死人ASCII艺术的列表：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code adds two new multiline strings to the `HANGMAN_PICS` list, one with
    the hanging man’s left ear drawn, and the other with both ears drawn. Because
    the program will tell the player they have lost based on `len(missedLetters) ==
    len(HANGMAN_PICS) - 1`, this is the only change you need to make. The rest of
    the program works with the new `HANGMAN_PICS` list just fine.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将两个新的多行字符串添加到`HANGMAN_PICS`列表中，一个是画了吊死人的左耳，另一个是画了两只耳朵。因为程序会告诉玩家他们输了，基于`len(missedLetters)
    == len(HANGMAN_PICS) - 1`，这是你需要做的唯一改变。程序的其余部分可以很好地使用新的`HANGMAN_PICS`列表。
- en: '**The Dictionary Data Type**'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**字典数据类型**'
- en: 'In the first version of the Hangman program, we used an animal word list, but
    you could change the list of words on line 48\. Instead of animals, you could
    have colors:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在猜词游戏的第一个版本中，我们使用了一个动物词汇表，但是你可以在第48行更改单词列表。你可以有颜色：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Or shapes:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 或者形状：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Or fruits:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 或者水果：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With some modification, you can even change the code so that the Hangman game
    uses sets of words, such as animals, colors, shapes, or fruits. The program can
    tell the player which set the secret word is from.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一些修改，你甚至可以改变代码，使得猜词游戏使用动物、颜色、形状或水果等词组。程序可以告诉玩家秘密单词来自哪个词组。
- en: To make this change, you’ll need a new data type called a *dictionary*. A dictionary
    is a collection of values like a list. But instead of accessing the items in the
    dictionary with an integer index, you can access them with an index of any data
    type. For dictionaries, these indexes are called *keys*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行这种改变，你需要一个叫做*字典*的新数据类型。字典是一个像列表一样的值的集合。但是，你可以使用任何数据类型的索引来访问字典中的项，而不是使用整数索引。对于字典，这些索引被称为*键*。
- en: 'Dictionaries use `{` and `}` (curly brackets) instead of `[` and `]` (square
    brackets). Enter the following into the interactive shell:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 字典使用`{`和`}`（大括号）而不是`[`和`]`（方括号）。在交互式shell中输入以下内容：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The values between the curly brackets are *key-value pairs*. The keys are on
    the left of the colon and the key’s values are on the right. You can access the
    values like items in lists by using the key. To see an example, enter the following
    into the interactive shell:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 大括号之间的值是*键值对*。键在冒号的左边，键的值在右边。你可以通过使用键来访问值，就像列表中的项一样。要查看一个例子，请在交互式shell中输入以下内容：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Instead of putting an integer between the square brackets, you can use, say,
    a string key. In the `spam` dictionary, I used both the integer `4` and the string
    `'eggs'` as keys.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在方括号之间不是放一个整数，而是使用一个字符串键。在`spam`字典中，我使用了整数`4`和字符串`'eggs'`作为键。
- en: '***Getting the Size of Dictionaries with len()***'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用len()获取字典的大小***'
- en: 'You can get the number of key-value pairs in a dictionary with the `len()`
    function. For example, enter the following into the interactive shell:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`len()`函数获取字典中键值对的数量。例如，在交互式shell中输入以下内容：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `len()` function will return an integer value for the number of key-value
    pairs, which in this case is `3`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`len()`函数将返回一个整数值，表示键值对的数量，这里是`3`。'
- en: '***The Difference Between Dictionaries and Lists***'
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***字典和列表的区别***'
- en: 'One difference between dictionaries and lists is that dictionaries can have
    keys of any data type, as you’ve seen. But remember, because `0` and `''0''` are
    different values, they will be different keys. Enter this into the interactive
    shell:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 字典和列表之间的一个区别是，字典可以有任何数据类型的键，正如你所见。但是要记住，因为`0`和`'0'`是不同的值，它们将成为不同的键。在交互式shell中输入以下内容：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can also loop over both lists and the keys in dictionaries using a `for`
    loop. To see how this works, enter the following into the interactive shell:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`for`循环遍历列表和字典中的键。要查看它是如何工作的，请在交互式shell中输入以下内容：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The keys and values may have printed in a different order for you because, unlike
    lists, dictionaries are unordered. The first item in a list named `listStuff`
    would be `listStuff[0]`. But there’s no first item in a dictionary, because dictionaries
    do not have any sort of order. In this code, Python just chooses an order based
    on how it stores the dictionary in memory, which is not guaranteed to always be
    the same.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 键和值可能以不同的顺序打印出来，因为与列表不同，字典是无序的。列表`listStuff`中的第一项将是`listStuff[0]`。但是字典中没有第一项，因为字典没有任何排序。在这段代码中，Python只是根据它如何存储字典在内存中来选择顺序，这并不能保证始终相同。
- en: 'Enter the following into the interactive shell:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互式shell中输入以下内容：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The expression `favorites1 == favorites2` evaluates to `True` because dictionaries
    are unordered and considered equal if they have the same key-value pairs in them.
    Meanwhile, lists are ordered, so two lists with the same values in a different
    order are not equal to each other. To see the difference, enter this into the
    interactive shell:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式`favorites1 == favorites2`的评估结果为`True`，因为字典是无序的，如果它们具有相同的键-值对，则被认为是相等的。与此同时，列表是有序的，因此具有不同顺序的相同值的两个列表不相等。要查看区别，请在交互式shell中输入以下内容：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The expression `listFavs1 == listFavs2` evaluates to `False` because the lists’
    contents are ordered differently.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式`listFavs1 == listFavs2`的评估结果为`False`，因为列表的内容排序不同。
- en: '***The keys() and values() Dictionary Methods***'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***keys()和values()字典方法***'
- en: Dictionaries have two useful methods, `keys()` and `values()`. These will return
    values of a type called `dict_keys` and `dict_values`, respectively. Much like
    range objects, list forms of those data types are returned by `list()`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 字典有两个有用的方法，`keys()`和`values()`。它们将分别返回类型为`dict_keys`和`dict_values`的值。与范围对象一样，这些数据类型的列表形式由`list()`返回。
- en: 'Enter the following into the interactive shell:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互式shell中输入以下内容：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using `list()` with the `keys()` or `values()` methods, you can get a list of
    just the keys or just the values of a dictionary.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`keys()`或`values()`方法与`list()`一起，您可以获得字典的键或值的列表。
- en: '***Using Dictionaries of Words in Hangman***'
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***在Hangman中使用字典的单词***'
- en: Let’s change the code in the new Hangman game to support different sets of secret
    words. First, replace the value assigned to `words` with a dictionary whose keys
    are strings and values are lists of strings. The string method `split()` will
    return a list of strings with one word each.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更改新Hangman游戏中的代码，以支持不同的秘密单词集。首先，将分配给`words`的值替换为一个键为字符串，值为字符串列表的字典。字符串方法`split()`将返回一个包含一个单词的字符串列表。
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Lines 48 to 51 are still just one assignment statement. The instruction doesn’t
    end until the final curly bracket on line 51.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第48到51行仍然只是一个赋值语句。指令直到第51行的最后一个大括号结束。
- en: '**Randomly Choosing from a List**'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**从列表中随机选择**'
- en: The `choice()` function in the `random` module takes a list argument and returns
    a random value from it. This is similar to what the previous `getRandomWord()`
    function did. You’ll use `choice()` in the new version of the `getRandomWord()`
    function.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`random`模块中的`choice()`函数接受一个列表参数并从中返回一个随机值。这类似于以前的`getRandomWord()`函数所做的。您将在`getRandomWord()`函数的新版本中使用`choice()`。'
- en: 'To see how the `choice()` function works, enter the following into the interactive
    shell:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解`choice()`函数的工作原理，请在交互式shell中输入以下内容：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Just as the `randint()` function returns a random integer each time, the `choice()`
    function returns a random value from the list.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`randint()`函数每次返回一个随机整数一样，`choice()`函数从列表中返回一个随机值。
- en: 'Change the `getRandomWord()` function so that its parameter will be a dictionary
    of lists of strings, instead of just a list of strings. Here is what the function
    originally looked like:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 更改`getRandomWord()`函数，使其参数成为字符串列表的字典，而不仅仅是字符串列表。以下是该函数最初的样子：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Change the code in this function so that it looks like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 更改此函数中的代码，使其看起来像这样：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We’ve changed the name of the `wordList` parameter to `wordDict` to be more
    descriptive. Now instead of choosing a random word from a list of strings, first
    the function chooses a random key in the `wordDict` dictionary by calling `random.choice()`.
    And instead of returning the string `wordList[wordIndex]`, the function returns
    a list with two items. The first item is `wordDict[wordKey][wordIndex]`. The second
    item is `wordKey`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将`wordList`参数的名称更改为`wordDict`，以使其更具描述性。现在，函数首先通过调用`random.choice()`从`wordDict`字典中选择一个随机键，而不是从字符串列表中选择一个随机单词。而且，函数返回的不再是字符串`wordList[wordIndex]`，而是一个包含两个项目的列表。第一个项目是`wordDict[wordKey][wordIndex]`。第二个项目是`wordKey`。
- en: 'The `wordDict[wordKey][wordIndex]` expression on line 61 may look complicated,
    but it’s just an expression you can evaluate one step at a time like anything
    else. First, imagine that `wordKey` has the value `''Fruits''` and `wordIndex`
    has the value `5`. Here is how `wordDict[wordKey][wordIndex]` would evaluate:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 第61行的`wordDict[wordKey][wordIndex]`表达式可能看起来很复杂，但它只是一个你可以一步一步评估的表达式，就像其他任何东西一样。首先，想象一下`wordKey`的值是`'Fruits'`，`wordIndex`的值是`5`。这是`wordDict[wordKey][wordIndex]`的评估方式：
- en: '![image](../Images/47d9e2622fd26b2c8eb438d20c59ea39.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/47d9e2622fd26b2c8eb438d20c59ea39.png)'
- en: In this case, the item in the list this function returns would be the string
    `'watermelon'`. (Remember that indexes start at `0`, so `[5]` refers to the sixth
    item in the list, not the fifth.)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，该函数返回的列表中的项目将是字符串`'watermelon'`。（请记住，索引从`0`开始，因此`[5]`指的是列表中的第六个项目，而不是第五个。）
- en: Because the `getRandomWord()` function now returns a list of two items instead
    of a string, `secretWord` will be assigned a list, not a string. You can assign
    these two items into two separate variables using multiple assignment, which we’ll
    cover in “[Multiple Assignment](#calibre_link-544)” on [page 118](#calibre_link-337).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`getRandomWord()`函数现在返回的是一个包含两个项目的列表，而不是一个字符串，所以`secretWord`将被分配一个列表，而不是一个字符串。您可以使用多重赋值将这两个项目分配到两个单独的变量中，我们将在“[多重赋值](#calibre_link-544)”中进行介绍。
- en: '**Deleting Items from Lists**'
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**从列表中删除项目**'
- en: 'A `del` statement will delete an item at a certain index from a list. Because
    `del` is a statement, not a function or an operator, it doesn’t have parentheses
    or evaluate to a return value. To try it out, enter the following into the interactive
    shell:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`del`语句将从列表中删除特定索引处的项目。因为`del`是一个语句，而不是一个函数或运算符，所以它没有括号，也不会评估为返回值。要尝试它，请在交互式shell中输入以下内容：'
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Notice that when you deleted the item at index `1`, the item that used to be
    at index `2` became the new value at index `1`; the item that used to be at index
    `3` became the new value at index `2`; and so on. Everything above the deleted
    item moved down one index.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当你删除索引为`1`的项目时，原来在索引`2`的项目成为了新的索引`1`的值；原来在索引`3`的项目成为了新的索引`2`的值；依此类推。删除的项目上面的所有项目都向下移动了一个索引。
- en: 'You can type `del animals[1]` again and again to keep deleting items from the
    list:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以一遍又一遍地输入`del animals[1]`来不断删除列表中的项目：
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The length of the `HANGMAN_PICS` list is also the number of guesses the player
    gets. By deleting strings from this list, you can reduce the number of guesses
    and make the game harder.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`HANGMAN_PICS`列表的长度也是玩家的猜测次数。通过从该列表中删除字符串，你可以减少猜测次数，使游戏变得更加困难。'
- en: 'Add the following lines of code to your program between the lines `print(''H
    A N G M A N'')` and `missedLetters = ''''`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序的`print('H A N G M A N')`和`missedLetters = ''`之间添加以下代码行：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This code deletes items from the `HANGMAN_PICS` list, making it shorter depending
    on the difficulty level selected. As the difficulty level increases, more items
    are deleted from the `HANGMAN_PICS` list, resulting in fewer guesses. The rest
    of the code in the Hangman game uses the length of this list to tell when the
    player has run out of guesses.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码从`HANGMAN_PICS`列表中删除项目，根据所选的难度级别使其变短。难度级别增加时，`HANGMAN_PICS`列表中会删除更多的项目，导致猜测次数减少。Hangman游戏中的其余代码使用此列表的长度来判断玩家是否已经用完了猜测次数。
- en: '**Multiple Assignment**'
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**多重赋值**'
- en: '*Multiple assignment* is a shortcut to assign multiple variables in one line
    of code. To use multiple assignment, separate your variables with commas and assign
    them to a list of values. For example, enter the following into the interactive
    shell:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*多重赋值*是一种在一行代码中为多个变量赋值的快捷方式。要使用多重赋值，用逗号分隔变量，并将它们赋给一个值列表。例如，输入以下内容到交互式shell中：'
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The preceding example is equivalent to the following assignment statements:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子等同于以下赋值语句：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You must put the same number of variables on the left side of the `=` assignment
    operator as there are items in the list on the right side. Python will automatically
    assign the value of the first item in the list to the first variable, the second
    item’s value to the second variable, and so on. If you don’t have the same number
    of variables and items, the Python interpreter will give you an error, like so:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须在`=`赋值运算符的左侧放置与右侧列表中的项目数量相同的变量。Python会自动将列表中的第一个项目的值赋给第一个变量，第二个项目的值赋给第二个变量，依此类推。如果变量和项目的数量不一样，Python解释器会给出错误，如下所示：
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Change lines 120 and 157 of the Hangman code to use multiple assignment with
    the return value of `getRandomWord()`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 更改Hangman代码的第120行和第157行，使用`getRandomWord()`的返回值进行多重赋值：
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Line 120 assigns the two returned values from `getRandomWord(words)` to `secretWord`
    and `secretSet`. Line 157 does this again if the player chooses to play another
    game.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 第120行将`getRandomWord(words)`返回的两个值分配给`secretWord`和`secretSet`。如果玩家选择再玩一局，第157行会再次执行这个操作。
- en: '**Printing the Word Category for the Player**'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打印玩家的单词类别
- en: 'The last change you’ll make is to tell the player which set of words they’re
    trying to guess. This way, the player will know if the secret word is an animal,
    color, shape, or fruit. Here is the original code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你将要做的最后一个更改是告诉玩家他们正在尝试猜测哪个单词集。这样，玩家就会知道秘密单词是动物、颜色、形状还是水果。以下是原始代码：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In your new version of Hangman, add line 124 so your program looks like this:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的新版Hangman中，添加第124行，使你的程序看起来像这样：
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now you’re done with the changes to the Hangman program. Instead of just a single
    list of strings, the secret word is chosen from many different lists of strings.
    The program also tells the player which set of words the secret word is from.
    Try playing this new version. You can easily change the `words` dictionary starting
    on line 48 to include more sets of words.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了对Hangman程序的更改。秘密单词不再只是一个字符串列表，而是从许多不同的字符串列表中选择的。程序还会告诉玩家秘密单词来自哪个单词集。尝试玩这个新版本。你可以很容易地在第48行开始更改`words`字典，以包含更多的单词集。
- en: '**Summary**'
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: We’re done with Hangman! You learned some new concepts when you added the extra
    features in this chapter. Even after you’ve finished writing a game, you can always
    add more features as you learn more about Python programming.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了Hangman！在本章中添加额外功能时，你学到了一些新概念。即使在完成编写游戏之后，你也可以随着对Python编程的更多了解，随时添加更多功能。
- en: Dictionaries are similar to lists except that they can use any type of value
    for an index, not just integers. The indexes in dictionaries are called keys.
    Multiple assignment is a shortcut to assign multiple variables the values in a
    list.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 字典与列表类似，不同之处在于它们可以使用任何类型的值作为索引，而不仅仅是整数。字典中的索引称为键。多重赋值是一种快捷方式，用于将多个变量赋值为列表中的值。
- en: 'Hangman was fairly advanced compared to the previous games in this book. But
    at this point, you know most of the basic concepts in writing programs: variables,
    loops, functions, and data types such as lists and dictionaries. The later programs
    in this book will still be a challenge to master, but you’ve finished the steepest
    part of the climb!'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中之前的游戏相比，Hangman相当先进。但是在这一点上，你已经掌握了编写程序的大部分基本概念：变量、循环、函数以及列表和字典等数据类型。本书后面的程序仍然会是一个挑战，但你已经完成了最陡峭的部分！
- en: '[Prev: Chapter 8 - Writing the Hangman Code](chapter8.html) | [Next: Chapter
    10 - Tic-Tac-Toe](chapter10.html)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一页：第8章 - 编写Hangman代码](chapter8.html) | [下一页：第10章 - 井字棋](chapter10.html)'

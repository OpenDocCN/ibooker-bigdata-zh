- en: 'Scheduling, Part 2: Scheduling Processes: Algorithms'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调度，第2部分：调度进程：算法
- en: What are some well known scheduling algorithms?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些著名的调度算法是什么？
- en: For all the examples,
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有的例子，
- en: 'Process 1: Runtime 1000ms'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 进程1：运行时间1000毫秒
- en: 'Process 2: Runtime 2000ms'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 进程2：运行时间2000毫秒
- en: 'Process 3: Runtime 3000ms'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 进程3：运行时间3000毫秒
- en: 'Process 4: Runtime 4000ms'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 进程4：运行时间4000毫秒
- en: 'Process 5: Runtime 5000ms'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 进程5：运行时间5000毫秒
- en: Shortest Job First (SJF)
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最短作业优先（SJF）
- en: '![](../Images/aacd324af23dbabdf0c8511652cfadb2.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aacd324af23dbabdf0c8511652cfadb2.jpg)'
- en: 'P1 Arrival: 0ms'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P1到达：0毫秒
- en: 'P2 Arrival: 0ms'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P2到达：0毫秒
- en: 'P3 Arrival: 0ms'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P3到达：0毫秒
- en: 'P4 Arrival: 0ms'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P4到达：0毫秒
- en: 'P5 Arrival: 0ms'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P5到达：0毫秒
- en: The processes all arrive at the start and the scheduler schedules the job with
    the shortest total CPU time. The glaring problem is that this scheduler needs
    to know how long this program will run over time before it ran the program.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所有进程在开始时到达，调度程序安排具有最短总CPU时间的作业。明显的问题是，这个调度程序需要在运行程序之前知道这个程序将在未来的时间内运行多长时间。
- en: 'Technical Note: A realistic SJF implementation would not use the total execution
    time of the process but the burst time (the total CPU time including future computational
    execution before the process will no longer be ready to run). The expected burst
    time can be estimated by using an exponentially decaying weighted rolling average
    based on the previous burst time but for this exposition we will simplify this
    discussion to use the total running time of the process as a proxy for the burst
    time.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 技术说明：实际的SJF实现不会使用进程的总执行时间，而是使用突发时间（包括进程不再准备运行之前的未来计算执行的总CPU时间）。可以通过使用基于先前突发时间的指数衰减加权滚动平均值来估计预期的突发时间，但是为了简化讨论，我们将在这里使用进程的总运行时间作为突发时间的代理。
- en: '**Advantages**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**优点**'
- en: Shorter jobs tend to get run first
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较短的作业往往会先运行
- en: '**Disadvantages**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺点**'
- en: Needs algorithm to be omniscient
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要算法是全知的
- en: Preemptive Shortest Job First (PSJF)
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抢占式最短作业优先（PSJF）
- en: Preemptive shortest job first is like shortest job first but if a new job comes
    in with a shorter runtime than the remaining runtime of the process, run that.
    (If it is equal like our example our algorithm can choose). The scheduler uses
    the total runtime of the process, if you want the shortest *remaining* time left,
    that is a variant of PSJF called Shortest Remaining Time First.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 抢占式最短作业优先类似于最短作业优先，但如果新作业的运行时间比进程的剩余运行时间短，则运行该作业。（如果像我们的例子一样相等，我们的算法可以选择）。调度程序使用进程的总运行时间，如果要使用最短*剩余*时间，那就是PSJF的一个变体，称为最短剩余时间优先。
- en: '![](../Images/a939273ec986aaa3938cdbe2867a08e2.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a939273ec986aaa3938cdbe2867a08e2.jpg)'
- en: P2 at 0ms
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P2在0毫秒
- en: P1 at 1000ms
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P1在1000毫秒
- en: P5 at 3000ms
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P5在3000毫秒
- en: P4 at 4000ms
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P4在4000毫秒
- en: P3 at 5000ms
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P3在5000毫秒
- en: Here's what our algorithm does. It runs P2 because it is the only thing to run.
    Then P1 comes in at 1000ms, P2 runs for 2000ms, so our scheduler preemptively
    stops P2, and let's P1 run all the way through (this is completely up to the algorithm
    because the times are equal). Then, P5 Comes in -- since there are no processes
    running, the scheduler will run process 5\. P4 comes in, and since the runtimes
    are equal P5, the scheduler stops P5 and runs P4\. Finally P3 comes in, preempts
    P4, and runs to completion. Then P4 runs, then P5 runs.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的算法是这样的。它运行P2，因为它是唯一要运行的东西。然后P1在1000毫秒时进来，P2运行了2000毫秒，所以我们的调度程序会抢占性地停止P2，并让P1一直运行（这完全取决于算法，因为时间相等）。然后，P5进来了--因为没有进程在运行，调度程序将运行进程5。P4进来了，因为运行时间相等于P5，调度程序停止P5并运行P4。最后P3进来，抢占P4，并运行到完成。然后P4运行，然后P5运行。
- en: '**Advantages**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**优点**'
- en: Ensures shorter jobs get run first
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保较短的作业先运行
- en: '**Disadvantages**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺点**'
- en: Need to know the runtime again
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要再次知道运行时间
- en: '**Note:** This algorithm compares the total runtime *not* the remaining runtime
    for historical reasons. If you want to take the remaining time into account you
    will use Preemptive Shortest Remaining Time First (PSRTF).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**出于历史原因，该算法比较总运行时间*而不是*剩余运行时间。如果要考虑剩余时间，将使用抢占式最短剩余时间优先（PSRTF）。'
- en: First Come First Served (FCFS)
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先来先服务（FCFS）
- en: '![](../Images/3332236e74b2fb5bdc6e33bec4ce909e.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3332236e74b2fb5bdc6e33bec4ce909e.jpg)'
- en: P2 at 0ms
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P2在0毫秒
- en: P1 at 1000ms
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P1在1000毫秒
- en: P5 at 3000ms
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P5在3000毫秒
- en: P4 at 4000ms
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P4在4000毫秒
- en: P3 at 5000ms
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P3在5000毫秒
- en: 'Processes are scheduled in the order of arrival. One advantage of FCFS is that
    scheduling algorithm is simple: the ready queue is a just a FIFO (first in first
    out) queue. FCFS suffers from the Convoy effect.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 进程按到达顺序进行调度。FCFS的一个优点是调度算法很简单：就绪队列只是一个FIFO（先进先出）队列。FCFS遭受护航效应的影响。
- en: Here P2 Arrives, then P1 arrives, then P5, then P4, then P3\. You can see the
    convoy effect for P5.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这里P2到达，然后是P1到达，然后是P5，然后是P4，然后是P3。您可以看到P5的护航效应。
- en: '**Advantages**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**优点**'
- en: Simple implementation
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单实现
- en: '**Disadvantages**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺点**'
- en: Long running processes could block all other processes
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长时间运行的进程可能会阻塞所有其他进程
- en: Round Robin (RR)
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轮转法（RR）
- en: Processes are scheduled in order of their arrival in the ready queue. However
    after a small time step a running process will be forcibly removed from the running
    state and placed back on the ready queue. This ensures that a long-running process
    can not starve all other processes from running. The maximum amount of time that
    a process can execute before being returned to the ready queue is called the time
    quanta. In the limit of large time quanta (where the time quanta is longer than
    the running time of all processes) round robin will be equivalent to FCFS.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 进程按照它们在就绪队列中的到达顺序进行调度。但是在一个小的时间步长之后，正在运行的进程将被强制从运行状态中移除，并放回就绪队列。这确保了长时间运行的进程不能使所有其他进程无法运行。进程在返回就绪队列之前可以执行的最长时间称为时间量子。在时间量子较大的极限情况下（时间量子长于所有进程的运行时间），轮转法将等效于FCFS。
- en: '![](../Images/332fa7df9feb67953e1554176b74fd84.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/332fa7df9feb67953e1554176b74fd84.jpg)'
- en: 'P1 Arrival: 0ms'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P1到达：0毫秒
- en: 'P2 Arrival: 0ms'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P2到达：0毫秒
- en: 'P3 Arrival: 0ms'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P3到达：0毫秒
- en: 'P4 Arrival: 0ms'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P4到达：0毫秒
- en: 'P5 Arrival: 0ms'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P5到达：0毫秒
- en: Quantum = 1000ms
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 量子=1000毫秒
- en: Here all processes arrive at the same time. P1 is run for 1 quantum and is finished.
    P2 for one quantum; then, it is stopped for P3\. After all other processes run
    for a quantum we cycle back to P2 until all the processes are finished.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，所有进程同时到达。P1运行1个量子，然后完成。P2运行一个量子；然后，它被停止给P3。在所有其他进程运行一个量子后，我们循环回到P2，直到所有进程都完成。
- en: '**Advantages**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**优点**'
- en: Ensures some notion of fairness
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保公平的概念
- en: '**Disadvantages**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺点**'
- en: Large number of processes = Lots of switching
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大量进程=大量切换
- en: Priority
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优先级
- en: Processes are scheduled in the order of priority value. For example, a navigation
    process might be more important to execute than a logging process.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 进程按优先级值的顺序进行调度。例如，导航进程可能比日志记录进程更重要执行。

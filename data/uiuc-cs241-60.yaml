- en: 'Networking, Part 6: Creating a UDP server'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络，第6部分：创建UDP服务器
- en: How do I create a UDP server?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何创建UDP服务器？
- en: There are a variety of function calls available to send UDP sockets. We will
    use the newer getaddrinfo to help set up a socket structure.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种可用的函数调用来发送UDP套接字。我们将使用较新的getaddrinfo来帮助设置套接字结构。
- en: Remember that UDP is a simple packet-based ('data-gram') protocol ; there is
    no connection to set up between the two hosts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，UDP是一个简单的基于数据包的协议；两个主机之间没有建立连接。
- en: First, initialize the hints addrinfo struct to request an IPv6, passive datagram
    socket.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，初始化hints addrinfo结构以请求一个IPv6，被动数据报套接字。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, use getaddrinfo to specify the port number (we don't need to specify a
    host as we are creating a server socket, not sending a packet to a remote host).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用getaddrinfo来指定端口号（我们不需要指定主机，因为我们正在创建一个服务器套接字，而不是向远程主机发送数据包）。
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The port number is <1024, so the program will need `root` privileges. We could
    have also specified a service name instead of a numeric port value.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 端口号是<1024，所以程序将需要`root`权限。我们也可以指定一个服务名称，而不是一个数字端口值。
- en: So far the calls have been similar to a TCP server. For a stream-based service
    we would call `listen` and accept. For our UDP-serve we can just start waiting
    for the arrival of a packet on the socket-
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，调用与TCP服务器类似。对于基于流的服务，我们将调用`listen`和`accept`。对于我们的UDP服务器，我们可以开始等待套接字上数据包的到达。
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The addr struct will hold sender (source) information about the arriving packet.
    Note the `sockaddr_storage` type is a sufficiently large enough to hold all possible
    types of socket addresses (e.g. IPv4, IPv6 and other socket types).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: addr结构将保存有关到达数据包的发送者（源）信息。请注意，`sockaddr_storage`类型足够大，可以容纳所有可能类型的套接字地址（例如IPv4、IPv6和其他套接字类型）。
- en: Full Code
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完整代码
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'

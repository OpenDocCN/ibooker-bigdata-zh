- en: 20 USING SOUNDS AND IMAGES
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 20使用声音和图像
- en: 原文：[https://inventwithpython.com/invent4thed/chapter20.html](https://inventwithpython.com/invent4thed/chapter20.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://inventwithpython.com/invent4thed/chapter20.html](https://inventwithpython.com/invent4thed/chapter20.html)
- en: '[Prev: Chapter 19 - Collision Detection](chapter19.html) | [Next: Chapter 21
    - A Dodger Game with Sounds and Images](chapter21.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一章：第19章-碰撞检测](chapter19.html) | [下一章：第21章-带声音和图像的躲避者游戏](chapter21.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
- en: In [Chapters 18](#calibre_link-96) and [19](#calibre_link-97), you learned how
    to make GUI programs that have graphics and can accept input from the keyboard
    and mouse. You also learned how to draw different shapes. In this chapter, you’ll
    learn how to add sounds, music, and images to your games.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第18章](#calibre_link-96)和[第19章](#calibre_link-97)中，您学习了如何制作具有图形并可以接受键盘和鼠标输入的GUI程序。您还学会了如何绘制不同的形状。在本章中，您将学习如何向游戏中添加声音、音乐和图像。
- en: '**TOPICS COVERED IN THIS CHAPTER**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**本章涵盖的主题**'
- en: • Sound and image files
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: • 声音和图像文件
- en: • Drawing and rescaling sprites
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: • 绘制和调整精灵的大小
- en: • Adding music and sounds
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: • 添加音乐和声音
- en: • Toggling sound on and off
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • 切换声音开关
- en: '**Adding Images with Sprites**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用精灵添加图像**'
- en: A *sprite* is a single two-dimensional image that is used as part of the graphics
    on a screen. [Figure 20-1](#calibre_link-2) shows some example sprites.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*sprite*是屏幕上用作图形的一部分的单个二维图像。[图20-1](#calibre_link-2)显示了一些示例sprite。'
- en: '![image](../Images/609785b328c2e11c59360842d1529fbf.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/609785b328c2e11c59360842d1529fbf.png)'
- en: '*Figure 20-1: Some examples of sprites*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*图20-1：一些精灵的示例*'
- en: The sprite images are drawn on top of a background. You can flip the sprite
    image horizontally so that it is facing the other way. You can also draw the same
    sprite image multiple times on the same window, and you can resize sprites to
    be larger or smaller than the original sprite image. The background image can
    be considered one large sprite, too. [Figure 20-2](#calibre_link-4) shows sprites
    being used together.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 精灵图像绘制在背景上。您可以水平翻转精灵图像，使其面向另一边。您还可以在同一窗口上多次绘制相同的精灵图像，并且可以调整精灵的大小，使其比原始精灵图像大或小。背景图像也可以被视为一个大精灵。[图20-2](#calibre_link-4)显示了精灵一起使用。
- en: '![image](../Images/5d3993642cc22a1a69e8758a7ffb8314.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/5d3993642cc22a1a69e8758a7ffb8314.png)'
- en: '*Figure 20-2: A complete scene, with sprites drawn on top of a background*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*图20-2：一个完整的场景，精灵绘制在背景上* '
- en: The next program will demonstrate how to play sounds and draw sprites using
    `pygame`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个程序将演示如何使用`pygame`播放声音和绘制精灵。
- en: '**Sound and Image Files**'
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**声音和图像文件**'
- en: Sprites are stored in image files on your computer. There are several image
    formats that `pygame` can use. To tell what format an image file uses, look at
    the end of the filename (after the last period). This is called the *file extension*.
    For example, the file *player.png* is in the PNG format. The image formats `pygame`
    supports include BMP, PNG, JPG, and GIF.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 精灵存储在计算机上的图像文件中。`pygame`可以使用几种图像格式。要了解图像文件使用的格式，请查看文件名的末尾（最后一个句点之后）。这称为*文件扩展名*。例如，文件*player.png*是PNG格式。`pygame`支持的图像格式包括BMP、PNG、JPG和GIF。
- en: You can download images from your web browser. On most web browsers, you do
    so by right-clicking the image in the web page and selecting Save from the menu
    that appears. Remember where on the hard drive you saved the image file, because
    you’ll need to copy the downloaded image file into the same folder as your Python
    program’s *.py* file. You can also create your own images with a drawing program
    like Microsoft Paint or Tux Paint.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从网络浏览器下载图像。在大多数网络浏览器上，您可以通过右键单击网页中的图像，然后从出现的菜单中选择“保存”来这样做。记住您保存图像文件的硬盘位置，因为您需要将下载的图像文件复制到与Python程序的*.py*文件相同的文件夹中。您还可以使用诸如Microsoft
    Paint或Tux Paint之类的绘图程序创建自己的图像。
- en: The sound file formats that `pygame` supports are MIDI, WAV, and MP3\. You can
    download sound effects from the internet just as you can image files, but the
    sound files must be in one of these three formats. If your computer has a microphone,
    you can also record sounds and make your own WAV files to use in your games.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`pygame`支持的声音文件格式为MIDI、WAV和MP3。您可以像下载图像文件一样从互联网下载音效文件，但音频文件必须是这三种格式之一。如果您的计算机有麦克风，您还可以录制声音并制作自己的WAV文件以在游戏中使用。'
- en: '**Sample Run of the Sprites and Sounds Program**'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Sprites and Sounds程序的示例运行**'
- en: This chapter’s program is the same as the Collision Detection program from [Chapter
    19](#calibre_link-97). However, in this program we’ll use sprites instead of plain-looking
    squares. We’ll use a sprite of a person to represent the player instead of the
    black box and a sprite of cherries instead of the green food squares. We’ll also
    play background music, and we’ll add a sound effect when the player sprite eats
    one of the cherries.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的程序与[第19章](#calibre_link-97)的碰撞检测程序相同。但是，在本程序中，我们将使用精灵而不是普通的方块。我们将使用一个人的精灵来代表玩家，而不是黑色方块，以及樱桃的精灵，而不是绿色的食物方块。我们还将播放背景音乐，并在玩家精灵吃掉樱桃时添加声音效果。
- en: In this game, the player sprite will eat cherry sprites and, as it eats the
    cherries, it will grow. When you run the program, the game will look like [Figure
    20-3](#calibre_link-135).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个游戏中，玩家精灵将吃掉樱桃精灵，并且在吃掉樱桃时，它会变大。当您运行程序时，游戏将看起来像[图20-3](#calibre_link-135)。
- en: '![image](../Images/17e19477236808121982253a1ffec24c.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/17e19477236808121982253a1ffec24c.png)'
- en: '*Figure 20-3: A screenshot of the Sprites and Sounds game*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*图20-3：Sprites and Sounds游戏的屏幕截图*'
- en: '**Source Code for the Sprites and Sounds Program**'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Sprites and Sounds程序的源代码**'
- en: Start a new file, enter the following code, and then save it as *spritesAndSounds.py*.
    You can download the image and sound files we’ll use in this program from this
    book’s website at *[https://www.nostarch.com/inventwithpython/](https://www.nostarch.com/inventwithpython/)*.
    Place these files in the same folder as the *spritesAndSounds.py* program.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个新文件，输入以下代码，然后将其保存为*spritesAndSounds.py*。你可以从本书的网站*[https://www.nostarch.com/inventwithpython/](https://www.nostarch.com/inventwithpython/)*下载我们在本程序中使用的图像和声音文件。将这些文件放在与*spritesAndSounds.py*程序相同的文件夹中。
- en: '![image](../Images/b4e69b1df0320a5805abf50d4a776e32.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/b4e69b1df0320a5805abf50d4a776e32.png)'
- en: If you get errors after entering this code, compare the code you typed to the
    book’s code with the online diff tool at *[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在输入此代码后出现错误，请使用在线的diff工具比较你输入的代码和书中的代码，网址为*[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*。
- en: '*spritesAnd Sounds.py*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*spritesAnd Sounds.py*'
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Setting Up the Window and the Data Structure**'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**设置窗口和数据结构**'
- en: 'Most of the code in this program is the same as the Collision Detection program
    in [Chapter 19](#calibre_link-97). We’ll focus only on the parts that add sprites
    and sounds. First, on line 12 let’s set the caption of the title bar to a string
    that describes this program:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序中的大部分代码与[第19章](#calibre_link-97)中的碰撞检测程序相同。我们只关注添加精灵和声音的部分。首先，在第12行，让我们将标题栏的标题设置为描述这个程序的字符串：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In order to set the caption, you need to pass the string `'Sprites and Sounds'`
    to the `pygame.display.set_caption()` function.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置标题，你需要将字符串`'Sprites and Sounds'`传递给`pygame.display.set_caption()`函数。
- en: '***Adding a Sprite***'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***添加一个精灵***'
- en: Now that we have the caption set up, we need the actual sprites. We’ll use three
    variables to represent the player, unlike the previous programs that used just
    one.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好标题，我们需要实际的精灵。我们将使用三个变量来表示玩家，而不是之前程序中只使用一个。
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `player` variable on line 18 will store a `Rect` object that keeps track
    of the location and size of the player. The `player` variable doesn’t contain
    the player’s image. At the beginning of the program, the top-left corner of the
    player is located at (300, 100), and the player has an initial height and width
    of 40 pixels.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第18行的`player`变量将存储一个`Rect`对象，用于跟踪玩家的位置和大小。`player`变量不包含玩家的图像。在程序开始时，玩家的左上角位于(300,
    100)，玩家的初始高度和宽度为40像素。
- en: The second variable that represents the player is `playerImage` on line 19\.
    The `pygame.image.load()` function is passed a string of the filename of the image
    to load. The return value is a `Surface` object that has the graphics in the image
    file drawn on its surface. We store this `Surface` object inside `playerImage`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 表示玩家的第二个变量是第19行的`playerImage`。`pygame.image.load()`函数传递了要加载的图像文件的文件名字符串。返回值是一个`Surface`对象，其中包含图像文件中的图形。我们将这个`Surface`对象存储在`playerImage`中。
- en: '***Changing the Size of a Sprite***'
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***改变精灵的大小***'
- en: On line 20, we’ll use a new function in the `pygame.transform` module. The `pygame.transform.scale()`
    function can shrink or enlarge a sprite. The first argument is a `Surface` object
    with the image drawn on it. The second argument is a tuple for the new width and
    height of the image in the first argument. The `scale()` function returns a `Surface`
    object with the image drawn at a new size. In this chapter’s program, we’ll make
    the player sprite stretch larger as it eats more cherries. We’ll store the original
    image in the `playerImage` variable but the stretched image in the `playerStretchedImage`
    variable.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在第20行，我们将使用`pygame.transform`模块中的一个新函数。`pygame.transform.scale()`函数可以缩小或放大精灵。第一个参数是一个带有图像的`Surface`对象。第二个参数是一个元组，表示第一个参数中图像的新宽度和高度。`scale()`函数返回一个带有以新尺寸绘制的图像的`Surface`对象。在本章的程序中，当玩家吃更多樱桃时，我们将使玩家精灵拉伸变大。我们将原始图像存储在`playerImage`变量中，而拉伸后的图像存储在`playerStretchedImage`变量中。
- en: On line 21, we call `load()` again to create a `Surface` object with the cherry
    image drawn on it. Be sure you have the *player.png* and *cherry.png* files in
    the same folder as the *spritesAndSounds.py* file; otherwise, `pygame` won’t be
    able to find them and will give an error.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在第21行，我们再次调用`load()`来创建一个带有樱桃图像的`Surface`对象。确保*player.png*和*cherry.png*文件与*spritesAndSounds.py*文件在同一个文件夹中；否则，`pygame`将无法找到它们并报错。
- en: '**Setting Up the Music and Sounds**'
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**设置音乐和声音**'
- en: Next you need to load the sound files. There are two modules for sound in `pygame`.
    The `pygame.mixer` module can play short sound effects during the game. The `pygame.mixer.music`
    module can play background music.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来需要加载声音文件。`pygame`中有两个用于声音的模块。`pygame.mixer`模块可以在游戏过程中播放短声音效果。`pygame.mixer.music`模块可以播放背景音乐。
- en: '***Adding Sound Files***'
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***添加声音文件***'
- en: Call the `pygame.mixer.Sound()` constructor function to create a `pygame.mixer.Sound`
    object (called a `Sound` object for short). This object has a `play()` method
    that will play the sound effect when called.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`pygame.mixer.Sound()`构造函数来创建一个`pygame.mixer.Sound`对象（简称为`Sound`对象）。这个对象有一个`play()`方法，当调用时会播放声音效果。
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Line 39 calls `pygame.mixer.music.load()` to load the background music, and
    line 40 calls `pygame.mixer.music.play()` to start playing it. The first parameter
    tells `pygame` how many times to play the background music after the first time
    we play it. So passing `5` would cause `pygame` to play the background music six
    times. Here we pass the parameter `-1`, which is a special value that makes the
    background music repeat forever.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第39行调用`pygame.mixer.music.load()`来加载背景音乐，第40行调用`pygame.mixer.music.play()`来开始播放它。第一个参数告诉`pygame`在第一次播放后播放背景音乐的次数。因此，传递`5`会导致`pygame`播放背景音乐六次。在这里，我们传递参数`-1`，这是一个特殊值，使背景音乐永远重复播放。
- en: The second parameter to `play()` is the point in the sound file to start playing.
    Passing `0.0` will play the background music starting from the beginning. Passing
    `2.5` would start the background music 2.5 seconds from the beginning.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`play()`的第二个参数是开始播放声音文件的时间点。传递`0.0`将从开头播放背景音乐。传递`2.5`将从开头开始播放背景音乐2.5秒。'
- en: Finally, the `musicPlaying` variable has a Boolean value that tells the program
    whether it should play the background music and sound effects or not. It’s nice
    to give the player the option to run the program without the sound playing.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`musicPlaying`变量具有一个布尔值，告诉程序是否应该播放背景音乐和声音效果。给玩家选择在没有声音的情况下运行程序是很好的。
- en: '***Toggling the Sound On and Off***'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 切换声音的开关
- en: 'The M key will turn the background music on or off. If `musicPlaying` is set
    to `True`, then the background music is currently playing, and we should stop
    it by calling `pygame.mixer.music.stop()`. If `musicPlaying` is set to `False`,
    then the background music isn’t currently playing, and we should start it by calling
    `play()`. Lines 79 to 84 use `if` statements to do this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 按M键可以打开或关闭背景音乐。如果`musicPlaying`设置为`True`，则当前正在播放背景音乐，我们应该通过调用`pygame.mixer.music.stop()`来停止它。如果`musicPlaying`设置为`False`，则当前没有播放背景音乐，我们应该通过调用`play()`来开始播放。第79到84行使用`if`语句来实现这一点：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Whether the music is playing or not, we want to toggle the value in `musicPlaying`.
    *Toggling* a Boolean value means to set a value to the opposite of its current
    value. The line `musicPlaying = not musicPlaying` sets the variable to `False`
    if it is currently `True` or sets it to `True` if it is currently `False`. Think
    of toggling as what happens when you flip a light switch on or off: toggling the
    light switch sets it to the opposite setting.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 无论音乐是否正在播放，我们都希望切换`musicPlaying`中的值。*切换*布尔值意味着将值设置为其当前值的相反值。`musicPlaying =
    not musicPlaying`这一行将变量设置为`False`，如果它当前为`True`，或者如果它当前为`False`，则将其设置为`True`。想象一下切换就像你打开或关闭灯开关时发生的事情：切换灯开关会将其设置为相反的设置。
- en: '**Drawing the Player on the Window**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在窗口上绘制玩家
- en: 'Remember that the value stored in `playerStretchedImage` is a `Surface` object.
    Line 110 draws the sprite of the player onto the window’s `Surface` object (which
    is stored in `windowSurface`) using `blit()`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，存储在`playerStretchedImage`中的值是一个`Surface`对象。第110行使用`blit()`将玩家的精灵绘制到窗口的`Surface`对象上（存储在`windowSurface`中）：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The second parameter to the `blit()` method is a `Rect` object that specifies
    where on the `Surface` object the sprite should be drawn. The program uses the
    `Rect` object stored in `player`, which keeps track of the player’s position in
    the window.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`blit()`方法的第二个参数是一个`Rect`对象，指定在`Surface`对象上绘制精灵的位置。程序使用存储在`player`中的`Rect`对象，它跟踪玩家在窗口中的位置。'
- en: '**Checking for Collisions**'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查碰撞
- en: 'This code is similar to the code in the previous programs, but there are a
    couple of new lines:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码与以前的程序中的代码类似，但有几行新代码：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When the player sprite eats one of the cherries, its size increases by two pixels
    in height and width. On line 116, a new `Rect` object that is two pixels larger
    than the old `Rect` object will be assigned as the new value of `player`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家精灵吃掉樱桃之一时，其大小增加两个像素的高度和宽度。在第116行，一个比旧的`Rect`对象大两个像素的新`Rect`对象将被分配为`player`的新值。
- en: While the `Rect` object represents the position and size of the player, the
    image of the player is stored in a `playerStretchedImage` as a `Surface` object.
    On line 117, the program creates a new stretched image by calling `scale()`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`Rect`对象表示玩家的位置和大小，但玩家的图像存储在`playerStretchedImage`中，作为`Surface`对象。在第117行，程序通过调用`scale()`创建一个新的拉伸图像。
- en: Stretching an image often distorts it a little. If you keep restretching an
    already stretched image, the distortions add up quickly. But by stretching the
    original image to a new size each time—by passing `playerImage`, not `playerStretchedImage`,
    as the first argument for `scale()`—you distort the image only once.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 拉伸图像通常会使图像略微失真。如果你不断地重新拉伸已经拉伸过的图像，失真会迅速累积。但通过每次将原始图像拉伸到新的尺寸——通过传递`playerImage`，而不是`playerStretchedImage`，作为`scale()`的第一个参数——你只会使图像失真一次。
- en: Finally, line 119 calls the `play()` method on the `Sound` object stored in
    the `pickUpSound` variable. But it does this only if `musicPlaying` is set to
    `True` (which means that the sound is turned on).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第119行调用存储在`pickUpSound`变量中的`Sound`对象上的`play()`方法。但只有当`musicPlaying`设置为`True`时才会这样做（这意味着声音已打开）。
- en: '**Drawing the Cherries on the Window**'
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在窗口上绘制樱桃
- en: 'In the previous programs, you called the `pygame.draw.rect()` function to draw
    a green square for each `Rect` object stored in the `foods` list. In this program,
    however, you want to draw the cherry sprites instead. Call the `blit()` method
    and pass the `Surface` object stored in `foodImage`, which has the cherries image
    drawn on it:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的程序中，你调用`pygame.draw.rect()`函数为`foods`列表中存储的每个`Rect`对象绘制一个绿色的正方形。然而，在这个程序中，你想要绘制樱桃精灵。调用`blit()`方法并传递存储在`foodImage`中的`Surface`对象，上面绘制了樱桃图像：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `food` variable, which contains each of the `Rect` objects in `foods` on
    each iteration through the `for` loop, tells the `blit()` method where to draw
    the `foodImage`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`food`变量包含`foods`中的每个`Rect`对象，在每次`for`循环中告诉`blit()`方法在哪里绘制`foodImage`。'
- en: '**Summary**'
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: You’ve added images and sound to your game. The images, called sprites, look
    much better than the simple drawn shapes used in the previous programs. Sprites
    can be scaled (that is, stretched) to a larger or smaller size, so we can display
    sprites at any size we want. The game presented in this chapter also has a background
    and plays sound effects.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经为你的游戏添加了图像和声音。这些称为精灵的图像看起来比以前的程序中使用的简单绘制的形状要好得多。精灵可以被缩放（即拉伸）到更大或更小的尺寸，因此我们可以以任何我们想要的尺寸显示精灵。本章介绍的游戏还有一个背景并播放声音效果。
- en: Now that we know how to create a window, display sprites, draw primitives, collect
    keyboard and mouse input, play sounds, and implement collision detection, we’re
    ready to create a graphical game in `pygame`. [Chapter 21](#calibre_link-99) brings
    all of these elements together for our most advanced game yet.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何创建窗口，显示精灵，绘制基本图形，收集键盘和鼠标输入，播放声音，并实现碰撞检测，我们准备在`pygame`中创建一个图形游戏。[第21章](#calibre_link-99)将所有这些元素结合起来，打造我们迄今为止最先进的游戏。
- en: '[Prev: Chapter 19 - Collision Detection](chapter19.html) | [Next: Chapter 21
    - A Dodger Game with Sounds and Images](chapter21.html)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一章：第19章 - 碰撞检测](chapter19.html) | [下一章：第21章 - 带声音和图像的躲避游戏](chapter21.html)'

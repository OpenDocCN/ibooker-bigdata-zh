- en: 12 THE CARTESIAN COORDINATE SYSTEM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12 笛卡尔坐标系
- en: 原文：[https://inventwithpython.com/invent4thed/chapter12.html](https://inventwithpython.com/invent4thed/chapter12.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://inventwithpython.com/invent4thed/chapter12.html](https://inventwithpython.com/invent4thed/chapter12.html)
- en: '[Prev: Chapter 11 - The Bagels Deduction Game](chapter11.html) | [Next: Chapter
    13 - Sonar Treasure Hunt](chapter13.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
- en: This chapter goes over some simple mathematical concepts you will use in the
    rest of this book. In two-dimensional (2D) games, the graphics on the screen can
    move left or right and up or down. These games need a way to translate a place
    on the screen into integers the program can deal with.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了您将在本书的其余部分中使用的一些简单数学概念。在二维（2D）游戏中，屏幕上的图形可以向左、向右、向上或向下移动。这些游戏需要一种将屏幕上的位置转换为程序可以处理的整数的方法。
- en: This is where the *Cartesian coordinate system* comes in. *Coordinates* are
    numbers that represent a specific point on the screen. These numbers can be stored
    as integers in your program’s variables.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-2：相同的棋盘，但行和列都有数字坐标*'
- en: '**TOPICS COVERED IN THIS CHAPTER**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题
- en: • Cartesian coordinate systems
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一章：第11章 - 贝果推理游戏](chapter11.html) | [下一章：第13章 - 声纳寻宝](chapter13.html)'
- en: • The x-axis and y-axis
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将棋盘视为笛卡尔坐标系。通过使用行标签和列标签，您可以给出一个坐标，该坐标仅适用于棋盘上的一个空间。如果您在数学课上学过笛卡尔坐标系，您可能知道数字用于行和列。使用数字坐标的棋盘将看起来像[图12-2](#calibre_link-802)。
- en: • Negative numbers
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，要使黑色骑士移动到白色骑士的位置，黑色骑士必须向上移动两个空间并向右移动四个空间。但是，您不需要查看棋盘来弄清楚这一点。如果您知道白色骑士位于（5,6），黑色骑士位于（1,4），您可以使用减法来弄清楚这一信息。
- en: • Pixels
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: • 像素
- en: • The commutative property of addition
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • 加法的交换律
- en: • Absolute values and the `abs()` function
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: • x轴和y轴
- en: '**Grids and Cartesian Coordinates**'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这就是*笛卡尔坐标系*的用武之地。*坐标*是表示屏幕上特定点的数字。这些数字可以存储为程序变量中的整数。
- en: A common way to refer to specific places on a chessboard is by marking each
    row and column with letters and numbers. [Figure 12-1](#calibre_link-801) shows
    a chessboard that has each row and column marked.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 引用国际象棋棋盘上特定位置的常见方法是用字母和数字标记每一行和列。[图12-1](#calibre_link-801)显示了一个每一行和列都有标记的国际象棋棋盘。
- en: '![image](../Images/3fed45c859bf8741205981c9888e80f0.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/3fed45c859bf8741205981c9888e80f0.png)'
- en: '*Figure 12-1: A sample chessboard with a black knight at (a, 4) and a white
    knight at (e, 6)*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-1：一个带有黑色骑士（a，4）和白色骑士（e，6）的样本棋盘*'
- en: A coordinate for a space on the chessboard is a combination of a row and a column.
    In chess, the knight piece looks like a horse head. The white knight in [Figure
    12-1](#calibre_link-801) is located at the point (e, 6) since it is in column
    e and row 6, and the black knight is located at point (a, 4) because it is in
    column a and row 4.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: • 笛卡尔坐标系
- en: You can think of a chessboard as a Cartesian coordinate system. By using a row
    label and column label, you can give a coordinate that is for one—and only one—space
    on the board. If you’ve learned about Cartesian coordinate systems in math class,
    you may know that numbers are used for both the rows and columns. A chessboard
    using numerical coordinates would look like [Figure 12-2](#calibre_link-802).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 棋盘上空间的坐标是行和列的组合。在国际象棋中，骑士棋子看起来像马头。[图12-1](#calibre_link-801)中的白色骑士位于点（e，6），因为它在列e和行6，黑色骑士位于点（a，4），因为它在列a和行4。
- en: The numbers going left and right along the columns are part of the *x-axis*.
    The numbers going up and down along the rows are part of the *y-axis*. Coordinates
    are always described with the x-coordinate first, followed by the y-coordinate.
    In [Figure 12-2](#calibre_link-802), the x-coordinate for the white knight is
    5 and the y-coordinate is 6, so the white knight is located at the coordinates
    (5, 6) and not (6, 5). Similarly, the black knight is located at the coordinate
    (1, 4), not (4, 1), since the black knight’s x-coordinate is 1 and its y-coordinate
    is 4.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 沿列向左和向右的数字是*x轴*的一部分。沿行向上和向下的数字是*y轴*的一部分。坐标始终以x坐标优先，然后是y坐标。在[图12-2](#calibre_link-802)中，白色骑士的x坐标为5，y坐标为6，因此白色骑士位于坐标（5,6），而不是（6,5）。同样，黑色骑士位于坐标（1,4），而不是（4,1），因为黑色骑士的x坐标为1，y坐标为4。
- en: '![image](../Images/59a3113e024d954b93b2a6528da5639a.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: • 负数
- en: '*Figure 12-2: The same chessboard but with numeric coordinates for both rows
    and columns*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: • 绝对值和`abs()`函数
- en: Notice that for the black knight to move to the white knight’s position, the
    black knight must move two spaces up and four spaces to the right. But you don’t
    need to look at the board to figure this out. If you know the white knight is
    located at (5, 6) and the black knight is located at (1, 4), you can use subtraction
    to figure out this information.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从白色骑士的x坐标中减去黑色骑士的x坐标：5-1=4。黑色骑士必须沿x轴移动四个空间。现在从白色骑士的y坐标中减去黑色骑士的y坐标：6-4=2。黑色骑士必须沿y轴移动两个空间。
- en: 'Subtract the black knight’s x-coordinate from the white knight’s x-coordinate:
    5 – 1 = 4\. The black knight has to move along the x-axis by four spaces. Now
    subtract the black knight’s y-coordinate from the white knight’s y-coordinate:
    6 – 4 = 2\. The black knight has to move along the y-axis by two spaces.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**网格和笛卡尔坐标**'
- en: By doing some math with the coordinate numbers, you can figure out the distances
    between two coordinates.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对坐标数字进行一些数学运算，您可以计算出两个坐标之间的距离。
- en: '**Negative Numbers**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**负数**'
- en: 'Cartesian coordinates also use *negative numbers*—numbers that are less than
    zero. A minus sign in front of a number shows it is negative: –1 is less than
    0\. And –2 is less than –1\. But 0 itself isn’t positive or negative. In [Figure
    12-3](#calibre_link-803), you can see the positive numbers increasing to the right
    and the negative numbers decreasing to the left on a number line.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 笛卡尔坐标系也使用*负数*——小于零的数。数前的减号表示它是负数：-1小于0。-2小于-1。但0本身既不是正数也不是负数。在[图12-3](#calibre_link-803)中，你可以看到数轴上正数向右增加，负数向左减少。
- en: '![image](../Images/bbe828de6bdac0ed6f4013036b3ccdd1.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/bbe828de6bdac0ed6f4013036b3ccdd1.png)'
- en: '*Figure 12-3: A number line with positive and negative numbers*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-3：带有正数和负数的数轴*'
- en: The number line is useful to see subtraction and addition. You can think of
    the expression 5 + 3 as the white knight starting at position 5 and moving 3 spaces
    to the right. As you can see in [Figure 12-4](#calibre_link-804), the white knight
    ends up at position 8\. This makes sense, because 5 + 3 is 8.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 数轴对于理解减法和加法很有用。你可以将表达式5+3看作白色骑士从位置5开始向右移动3个空格。正如你在[图12-4](#calibre_link-804)中所看到的，白色骑士最终停在位置8。这是有道理的，因为5+3等于8。
- en: '![image](../Images/c757103bd6c8695ba7d0d3e74b72ae3e.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/c757103bd6c8695ba7d0d3e74b72ae3e.png)'
- en: '*Figure 12-4: Moving the white knight to the right adds to the coordinate.*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-4：将白色骑士向右移动会增加坐标。*'
- en: You subtract by moving the white knight to the left. So if the expression is
    5 – 6, the white knight starts at position 5 and moves 6 spaces to the left, as
    shown in [Figure 12-5](#calibre_link-805).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过将白色骑士向左移动来进行减法。因此，如果表达式是5-6，白色骑士从位置5开始向左移动6个空格，如[图12-5](#calibre_link-805)所示。
- en: '![image](../Images/22d72764e8f46961352edb4a0b675989.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/22d72764e8f46961352edb4a0b675989.png)'
- en: '*Figure 12-5: Moving the white knight to the left subtracts from the coordinate.*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-5：将白色骑士向左移动会减少坐标。*'
- en: The white knight ends up at position –1\. That means 5 – 6 equals –1.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 白色骑士最终停在位置-1。这意味着5-6等于-1。
- en: If you add or subtract a negative number, the white knight moves in the *opposite*
    direction than it does with positive numbers. If you add a negative number, the
    knight moves to the *left*. If you subtract a negative number, the knight moves
    to the *right*. The expression –1 – (–4) would be equal to 3, as shown in [Figure
    12-6](#calibre_link-806). Notice that –1 – (–4) has the same answer as –1 + 4.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你加或减一个负数，白色骑士的移动方向与正数相反。如果你加一个负数，骑士向左移动。如果你减去一个负数，骑士向右移动。表达式-1-（-4）将等于3，如[图12-6](#calibre_link-806)所示。注意-1-（-4）的答案与-1+4相同。
- en: '![image](../Images/f764533ede8ac2225a61cb88b6af06f4.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/f764533ede8ac2225a61cb88b6af06f4.png)'
- en: '*Figure 12-6: The knight starts at –6 and moves to the* right *by 4 spaces.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-6：骑士从-6开始向右移动4个空格。*'
- en: You can think of the x-axis as a number line. Add another number line going
    up and down for the y-axis. If you put these two number lines together, you have
    a Cartesian coordinate system like the one in [Figure 12-7](#calibre_link-807).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将x轴看作一个数轴。再加上一个上下移动的y轴。如果将这两个数轴放在一起，就会得到一个像[图12-7](#calibre_link-807)中的笛卡尔坐标系。
- en: Adding a positive number (or subtracting a negative number) would move the knight
    up on the y-axis or to the right on the x-axis, and subtracting a positive number
    (or adding a negative number) would move the knight down on the y-axis or to the
    left on the x-axis.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个正数（或减去一个负数）会使骑士在y轴上向上移动，或者在x轴上向右移动，而减去一个正数（或加上一个负数）会使骑士在y轴上向下移动，或者在x轴上向左移动。
- en: The (0, 0) coordinate at the center is called the *origin*. You may have used
    a coordinate system like this in your math class. As you’re about to see, coordinate
    systems like these have a lot of little tricks you can use to make figuring out
    coordinates easier.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 中心的（0，0）坐标被称为*原点*。你可能在数学课上使用过这样的坐标系。正如你将要看到的，这些坐标系有很多小技巧，可以帮助你更容易地计算坐标。
- en: '![image](../Images/641643c97f678376aa4f6988bb363f2e.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/641643c97f678376aa4f6988bb363f2e.png)'
- en: '*Figure 12-7: Putting two number lines together creates a Cartesian coordinate
    system.*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-7：将两个数轴放在一起可以创建笛卡尔坐标系。*'
- en: '**The Coordinate System of a Computer Screen**'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**计算机屏幕的坐标系**'
- en: Your computer screen is made up of *pixels*, the smallest dot of color a screen
    can show. It’s common for computer screens to use a coordinate system that has
    the origin (0, 0) at the top-left corner and that increases going down and to
    the right. You can see this in [Figure 12-8](#calibre_link-808), which shows a
    laptop with a screen resolution that is 1,920 pixels wide and 1,080 pixels tall.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你的计算机屏幕由*像素*组成，是屏幕可以显示的最小颜色点。计算机屏幕通常使用一个坐标系，原点（0，0）位于左上角，向下和向右增加。你可以在[图12-8](#calibre_link-808)中看到这一点，该图显示了一个分辨率为1920像素宽和1080像素高的笔记本电脑屏幕。
- en: There are no negative coordinates. Most computer graphics use this coordinate
    system for pixels on the screen, and you will use it in this book’s games. For
    programming, it’s important to know how coordinate systems work—both the kind
    used for mathematics and the kind used for computer screens.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 没有负坐标。大多数计算机图形在屏幕上使用这种坐标系，你将在本书的游戏中使用它。对于编程来说，了解坐标系的工作原理很重要，无论是数学使用的还是计算机屏幕使用的。
- en: '![image](../Images/88d3642ddbefb9fa5c3e0aa65d3523ea.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/88d3642ddbefb9fa5c3e0aa65d3523ea.png)'
- en: '*Figure 12-8: The Cartesian coordinate system on a computer screen*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-8：计算机屏幕上的笛卡尔坐标系*'
- en: '**Math Tricks**'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**数学技巧**'
- en: Subtracting and adding negative numbers is easy when you have a number line
    in front of you. It can also be easy without a number line. Here are three tricks
    to help you add and subtract negative numbers by yourself.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当你面前有一个数轴时，加减负数就很容易。即使没有数轴，也可以很容易。以下是三个技巧，可以帮助你自己加减负数。
- en: '***Trick 1: A Minus Eats the Plus Sign on Its Left***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***技巧1：减号吃掉它左边的加号***'
- en: 'When you see a minus sign with a plus sign on the left, you can replace the
    plus sign with a minus sign. Imagine the minus sign “eating” the plus sign to
    its left. The answer is still the same, because adding a negative value is the
    same as subtracting a positive value. So 4 + –2 and 4 – 2 both evaluate to 2,
    as you can see here:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看到一个减号和左边有一个加号时，你可以用减号替换加号。想象减号“吃掉”左边的加号。答案仍然是一样的，因为加上一个负值就等同于减去一个正值。所以4 +
    -2和4 - 2都等于2，如下所示：
- en: '![image](../Images/51db57417058686622e0ddd19c9ece97.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/51db57417058686622e0ddd19c9ece97.png)'
- en: '***Trick 2: Two Minuses Combine into a Plus***'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***技巧2：两个负号合并成一个加号***'
- en: 'When you see the two minus signs next to each other without a number between
    them, they can combine into a plus sign. The answer is still the same, because
    subtracting a negative value is the same as adding a positive value:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看到两个负号相邻而没有数字在它们中间时，它们可以合并成一个加号。答案仍然是一样的，因为减去一个负值就等同于加上一个正值：
- en: '![image](../Images/0aac881e38a77cde1115845c41adf676.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/0aac881e38a77cde1115845c41adf676.png)'
- en: '***Trick 3: Two Numbers Being Added Can Swap Places***'
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***技巧3：两个相加的数字可以交换位置***'
- en: You can always swap the numbers in addition. This is the *commutative property
    of addition*. That means that doing a swap like 6 + 4 to 4 + 6 will not change
    the answer, as you can see when you count the boxes in [Figure 12-9](#calibre_link-809).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你总是可以交换加法中的数字。这就是*加法的交换律*。这意味着像6 + 4到4 + 6的交换不会改变答案，当你数一下[图12-9](#calibre_link-809)中的方块时就会发现。
- en: '![image](../Images/c6de9cd7fc69382483cc611cf60b7df2.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/c6de9cd7fc69382483cc611cf60b7df2.png)'
- en: '*Figure 12-9: The commutative property of addition lets you swap numbers.*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*图12-9：加法的交换律让你可以交换数字。*'
- en: 'Say you are adding a negative number and a positive number, like –6 + 8\. Because
    you are adding numbers, you can swap the order of the numbers without changing
    the answer. This means –6 + 8 is the same as 8 + –6\. Then when you look at 8
    + –6, you see that the minus sign can eat the plus sign to its left, and the problem
    becomes 8 – 6 = 2, as you can see here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在加一个负数和一个正数，比如-6 + 8。因为你在加数字，所以你可以交换数字的顺序而不改变答案。这意味着-6 + 8和8 + -6是一样的。然后当你看8
    + -6时，你会发现减号可以吃掉左边的加号，问题变成了8 - 6 = 2，如下所示：
- en: '![image](../Images/f24b8e38252712b940b43f54027cb405.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/f24b8e38252712b940b43f54027cb405.png)'
- en: You’ve rearranged the problem so that it’s easier to solve without using a calculator
    or computer.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经重新排列了问题，这样就更容易解决，而不需要使用计算器或计算机。
- en: '**Absolute Values and the abs() Function**'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**绝对值和abs()函数**'
- en: A number’s *absolute value* is the number without the minus sign in front of
    it. Therefore, positive numbers do not change, but negative numbers become positive.
    For example, the absolute value of –4 is 4\. The absolute value of –7 is 7\. The
    absolute value of 5 (which is already positive) is just 5.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一个数的*绝对值*是没有负号的数。因此，正数不变，但负数变成正数。例如，-4的绝对值是4。-7的绝对值是7。5的绝对值（已经是正数）就是5。
- en: You can figure out the distance between two objects by subtracting their positions
    and taking the absolute value of the difference. Imagine that the white knight
    is at position 4 and the black knight is at position –2\. The distance would be
    6, since 4 – –2 is 6, and the absolute value of 6 is 6.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过减去它们的位置并取差的绝对值来计算两个对象之间的距离。想象一下，白色骑士在位置4，黑色骑士在位置-2。距离将是6，因为4 - -2是6，6的绝对值是6。
- en: It works no matter what the order of the numbers is. For example, –2 – 4 (that
    is, negative two minus four) is –6, and the absolute value of –6 is also 6.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 无论数字的顺序如何，它都适用。例如，-2 - 4（即负二减四）是-6，-6的绝对值也是6。
- en: 'Python’s `abs()` function returns the absolute value of an integer. Enter the
    following into the interactive shell:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Python的`abs()`函数返回一个整数的绝对值。在交互式shell中输入以下内容：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The absolute value of `-5` is `5`. The absolute value of a positive number is
    just the number, so the absolute value of `42` is `42`. Even numbers with decimals
    have an absolute value, so the absolute value of `-10.5` is `10.5`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: -5的绝对值是5。正数的绝对值就是这个数，所以42的绝对值是42。即使是带小数的偶数也有绝对值，所以-10.5的绝对值是10.5。
- en: '**Summary**'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Most programming doesn’t require understanding a lot of math. Up until this
    chapter, we’ve been getting by with simple addition and multiplication.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数编程不需要理解很多数学。直到这一章，我们一直在使用简单的加法和乘法。
- en: 'Cartesian coordinate systems are needed to describe where a certain position
    is located in a two-dimensional area. Coordinates have two numbers: the x-coordinate
    and the y-coordinate. The x-axis runs left and right, and the y-axis runs up and
    down. On a computer screen, the origin is in the top-left corner and the coordinates
    increase going right and downward.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 笛卡尔坐标系用于描述二维区域中某个位置的位置。坐标有两个数字：x坐标和y坐标。x轴左右运行，y轴上下运行。在计算机屏幕上，原点在左上角，坐标向右和向下增加。
- en: The three math tricks you learned in this chapter make it easy to add positive
    and negative integers. The first trick is that a minus sign will eat the plus
    sign on its left. The second trick is that two minuses next to each other will
    combine into a plus sign. The third trick is that you can swap the position of
    the numbers you are adding.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中学到的三个数学技巧使得加减正负整数变得容易。第一个技巧是减号会吃掉左边的加号。第二个技巧是两个负号相邻会合并成一个加号。第三个技巧是你可以交换要相加的数字的位置。
- en: The rest of the games in this book use these concepts because they have two-dimensional
    areas in them. All graphical games require understanding how Cartesian coordinates
    work.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的其余游戏都使用这些概念，因为它们都有二维区域。所有图形游戏都需要理解笛卡尔坐标是如何工作的。
- en: '[Prev: Chapter 11 - The Bagels Deduction Game](chapter11.html) | [Next: Chapter
    13 - Sonar Treasure Hunt](chapter13.html)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一章：第11章 - 贝果推理游戏](chapter11.html) | [下一章：第13章 - 声纳寻宝游戏](chapter13.html)'

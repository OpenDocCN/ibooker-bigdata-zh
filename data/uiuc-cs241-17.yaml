- en: 'Forking, Part 2: Fork, Exec, Wait'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分叉，第2部分：分叉，执行，等待
- en: The Pattern
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式
- en: What does the following 'exec' example do?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以下的'exec'示例是做什么的？
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There's no error checking in the above code (we assume close,open,chdir etc
    works as expected).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码中没有错误检查（我们假设close、open、chdir等都按预期工作）。
- en: 'open: will use the lowest available file descriptor (i.e. 1) ; so standard
    out now goes to the log file.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: open：将使用最低可用的文件描述符（即1）；因此标准输出现在转到日志文件。
- en: 'chdir : Change the current directory to /usr/include'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: chdir：将当前目录更改为/usr/include
- en: 'execl : Replace the program image with /bin/ls and call its main() method'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: execl：用/bin/ls替换程序图像，并调用它的main()方法
- en: 'perror : We don''t expect to get here - if we did then exec failed.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: perror：我们不希望到达这里 - 如果到达了，那么exec失败了。
- en: Subtle forkbomb bug
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微妙的fork炸弹错误
- en: What's wrong with this code
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码有什么问题
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We misspelled `ehco`, so we can't `exec` it. What does this mean? Instead of
    creating 10 processes we just created 2**10 processes, fork bombing our machine.
    How could we prevent this? Put an exit right after exec so in case exec fails
    we won't end up fork bombing our machine.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拼错了`ehco`，所以我们无法`exec`它。这是什么意思？我们只创建了2**10个进程，而不是10个进程，炸毁了我们的机器。我们如何防止这种情况？在exec后立即放置一个退出，这样如果exec失败，我们就不会炸毁我们的机器。
- en: What does the child inherit from the parent?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子进程从父进程继承了什么？
- en: Open file handles. If the parent later seeks, say, to the back to the beginning
    of the file then this will affect the child too (and vice versa).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开文件句柄。如果父进程稍后寻求，比如，回到文件的开头，那么这也会影响子进程（反之亦然）。
- en: Signal handlers
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号处理程序
- en: Current working directory
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前工作目录
- en: Environment variables
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境变量
- en: See the [fork man page](http://linux.die.net/man/2/fork) for more details.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息，请参阅[fork man page](http://linux.die.net/man/2/fork)。
- en: What is different in the child process than the parent process?
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子进程与父进程有什么不同？
- en: The process id is different. In the child calling `getppid()` (notice the two
    'p's) will give the same result as calling getpid() in the parent. See the fork
    man page for more details.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 进程ID是不同的。在子进程中调用`getppid()`（注意两个'p'）将得到与在父进程中调用getpid()相同的结果。有关更多详细信息，请参阅fork
    man page。
- en: How do I wait for my child to finish?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何等待我的子进程完成？
- en: Use `waitpid` or `wait`. The parent process will pause until `wait` (or `waitpid`)
    returns. Note this explanation glosses over the restarting discussion.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`waitpid`或`wait`。父进程将暂停，直到`wait`（或`waitpid`）返回。请注意，此解释忽略了重新启动的讨论。
- en: What is the fork-exec-wait pattern
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: fork-exec-wait模式是什么
- en: A common programming pattern is to call `fork` followed by `exec` and `wait`.
    The original process calls fork, which creates a child process. The child process
    then uses exec to start execution of a new program. Meanwhile the parent uses
    `wait` (or `waitpid`) to wait for the child process to finish. See below for a
    complete code example.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的编程模式是调用`fork`，然后是`exec`和`wait`。原始进程调用fork，创建一个子进程。然后子进程使用exec来启动一个新程序的执行。与此同时，父进程使用`wait`（或`waitpid`）来等待子进程完成。请参阅下面的完整代码示例。
- en: How do I start a background process that runs as the same time?
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何启动一个同时运行的后台进程？
- en: Don't wait for them! Your parent process can continue to execute code without
    having to wait for the child process. Note in practice background processes can
    also be disconnected from the parent's input and output streams by calling `close`
    on the open file descriptors before calling exec.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不要等待它们！您的父进程可以继续执行代码，而无需等待子进程。请注意，在实践中，通过在调用exec之前关闭打开的文件描述符，后台进程也可以与父进程的输入和输出流断开连接。
- en: However child processes that finish before their parent finishes can become
    zombies. See the zombie page for more information.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在父进程完成之前完成的子进程可能会变成僵尸。有关更多信息，请参阅僵尸页面。
- en: Zombies
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 僵尸
- en: Good parents don't let their children become zombies!
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 好的父母不会让他们的孩子变成僵尸！
- en: When a child finishes (or terminates) it still takes up a slot in the kernel
    process table. Only when the child has been 'waited on' will the slot be available
    again.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个子进程完成（或终止）时，它仍然占据内核进程表中的一个槽。只有在子进程被“等待”后，该槽才会再次可用。
- en: A long running program could create many zombies by continually creating processes
    and never `wait`-ing for them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一个长时间运行的程序可能会通过不断创建进程而永远不等待它们来创建许多僵尸。
- en: What would be effect of too many zombies?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 太多僵尸会有什么影响？
- en: Eventually there would be insufficient space in the kernel process table to
    create a new processes. Thus `fork()` would fail and could make the system difficult
    / impossible to use - for example just logging in requires a new process!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，内核进程表中会没有足够的空间来创建新进程。因此，`fork()`会失败，并且可能使系统难以/无法使用 - 例如，仅登录就需要一个新进程！
- en: What does the system do to help prevent zombies?
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统如何帮助防止僵尸？
- en: Once a process completes, any of its children will be assigned to "init" - the
    first process with pid of 1\. Thus these children would see getppid() return a
    value of 1\. These orphans will eventually finish and for a brief moment become
    a zombie. Fortunately, the init process automatically waits for all of its children,
    thus removing these zombies from the system.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦一个进程完成，它的任何子进程都将被分配给“init” - 具有pid为1的第一个进程。因此，这些子进程将看到getppid()返回值为1。这些孤儿最终会完成，并在短暂的时刻成为僵尸。幸运的是，init进程会自动等待它的所有子进程，从而将这些僵尸从系统中移除。
- en: 'How do I prevent zombies? (Warning: Simplified answer)'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何防止僵尸？（警告：简化的答案）
- en: Wait on your child!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 等待你的孩子！
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note we assume that the only reason to get a SIGCHLD event is that a child has
    finished (this is not quite true - see man page for more details).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们假设获得SIGCHLD事件的唯一原因是子进程已经完成（这并不完全正确 - 有关更多详细信息，请参阅man page）。
- en: A robust implementation would also check for interrupted status and include
    the above in a loop. Read on for a discussion of a more robust implementation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一个健壮的实现还会检查中断状态，并在循环中包含上述内容。继续阅读，了解更健壮的实现的讨论。
- en: How can I asynchronously wait for my child using SIGCHLD? (ADVANCED)
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何使用SIGCHLD异步等待我的子进程？（高级）
- en: 'Warning: This section uses signals which we have not yet fully introduced.
    The parent gets the signal SIGCHLD when a child completes, so the signal handler
    can wait on the process. A slightly simplified version is shown below.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 警告：本节使用了我们尚未完全介绍的信号。当子进程完成时，父进程会收到SIGCHLD信号，因此信号处理程序可以等待该进程。下面显示了一个稍微简化的版本。
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The above example however misses a couple of subtle points:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，上面的例子忽略了一些微妙的地方：
- en: More than one child may have finished but the parent will only get one SIGCHLD
    signal (signals are not queued)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能有多个子进程已经完成，但父进程只会收到一个SIGCHLD信号（信号不会排队）
- en: SIGCHLD signals can be sent for other reasons (e.g. a child process is temporarily
    stopped)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SIGCHLD信号可能是因为其他原因而发送的（例如，子进程暂时停止）
- en: A more robust code to reap zombies is shown below.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示了一个更健壮的代码来清除僵尸进程。
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So what are environment variables?
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么什么是环境变量？
- en: Environment variables are variables that the system keeps for all processes
    to use. Your system has these set up right now! In Bash, you can check some of
    these
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量是系统为所有进程保留的变量。您的系统现在已经设置了这些！在Bash中，您可以检查其中一些
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How would you get these in C/C++? You can use the `getenv` and `setenv` function
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在C/C++中获取这些？您可以使用`getenv`和`setenv`函数
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Right, so how do these environment variables mean anything to parent/child?
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么这些环境变量对父进程/子进程有什么意义呢？
- en: Well each process gets its own dictionary of environment variables that are
    copied over to the child. Meaning, if the parent changes their environment variables
    it won't be transferred to the child and vice versa. This is important in the
    fork-exec-wait trilogy if you want to exec a program with different environment
    variables than your parent (or any other process).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每个进程都有自己的环境变量字典，这些变量会被复制到子进程中。这意味着，如果父进程更改其环境变量，它不会传递给子进程，反之亦然。如果您想要使用不同的环境变量执行程序，这在fork-exec-wait三部曲中很重要。
- en: For example, you can write a C program that loops through all of the time zones
    and executes the `date` command to print out the date and time in all locals.
    Environment variables are used for all sorts of programs so modifying them is
    important.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以编写一个C程序，循环遍历所有时区，并执行`date`命令以打印出所有本地的日期和时间。环境变量用于各种程序，因此修改它们很重要。
- en: '[Back: Forking, Part 1: Introduction](https://github.com/angrave/SystemProgramming/wiki/Forking,-Part-1:-Introduction)
    | [Next: Process Control, Part 1: Wait macros, using signals](https://github.com/angrave/SystemProgramming/wiki/Process-Control%2C-Part-1%3A-Wait-macros%2C-using-signals)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回：分叉，第1部分：介绍](https://github.com/angrave/SystemProgramming/wiki/Forking,-Part-1:-Introduction)
    | [下一步：进程控制，第1部分：等待宏，使用信号](https://github.com/angrave/SystemProgramming/wiki/Process-Control%2C-Part-1%3A-Wait-macros%2C-using-signals)'

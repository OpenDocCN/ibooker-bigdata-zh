- en: 'Networking: Review Questions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络：复习问题
- en: '[Wiki w/Interactive MC Questions](http://angrave.github.io/SystemProgramming/networkingreviewquestions.html)'
  id: totrans-1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[带交互式多选题的维基](http://angrave.github.io/SystemProgramming/networkingreviewquestions.html)'
- en: See [Coding questions](#coding-questions)
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 见[编码问题](#编码问题)
- en: See [Short answer questions](#short-answer-questions)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 见[简答问题](#简答问题)
- en: See [MP Wearables](https://courses.engr.illinois.edu/cs241/mps/mp7/) Food For
    Thought questions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 见[MP可穿戴设备](https://courses.engr.illinois.edu/cs241/mps/mp7/)思考问题
- en: Short answer questions
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简答问题
- en: Q1
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q1
- en: What is a socket?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是套接字？
- en: Q2
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q2
- en: What is special about listening on port 1000 vs port 2000?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 监听端口1000和端口2000有什么特别之处？
- en: Port 2000 is twice as slow as port 1000
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口2000比端口1000慢两倍
- en: Port 2000 is twice as fast as port 1000
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口2000比端口1000快两倍
- en: Port 1000 requires root privileges
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口1000需要root权限
- en: Nothing
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无
- en: Q3
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q3
- en: Describe one significant difference between IPv4 and IPv6
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: IPv4和IPv6之间的一个重要区别是什么？
- en: Q4
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q4
- en: When and why would you use ntohs?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 何时以及为什么会使用ntohs？
- en: Q5
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q5
- en: If a host address is 32 bits which IP scheme am I most likely using? 128 bits?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果主机地址是32位，我最有可能使用哪种IP方案？128位呢？
- en: Q6
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q6
- en: Which common network protocol is packet based and may not successfully deliver
    the data?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 哪种常见的网络协议是基于数据包的，可能无法成功传递数据？
- en: Q7
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q7
- en: Which common protocol is stream-based and will resend data if packets are lost?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 哪种常见的协议是基于流的，如果数据包丢失将重新发送数据？
- en: Q8
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q8
- en: What is the SYN ACK ACK-SYN handshake?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是SYN ACK ACK-SYN握手？
- en: Q9
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q9
- en: Which one of the following is NOT a feature of TCP?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪项不是TCP的特性之一？
- en: Packet re-ordering
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据包重排序
- en: Flow control
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流量控制
- en: Packet re-tranmission
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据包重传
- en: Simple error detection
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的错误检测
- en: Encryption
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密
- en: Q10
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q10
- en: What protocol uses sequence numbers? What is their initial value? And why?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 什么协议使用序列号？它们的初始值是多少？为什么？
- en: Q11
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q11
- en: What are the minimum network calls are required to build a TCP server? What
    is their correct order?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 构建TCP服务器需要的最小网络调用是什么？它们的正确顺序是什么？
- en: Q12
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q12
- en: What are the minimum network calls are required to build a TCP client? What
    is their correct order?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 构建TCP客户端所需的最小网络调用是什么？它们的正确顺序是什么？
- en: Q13
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q13
- en: When would you call bind on a TCP client?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 何时在TCP客户端上调用bind？
- en: Q14
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q14
- en: What is the purpose of socket bind listen accept ?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 套接字绑定监听接受的目的是什么？
- en: Q15
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q15
- en: Which of the above calls can block, waiting for a new client to connect?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上述哪个调用可以阻塞，等待新客户端连接？
- en: Q16
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q16
- en: What is DNS? What does it do for you? Which of the CS241 network calls will
    use it for you?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: DNS是什么？它对你有什么作用？CS241网络调用中的哪些会为你使用它？
- en: Q17
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q17
- en: For getaddrinfo, how do you specify a server socket?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于getaddrinfo，如何指定服务器套接字？
- en: Q18
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q18
- en: Why may getaddrinfo generate network packets?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么getaddrinfo可能会生成网络数据包？
- en: Q19
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q19
- en: Which network call specifies the size of the allowed backlog?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 哪个网络调用指定了允许的积压大小？
- en: Q20
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q20
- en: Which network call returns a new file descriptor?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 哪个网络调用返回一个新的文件描述符？
- en: Q21
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q21
- en: When are passive sockets used?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 何时使用被动套接字？
- en: Q22
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q22
- en: When is epoll a better choice than select? When is select a better choice than
    epoll?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 何时使用epoll比select更好？何时使用select比epoll更好？
- en: Q23
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q23
- en: Will `write(fd, data, 5000)` always send 5000 bytes of data? When can it fail?
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`write(fd, data, 5000)`总是发送5000字节的数据吗？它何时会失败？'
- en: Q24
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q24
- en: How does Network Address Translation (NAT) work?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 网络地址转换（NAT）是如何工作的？
- en: Q25
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q25
- en: '@MCQ Assuming a network has a 20ms Transmit Time between Client and Server,
    how much time would it take to establish a TCP Connection? 20 ms 40 ms 100 ms
    60 ms @ANS 3 Way Handshake @EXP @END'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '@MCQ假设网络客户端和服务器之间的传输时间为20ms，建立TCP连接需要多长时间？20ms 40ms 100ms 60ms @ANS 3次握手 @EXP
    @END'
- en: Q26
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q26
- en: What are some of the differences between HTTP 1.0 and HTTP 1.1? How many ms
    will it take to transmit 3 files from server to client if the network has a 20ms
    transmit time? How does the time taken differ between HTTP 1.0 and HTTP 1.1?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 1.0和HTTP 1.1之间有哪些区别？如果网络传输时间为20ms，从服务器传输3个文件到客户端需要多少毫秒？HTTP 1.0和HTTP 1.1之间的传输时间有何不同？
- en: Coding questions
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码问题
- en: Q 2.1
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q 2.1
- en: Writing to a network socket may not send all of the bytes and may be interrupted
    due to a signal. Check the return value of `write` to implement `write_all` that
    will repeatedly call `write` with any remaining data. If `write` returns -1 then
    immediately return -1 unless the `errno` is `EINTR` - in which case repeat the
    last `write` attempt. You will need to use pointer arithmetic.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 写入网络套接字可能不会发送所有字节，并且可能会因为信号中断。检查`write`的返回值来实现`write_all`，它将重复调用`write`以发送任何剩余的数据。如果`write`返回-1，那么除非`errno`是`EINTR`，否则立即返回-1
    - 在这种情况下重复上次的`write`尝试。您将需要使用指针算术。
- en: '[PRE0]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Q 2.2
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q 2.2
- en: Implement a multithreaded TCP server that listens on port 2000\. Each thread
    should read 128 bytes from the client file descriptor and echo it back to the
    client, before closing the connection and ending the thread.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 实现一个多线程TCP服务器，监听端口2000。每个线程应从客户端文件描述符中读取128字节，并将其回显给客户端，然后关闭连接并结束线程。
- en: Q 2.3
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q 2.3
- en: Implement a UDP server that listens on port 2000\. Reserve a buffer of 200 bytes.
    Listen for an arriving packet. Valid packets are 200 bytes or less and start with
    four bytes 0x65 0x66 0x67 0x68\. Ignore invalid packets. For valid packets add
    the value of the fifth byte as an unsigned value to a running total and print
    the total so far. If the running total is greater than 255 then exit.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 实现一个UDP服务器，监听端口2000。保留一个大小为200字节的缓冲区。监听到一个到达的数据包。有效数据包为200字节或更少，并以四个字节0x65 0x66
    0x67 0x68开头。忽略无效的数据包。对于有效的数据包，将第五个字节的值作为无符号值添加到一个运行总数中，并打印到目前为止的总数。如果运行总数大于255，则退出。

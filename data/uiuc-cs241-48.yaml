- en: 'Pipes, Part 2: Pipe programming secrets'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道，第2部分：管道编程秘密
- en: Pipe Gotchas
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道陷阱
- en: Here's a complete example that doesn't work! The child reads one byte at a time
    from the pipe and prints it out - but we never see the message! Can you see why?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个完整的例子，但不起作用！子进程每次从管道中读取一个字节并打印出来-但我们从未看到消息！你能看出原因吗？
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The parent sends the bytes `H,i,(space),C...!` into the pipe (this may block
    if the pipe is full). The child starts reading the pipe one byte at a time. In
    the above case, the child process will read and print each character. However
    it never leaves the while loop! When there are no characters left to read it simply
    blocks and waits for more.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 父进程将字节`H,i,(空格),C...!`发送到管道中（如果管道已满，可能会阻塞）。子进程开始逐个字节读取管道。在上面的情况下，子进程将读取并打印每个字符。但它永远不会离开while循环！当没有字符可读时，它会简单地阻塞并等待更多。
- en: The call `putchar` writes the characters out but we never flush the `stdout`
    buffer. i.e. We have transferred the message from one process to another but it
    has not yet been printed. To see the message we could flush the buffer e.g. `fflush(stdout)`
    (or `printf("\n")` if the output is going to a terminal). A better solution would
    also exit the loop by checking for an end-of-message marker,
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`putchar`写出字符，但我们从未刷新`stdout`缓冲区。也就是说，我们已经将消息从一个进程传输到另一个进程，但它还没有被打印出来。要查看消息，我们可以刷新缓冲区，例如`fflush(stdout)`（或者如果输出是到终端，则`printf("\n")`）。更好的解决方案还可以通过检查消息结束标记来退出循环，
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And the message will be flushed to the terminal when the child process exits.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当子进程退出时，消息将被刷新到终端。
- en: Want to use pipes with printf and scanf? Use fdopen!
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 想要使用printf和scanf与管道吗？使用fdopen！
- en: 'POSIX file descriptors are simple integers 0,1,2,3... At the C library level,
    C wraps these with a buffer and useful functions like printf and scanf, so we
    that we can easily print or parse integers, strings etc. If you already have a
    file descriptor then you can ''wrap'' it yourself into a FILE pointer using `fdopen`
    :'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX文件描述符是简单的整数0,1,2,3...在C库级别，C用缓冲区和有用的函数如printf和scanf包装这些，所以我们可以轻松地打印或解析整数、字符串等。如果你已经有了一个文件描述符，那么你可以使用`fdopen`将其自己“包装”成一个FILE指针：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For writing to files this is unnecessary - just use `fopen` which does the same
    as `open` and `fdopen` However for pipes, we already have a file descriptor -
    so this is great time to use `fdopen`!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于写入文件来说，这是不必要的-只需使用`fopen`，它与`open`和`fdopen`相同。但是对于管道，我们已经有了一个文件描述符-所以现在是使用`fdopen`的好时机！
- en: 'Here''s a complete example using pipes that almost works! Can you spot the
    error? Hint: The parent never prints anything!'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个使用管道的完整例子，几乎可以工作！你能发现错误吗？提示：父进程从未打印任何内容！
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note the (unnamed) pipe resource will disappear once both the child and parent
    have exited. In the above example the child will send the bytes and the parent
    will receive the bytes from the pipe. However, no end-of-line character is ever
    sent, so `fscanf` will continue to ask for bytes because it is waiting for the
    end of the line i.e. it will wait forever! The fix is to ensure we send a newline
    character, so that `fscanf` will return.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，（未命名的）管道资源将在子进程和父进程都退出后消失。在上面的例子中，子进程将从管道发送字节，父进程将从管道接收字节。然而，从未发送换行符，因此`fscanf`将继续请求字节，因为它正在等待行结束，即它将永远等待！修复方法是确保我们发送一个换行符，这样`fscanf`将返回。
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: So do we need to `fflush` too?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那我们也需要`fflush`吗？
- en: Yes, if you want your bytes to be sent to the pipe immediately! At the beginning
    of this course we assumed that file streams are always *line buffered* i.e. the
    C library will flush its buffer everytime you send a newline character. Actually
    this is only true for terminal streams - for other filestreams the C library attempts
    to improve performance by only flushing when it's internal buffer is full or the
    file is closed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，如果你希望你的字节立即发送到管道中！在本课程开始时，我们假设文件流始终是*行缓冲*，即C库每次发送换行符时都会刷新其缓冲区。实际上，这只对终端流有效-对于其他文件流，C库尝试通过仅在其内部缓冲区满或文件关闭时刷新来提高性能。
- en: When do I need two pipes?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我什么时候需要两个管道？
- en: If you need to send data to and from a child asynchronously, then two pipes
    are required (one for each direction). Otherwise the child would attempt to read
    its own data intended for the parent (and vice versa)!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要异步地向子进程发送和接收数据，那么需要两个管道（每个方向一个）。否则，子进程将尝试读取自己的数据，这些数据是为父进程准备的（反之亦然）！
- en: Closing pipes gotchas
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关闭管道的陷阱
- en: Processes receive the signal SIGPIPE when no process is listening! From the
    pipe(2) man page -
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有进程在监听时，进程会收到信号SIGPIPE！来自pipe(2)手册页-
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Tip: Notice only the writer (not a reader) can use this signal. To inform the
    reader that a writer is closing their end of the pipe, you could write your own
    special byte (e.g. 0xff) or a message ( `"Bye!"`)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：注意只有写入者（不是读取者）可以使用此信号。为了通知读取者写入者正在关闭管道的端口，你可以写入自己的特殊字节（例如0xff）或消息（`"再见！"`）
- en: Here's an example of catching this signal that does not work! Can you see why?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个捕捉这个信号的例子，但不起作用！你能看出原因吗？
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The mistake in above code is that there is still a reader for the pipe! The
    child still has the pipe's first file descriptor open and remember the specification?
    All readers must be closed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 上面代码中的错误是仍然有一个管道的读取者！子进程仍然保持着管道的第一个文件描述符，并记住规范？所有读取者必须关闭。
- en: When forking, *It is common practice* to close the unnecessary (unused) end
    of each pipe in the child and parent process. For example the parent might close
    the reading end and the child might close the writing end (and vice versa if you
    have two pipes)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在分叉时，*关闭子进程和父进程中每个管道的不必要（未使用）端口是常见做法。例如，父进程可能关闭读取端口，子进程可能关闭写入端口（如果有两个管道，则反之亦然）
- en: What is filling up the pipe? What happens when the pipe becomes full?
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 是什么填满了管道？当管道变满时会发生什么？
- en: A pipe gets filled up when the writer writes too much to the pipe without the
    reader reading any of it. When the pipes become full, all writes fail until a
    read occurs. Even then, a write may partial fail if the pipe has a little bit
    of space left but not enough for the entire message.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当写入者向管道写入过多而读者没有读取时，管道会被填满。当管道变满时，所有写入都会失败，直到发生读取。即使在这种情况下，如果管道还有一点空间但不足以容纳整个消息，写入也可能部分失败。
- en: To avoid this, usually two things are done. Either increase the size of the
    pipe. Or more commonly, fix your program design so that the pipe is constantly
    being read from.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，通常有两种方法。要么增加管道的大小。或者更常见的是，修复你的程序设计，使得管道不断被读取。
- en: Are pipes process safe?
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道是否进程安全？
- en: Yes! Pipe write are atomic up to the size of the pipe. Meaning that if two processes
    try to write to the same pipe, the kernel has internal mutexes with the pipe that
    it will lock, do the write, and return. The only gotcha is when the pipe is about
    to become full. If two processes are trying to write and the pipe can only satisfy
    a partial write, that pipe write is not atomic -- be careful about that!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！管道写入是原子的，直到管道的大小。这意味着如果两个进程尝试写入同一个管道，内核会使用管道的内部互斥锁来锁定，进行写入，然后返回。唯一需要注意的是当管道即将变满时。如果两个进程尝试写入，而管道只能满足部分写入，那么该管道写入就不是原子的--要小心！
- en: The lifetime of pipes
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道的生命周期
- en: Unnamed pipes (the kind we've seen up to this point) live in memory (do not
    take up any disk space) and are a simple and efficient form of inter-process communication
    (IPC) that is useful for streaming data and simple messages. Once all processes
    have closed, the pipe resources are freed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 无名管道（到目前为止我们见过的那种）存在于内存中（不占用任何磁盘空间），是一种简单高效的进程间通信（IPC）形式，对于流数据和简单消息非常有用。一旦所有进程关闭，管道资源就会被释放。
- en: An alternative to *unamed* pipes is *named* pipes created using `mkfifo`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`mkfifo`创建*命名*管道是*无名*管道的一种替代方法。
- en: Named Pipes
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名管道
- en: How do I create named pipes?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我如何创建命名管道？
- en: 'From the command line: `mkfifo` From C: `int mkfifo(const char *pathname, mode_t
    mode);`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行：`mkfifo` 从C语言：`int mkfifo(const char *pathname, mode_t mode);`
- en: You give it the path name and the operation mode, it will be ready to go! Named
    pipes take up no space on the disk. What the operating system is essentially telling
    you when you have a named pipe is that it will create an unnamed pipe that refers
    to the named pipe, and that's it! There is no additional magic. This is just for
    programming convenience if processes are started without forking (meaning that
    there would be no way to get the file descriptor to the child process for an unnamed
    pipe)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你给它路径名和操作模式，它就准备好了！命名管道在磁盘上不占用空间。当操作系统告诉你有一个命名管道时，它实际上是在告诉你它会创建一个指向命名管道的无名管道，就是这样！没有额外的魔法。这只是为了编程方便，如果进程在没有分叉的情况下启动（这意味着无法为无名管道的子进程获取文件描述符）。
- en: Why is my pipe hanging?
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么我的管道挂起？
- en: Reads and writes hang on Named Pipes until there is at least one reader and
    one writer, take this
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在命名管道上的读写会一直挂起，直到至少有一个读者和一个写者，记住这一点
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Any `open` is called on a named pipe the kernel blocks until another process
    calls the opposite open. Meaning, echo calls `open(.., O_RDONLY)` but that blocks
    until cat calls `open(.., O_WRONLY)`, then the programs are allowed to continue.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当在命名管道上调用任何`open`时，内核会阻塞，直到另一个进程调用相反的open。也就是说，echo调用`open(.., O_RDONLY)`，但是它会阻塞，直到cat调用`open(..,
    O_WRONLY)`，然后程序才被允许继续。
- en: Race condition with named pipes.
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名管道的竞争条件。
- en: What is wrong with the following program?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序有什么问题？
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This may never print hello because of a race condition. Since you opened the
    pipe in the first process under both permissions, open won't wait for a reader
    because you told the operating system that you are a reader! Sometimes it looks
    like it works because the execution of the code looks something like this.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能永远不会打印hello，因为存在竞争条件。由于你在第一个进程中以两种权限打开了管道，open不会等待读者，因为你告诉操作系统你是读者！有时它看起来像是工作的，因为代码的执行看起来像这样。
- en: '| Process 1 | Process 2 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 进程1 | 进程2 |'
- en: '| --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| open(O_RDWR) & write() |  |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| open(O_RDWR) & write() |  |'
- en: '|  | open(O_RDONLY) & read() |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '|  | open(O_RDONLY) & read() |'
- en: '| close() & exit() |  |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| close() & exit() |  |'
- en: '|  | print() & exit() |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '|  | print() & exit() |'
- en: Sometimes it won't
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候不会
- en: '| Process 1 | Process 2 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 进程1 | 进程2 |'
- en: '| --- | --- |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| open(O_RDWR) & write() |  |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| open(O_RDWR) & write() |  |'
- en: '| close() & exit() | (Named pipe is destroyed) |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| close() & exit() | （命名管道被销毁）'
- en: '| (Blocks indefinitely) | open(O_RDONLY) |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: （无限期阻塞）打开（O_RDONLY）

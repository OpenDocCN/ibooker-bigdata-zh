- en: 2 WRITING PROGRAMS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2 编写程序
- en: 原文：[https://inventwithpython.com/invent4thed/chapter2.html](https://inventwithpython.com/invent4thed/chapter2.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://inventwithpython.com/invent4thed/chapter2.html](https://inventwithpython.com/invent4thed/chapter2.html)
- en: '[Prev: Chapter 1 - The Interactive Shell](chapter1.html) | [Next: Chapter 3
    - Guess the Number](chapter3.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一页：第1章 - 交互式shell](chapter1.html) | [下一页：第3章 - 猜数字游戏](chapter3.html)![image](../Images/6af76fd8abfbd0bb89d63623e52c2692.png)'
- en: Now let’s see what Python can do with text. Almost all programs display text
    to the user, and the user enters text into programs through the keyboard. In this
    chapter, you’ll make your first program, which does both of these things. You’ll
    learn how to store text in variables, combine text, and display text on the screen.
    The program you’ll create displays the greeting `Hello world!` and asks for the
    user’s name.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看Python可以用文本做什么。几乎所有程序都向用户显示文本，并且用户通过键盘向程序输入文本。在本章中，您将制作您的第一个程序，该程序可以做这两件事。您将学习如何将文本存储在变量中，组合文本，并在屏幕上显示文本。您将创建的程序显示问候语`Hello
    world!`并要求用户输入姓名。
- en: '**TOPICS COVERED IN THIS CHAPTER**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**本章涵盖的主题**'
- en: • Strings
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: • 字符串
- en: • String concatenation
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: • 字符串连接
- en: • Data types (such as strings or integers)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: • 数据类型（如字符串或整数）
- en: • Using the file editor to write programs
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用文件编辑器编写程序
- en: • Saving and running programs in IDLE
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: • 在IDLE中保存和运行程序
- en: • Flow of execution
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • 执行流程
- en: • Comments
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: • 注释
- en: • The `print()` function
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: • `print()` 函数
- en: • The `input()` function
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: • `input()` 函数
- en: • Case sensitivity
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: • 大小写敏感
- en: '**String Values**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**字符串值**'
- en: 'In Python, text values are called *strings*. String values can be used just
    like integer or float values. You can store strings in variables. In code, string
    values start and end with a single quote, `''`. Enter this code into the interactive
    shell:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，文本值称为*字符串*。字符串值可以像整数或浮点值一样使用。您可以将字符串存储在变量中。在代码中，字符串值以单引号`'`开始和结束。将此代码输入交互式shell：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The single quotes tell Python where the string begins and ends. They are not
    part of the string value’s text. Now if you enter `spam` into the interactive
    shell, you’ll see the contents of the `spam` variable. Remember, Python evaluates
    variables as the value stored inside the variable. In this case, this is the string
    `'hello'`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 单引号告诉Python字符串从哪里开始和结束。它们不是字符串值文本的一部分。现在，如果您在交互式shell中输入`spam`，您将看到`spam`变量的内容。请记住，Python将变量评估为变量内部存储的值。在这种情况下，这是字符串`'hello'`。
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Strings can have any keyboard character in them and can be as long as you want.
    These are all examples of strings:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串可以包含任何键盘字符，并且可以任意长。以下都是字符串的示例：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**String Concatenation**'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**字符串连接**'
- en: 'You can combine string values with operators to make expressions, just as you
    did with integer and float values. When you combine two strings with the `+` operator,
    it’s called *string concatenation*. Enter `''Hello'' + ''World!''` into the interactive
    shell:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用运算符将字符串值与运算符组合成表达式，就像整数和浮点值一样。当您使用`+`运算符组合两个字符串时，称为*字符串连接*。将`'Hello' +
    'World!'`输入交互式shell：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The expression evaluates to a single string value, `''HelloWorld!''`. There
    is no space between the words because there was no space in either of the two
    concatenated strings, unlike in this example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 该表达式评估为单个字符串值`'HelloWorld!'`。两个连接的字符串中没有空格，因此单词之间也没有空格，与以下示例不同：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `+` operator works differently on string and integer values because they
    are different *data types*. All values have a data type. The data type of the
    value `'Hello'` is a string. The data type of the value `5` is an integer. The
    data type tells Python what operators should do when evaluating expressions. The
    `+` operator concatenates string values, but adds integer and float values.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`+` 运算符在字符串和整数值上的工作方式不同，因为它们是不同的*数据类型*。所有值都有一个数据类型。值`''Hello''`的数据类型是字符串。值`5`的数据类型是整数。数据类型告诉Python在评估表达式时应该做什么。`+`
    运算符连接字符串值，但是添加整数和浮点数值。'
- en: '**Writing Programs in IDLE’s File Editor**'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**在IDLE的文件编辑器中编写程序**'
- en: Until now, you’ve been typing instructions into IDLE’s interactive shell one
    at a time. When you write programs, though, you enter several instructions and
    have them run all at once, and this is what you’ll do next. It’s time to write
    your first program!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您一直在逐个输入IDLE的交互式shell中的指令。但是，当您编写程序时，您会输入多个指令并一次性运行它们，这就是您接下来要做的事情。现在是时候编写您的第一个程序了！
- en: In addition to the interpreter, IDLE has another part called the *file editor*.
    To open it, click the **File** menu at the top of the interactive shell. Then
    select **New File**. A blank window will appear for you to type your program’s
    code into, as shown in [Figure 2-1](#calibre_link-31).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了解释器，IDLE还有另一个部分称为*文件编辑器*。要打开它，请单击交互式shell顶部的**文件**菜单。然后选择**新建文件**。将出现一个空白窗口，供您输入程序代码，如[图2-1](#calibre_link-31)所示。
- en: '![image](../Images/3aee182a34d70eaa816bbed6927e2410.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/3aee182a34d70eaa816bbed6927e2410.png)'
- en: '*Figure 2-1: The file editor (left) and the interactive shell (right)*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图2-1：文件编辑器（左）和交互式shell（右）
- en: 'The two windows look similar, but just remember this: the interactive shell
    will have the `>>>` prompt, while the file editor will not.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个窗口看起来很相似，但请记住：交互式shell将显示`>>>`提示，而文件编辑器不会。
- en: '***Creating the Hello World Program***'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***创建Hello World程序***'
- en: It’s traditional for programmers to make their first program display `Hello
    world!` on the screen. You’ll create your own Hello World program now.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员传统上会让他们的第一个程序在屏幕上显示`Hello world!`。现在您将创建自己的Hello World程序。
- en: '![image](../Images/56d08838dad28358a781e8f269de3c60.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/56d08838dad28358a781e8f269de3c60.png)'
- en: When you enter your program, remember not to enter the numbers at the beginning
    of each code line. They’re there so this book can refer to the code by line number.
    The bottom-right corner of the file editor will tell you where the blinking cursor
    is so you can check which line of code you are on. [Figure 2-2](#calibre_link-32)
    shows that the cursor is on line 1 (going up and down the editor) and column 0
    (going left and right).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当输入程序时，请记住不要输入每行代码开头的数字。它们是为了让本书可以按行号引用代码。文件编辑器的右下角将告诉您光标在哪里，这样您就可以检查自己在哪一行代码上。[图2-2](#calibre_link-32)显示光标在第1行（在编辑器上下移动）和第0列（在左右移动）。
- en: '![image](../Images/3446ece0322cb8e0f8f2c6bc1a13a7e0.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/3446ece0322cb8e0f8f2c6bc1a13a7e0.png)'
- en: '*Figure 2-2: The bottom-right of the file editor tells you what line the cursor
    is on.*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-2：文件编辑器的右下角告诉您光标在哪一行*'
- en: Enter the following text into the new file editor window. This is the program’s
    *source code*. It contains the instructions Python will follow when the program
    is run.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下文本输入到新的文件编辑器窗口中。这是程序的*源代码*。它包含了Python在运行程序时将遵循的指令。
- en: '*hello.py*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*hello.py*'
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: IDLE will write different types of instructions with different colors. After
    you’re done typing the code, the window should look like [Figure 2-3](#calibre_link-33).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: IDLE将使用不同的颜色写入不同类型的指令。在输入代码后，窗口应该看起来像[图2-3](#calibre_link-33)。
- en: '![image](../Images/8ea284083c2d554ec37b658fb4a86e8d.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/8ea284083c2d554ec37b658fb4a86e8d.png)'
- en: '*Figure 2-3: The file editor will look like this after you enter your code.*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-3：输入代码后文件编辑器的样子*'
- en: Check to make sure your IDLE window looks the same.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 检查确保您的IDLE窗口看起来一样。
- en: '***Saving Your Program***'
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***保存您的程序***'
- en: Once you’ve entered your source code, save it by clicking **File** ![image](../Images/6213f577c15feb006bdab7161d1cfc75.png)
    **Save As**. Or press CTRL-S to save with a keyboard shortcut. [Figure 2-4](#calibre_link-34)
    shows the Save As window that will open. Enter *hello.py* in the File name text
    field and then click **Save**.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 输入源代码后，请单击**文件** ![image](../Images/6213f577c15feb006bdab7161d1cfc75.png) **另存为**
    进行保存。或者按下CTRL-S进行快捷键保存。[图2-4](#calibre_link-34)显示将打开的另存为窗口。在文件名文本字段中输入*hello.py*，然后单击**保存**。
- en: '![image](../Images/d524524735620be930ba719f07703aab.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/d524524735620be930ba719f07703aab.png)'
- en: '*Figure 2-4: Saving the program*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-4：保存程序*'
- en: You should save your programs often while you write them. That way, if the computer
    crashes or you accidentally exit from IDLE, you won’t lose much work.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写程序时，应该经常保存程序。这样，如果计算机崩溃或者您意外退出IDLE，您不会丢失太多工作。
- en: To load your previously saved program, click **File** ![image](../Images/6213f577c15feb006bdab7161d1cfc75.png)
    **Open**. Select the *hello.py* file in the window that appears and click the
    **Open** button. Your saved *hello.py* program will open in the file editor.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载之前保存的程序，请单击**文件** ![image](../Images/6213f577c15feb006bdab7161d1cfc75.png)
    **打开**。在出现的窗口中选择*hello.py*文件，然后单击**打开**按钮。您保存的*hello.py*程序将在文件编辑器中打开。
- en: '***Running Your Program***'
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***运行您的程序***'
- en: Now it’s time to run the program. Click **Run** ![image](../Images/6213f577c15feb006bdab7161d1cfc75.png)
    **Run Module**. Or just press F5 from the file editor (FN-5 on OS X). Your program
    will run in the interactive shell.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是运行程序的时候了。单击**运行** ![image](../Images/6213f577c15feb006bdab7161d1cfc75.png)
    **运行模块**。或者从文件编辑器中按下F5（在OS X上是FN-5）。您的程序将在交互式shell中运行。
- en: Enter your name when the program asks for it. This will look like [Figure 2-5](#calibre_link-35).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序要求输入您的名字时，请输入。这将看起来像[图2-5](#calibre_link-35)。
- en: '![image](../Images/6582561007c02b0eab0666a32b2f31f5.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/6582561007c02b0eab0666a32b2f31f5.png)'
- en: '*Figure 2-5: The interactive shell after you run* hello.py'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-5：运行hello.py后的交互式shell*'
- en: When you type your name and press ENTER, the program will greet you by name.
    Congratulations! You have written your first program and are now a computer programmer.
    Press F5 again to run the program a second time and enter another name.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当您输入您的名字并按下回车键时，程序将以您的名字向您问候。恭喜！您已经编写了您的第一个程序，现在是一名计算机程序员。再次按F5运行程序，然后输入另一个名字。
- en: If you got an error, compare your code to this book’s code with the online diff
    tool at *[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*.
    Copy and paste your code from the file editor into the web page and click the
    **Compare** button. This tool will highlight any differences between your code
    and the code in this book, as shown in [Figure 2-6](#calibre_link-36).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现错误，请使用在线diff工具将您的代码与本书的代码进行比较，网址为*[https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)*。从文件编辑器中复制并粘贴您的代码到网页上，然后单击**比较**按钮。该工具将突出显示您的代码与本书中代码之间的任何差异，如[图2-6](#calibre_link-36)所示。
- en: While coding, if you get a `NameError` that looks like the following, that means
    you are using Python 2 instead of Python 3.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在编码过程中，如果出现以下形式的`NameError`，这意味着您正在使用Python 2而不是Python 3。
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To fix the problem, install Python 3.4 and rerun the program. (See “[Downloading
    and Installing Python](#calibre_link-37)” on [page xxv](#calibre_link-38).)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决问题，请安装Python 3.4并重新运行程序。（参见“[下载和安装Python](#calibre_link-37)”[第xxv页](#calibre_link-38)。）
- en: '![image](../Images/e0ce31065dd7e60547a41f025dc19dc6.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/e0ce31065dd7e60547a41f025dc19dc6.png)'
- en: '*Figure 2-6: Using the diff tool at* [https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-6：使用diff工具* [https://www.nostarch.com/inventwithpython#diff](https://www.nostarch.com/inventwithpython#diff)'
- en: '**How the Hello World Program Works**'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Hello World程序的工作原理**'
- en: Each line of code is an instruction interpreted by Python. These instructions
    make up the program. A computer program’s instructions are like the steps in a
    recipe. Python completes each instruction in order, beginning from the top of
    the program and moving downward.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 每行代码都是Python解释的一条指令。这些指令组成了程序。计算机程序的指令就像食谱中的步骤一样。Python按顺序完成程序中的每个指令，从程序的顶部向下移动。
- en: The step where Python is currently working in the program is called the *execution*.
    When the program starts, the execution is at the first instruction. After executing
    the instruction, Python moves down to the next instruction.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Python当前在程序中工作的步骤称为*执行*。程序开始时，执行位于第一条指令处。执行指令后，Python会向下移动到下一条指令。
- en: Let’s look at each line of code to see what it’s doing. We’ll begin with line
    number 1.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码的每一行都在做什么。我们将从第1行开始。
- en: '***Comments for the Programmer***'
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***程序员的注释***'
- en: 'The first line of the Hello World program is a *comment*:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Hello World程序的第一行是*注释*：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Any text following a hash mark (`#`) is a comment. Comments are the programmer’s
    notes about what the code does; they are not written for Python but for you, the
    programmer. Python ignores comments when it runs a program. Programmers usually
    put a comment at the top of their code to give their program a title. The comment
    in the Hello World program tells you that the program says hello and asks for
    your name.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 井号(`#`)后面的任何文本都是注释。注释是程序员关于代码功能的注释；它们不是为Python编写的，而是为你，程序员。Python在运行程序时会忽略注释。程序员通常在代码顶部放置注释，以便为他们的程序命名。Hello
    World程序中的注释告诉你程序会打招呼并询问你的名字。
- en: '***Functions: Mini-Programs Inside Programs***'
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***函数：程序内的迷你程序***'
- en: A *function* is kind of like a mini-program inside your program that contains
    several instructions for Python to execute. The great thing about functions is
    that you only need to know what they do, not how they do it. Python provides some
    built-in functions already. We use `print()` and `input()` in the Hello World
    program.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*函数*有点像程序中的迷你程序，其中包含Python执行的几条指令。函数的好处是你只需要知道它们做什么，而不需要知道它们是如何做的。Python已经提供了一些内置函数。我们在Hello
    World程序中使用了`print()`和`input()`。'
- en: A *function call* is an instruction that tells Python to run the code inside
    a function. For example, your program calls the `print()` function to display
    a string on the screen. The `print()` function takes the string you type between
    the parentheses as input and displays that text on the screen.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*函数调用*是一条指令，告诉Python运行函数内部的代码。例如，你的程序调用`print()`函数在屏幕上显示一个字符串。`print()`函数将你在括号中输入的字符串作为输入，并在屏幕上显示该文本。'
- en: '**The print() Function**'
  id: totrans-76
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**print()函数**'
- en: 'Lines 2 and 3 of the Hello World program are calls to `print()`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Hello World程序的第2行和第3行是对`print()`的调用：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: A value between the parentheses in a function call is an *argument*. The argument
    on line 2’s `print()` function call is `'Hello world!'`, and the argument on line
    3’s `print()` function call is `'What is your name?'`. This is called *passing*
    the argument to the function.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 函数调用括号中的值是*参数*。第2行`print()`函数调用的参数是`'Hello world!'`，第3行`print()`函数调用的参数是`'What
    is your name?'`。这称为*传递*参数给函数。
- en: '**The input() Function**'
  id: totrans-80
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**input()函数**'
- en: 'Line 4 is an assignment statement with a variable, `myName`, and a function
    call, `input()`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 第4行是一个带有变量`myName`和函数调用`input()`的赋值语句：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When `input()` is called, the program waits for the user to enter text. The
    text string that the user enters becomes the value that the function call evaluates
    to. Function calls can be used in expressions anywhere a value can be used.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`input()`时，程序会等待用户输入文本。用户输入的文本字符串将成为函数调用评估的值。函数调用可以在任何可以使用值的表达式中使用。
- en: 'The value that the function call evaluates to is called the *return value*.
    (In fact, “the value a function call returns” means the same thing as “the value
    a function call evaluates to.”) In this case, the return value of the `input()`
    function is the string that the user entered: their name. If the user enters `Albert`,
    the `input()` function call evaluates to the string `''Albert''`. The evaluation
    looks like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 函数调用评估的值称为*返回值*。（实际上，“函数调用返回的值”和“函数调用评估的值”意思相同。）在这种情况下，`input()`函数的返回值是用户输入的字符串：他们的名字。如果用户输入`Albert`，`input()`函数调用将评估为字符串`'Albert'`。评估如下：
- en: '![image](../Images/c79f1e11a79973f4217e2c69f57a450f.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/c79f1e11a79973f4217e2c69f57a450f.png)'
- en: This is how the string value `'Albert'` gets stored in the `myName` variable.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是字符串值`'Albert'`存储在`myName`变量中的方式。
- en: '**Expressions in Function Calls**'
  id: totrans-87
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 函数调用中的表达式
- en: 'The last line in the Hello World program is another `print()` function call:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Hello World程序的最后一行是另一个`print()`函数调用：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The expression `''It is good to meet you, '' + myName` is between the parentheses
    of `print()`. Because arguments are always single values, Python will first evaluate
    this expression and then pass that value as the argument. If `''Albert''` is stored
    in `myName`, the evaluation looks like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式`'It is good to meet you, ' + myName`在`print()`的括号中。因为参数总是单个值，Python首先评估这个表达式，然后将该值作为参数传递。如果`myName`中存储的是`'Albert'`，评估如下：
- en: '![image](../Images/70aa108adeb9660c5691089c0160e41b.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](../Images/70aa108adeb9660c5691089c0160e41b.png)'
- en: This is how the program greets the user by name.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是程序通过名字向用户问候的方式。
- en: '***The End of the Program***'
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***程序结束***'
- en: 'Once the program executes the last line, it *terminates* or *exits*. This means
    the program stops running. Python forgets all of the values stored in variables,
    including the string stored in `myName`. If you run the program again and enter
    a different name, the program will think that is your name:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦程序执行最后一行，它就会*终止*或*退出*。这意味着程序停止运行。Python忘记了所有存储在变量中的值，包括存储在`myName`中的字符串。如果再次运行程序并输入不同的名称，程序将认为那是你的名字。
- en: '[PRE11]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Remember, the computer does exactly what you program it to do. Computers are
    dumb and just follow the instructions you give them exactly. The computer doesn’t
    care if you type in your name, someone else’s name, or something silly. Type in
    anything you want. The computer will treat it the same way:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，计算机会完全按照你编程的指令执行。计算机很笨，只会严格按照你给它的指令执行。计算机不在乎你输入你的名字、别人的名字或者一些愚蠢的东西。输入任何你想输入的东西。计算机会以同样的方式对待它：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Naming Variables**'
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量命名
- en: Giving variables descriptive names makes it easier to understand what a program
    does. You could have called the `myName` variable `abrahamLincoln` or `nAmE`,
    and Python would have run the program just the same. But those names don’t really
    tell you much about what information the variable might hold. As [Chapter 1](#calibre_link-39)
    discussed, if you were moving to a new house and you labeled every moving box
    *Stuff*, that wouldn’t be helpful at all! This book’s interactive shell examples
    use variable names like `spam`, `eggs`, and `bacon` because the variable names
    in these examples don’t matter. However, this book’s programs all use descriptive
    names, and so should your programs.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 给变量起描述性的名称可以更容易理解程序的功能。您可以将`myName`变量命名为`abrahamLincoln`或`nAmE`，Python也会运行程序。但这些名称并不能告诉您有关变量可能包含的信息。正如[第1章](#calibre_link-39)所讨论的，如果您搬家并且将每个搬运箱标记为*Stuff*，那将毫无帮助！本书的交互式Shell示例使用变量名`spam`、`eggs`和`bacon`，因为这些示例中的变量名并不重要。然而，本书的程序都使用描述性名称，您的程序也应该如此。
- en: Variable names are *case sensitive*, which means the same variable name in a
    different case is considered a different variable. So `spam`, `SPAM`, `Spam`,
    and `sPAM` are four different variables in Python. They each contain their own
    separate values. It’s a bad idea to have differently cased variables in your program.
    Use descriptive names for your variables instead.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 变量名是*区分大小写*的，这意味着不同大小写的相同变量名被视为不同的变量。因此，在Python中，`spam`、`SPAM`、`Spam`和`sPAM`是四个不同的变量。它们各自包含自己的值。在程序中使用不同大小写的变量是一个不好的主意。而是应该为您的变量使用描述性的名称。
- en: 'Variable names are usually lowercase. If there’s more than one word in the
    variable name, it’s a good idea to capitalize each word after the first. For example,
    the variable name `whatIHadForBreakfastThisMorning` is much easier to read than
    `whatihadforbreakfastthismorning`. Capitalizing your variables this way is called
    *camel case* (because it resembles the humps on a camel’s back), and it makes
    your code more readable. Programmers also prefer using shorter variable names
    to make code easier to understand: `breakfast` or `foodThisMorning` is more readable
    than `whatIHadForBreakfastThisMorning`. These are *conventions*—optional but standard
    ways of doing things in Python programming.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 变量名通常是小写的。如果变量名中有多个单词，最好将第一个单词之后的每个单词大写。例如，变量名`whatIHadForBreakfastThisMorning`比`whatihadforbreakfastthismorning`更容易阅读。以这种方式大写您的变量称为*驼峰命名法*（因为它类似于骆驼背上的驼峰），它可以使您的代码更易读。程序员也更喜欢使用更短的变量名来使代码更易于理解：`breakfast`或`foodThisMorning`比`whatIHadForBreakfastThisMorning`更易读。这些是*约定*——在Python编程中做事情的可选但标准方式。
- en: '**Summary**'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Once you understand how to use strings and functions, you can start making programs
    that interact with users. This is important because text is the main way the user
    and the computer will communicate with each other. The user enters text through
    the keyboard with the `input()` function, and the computer displays text on the
    screen with the `print()` function.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您了解如何使用字符串和函数，您就可以开始制作与用户交互的程序。这很重要，因为文本是用户和计算机之间主要的交流方式。用户通过键盘使用`input()`函数输入文本，计算机则使用`print()`函数在屏幕上显示文本。
- en: Strings are just values of a new data type. All values have a data type, and
    the data type of a value affects how the `+` operator functions.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串只是一种新数据类型的值。所有值都有数据类型，值的数据类型会影响`+`运算符的功能。
- en: Functions are used to carry out complicated instructions in your program. Python
    has many built-in functions that you’ll learn about in this book. Function calls
    can be used in expressions anywhere a value is used.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 函数用于执行程序中的复杂指令。Python有许多内置函数，您将在本书中学习到。函数调用可以在表达式中的任何值处使用。
- en: The instruction or step in your program where Python is currently working is
    called the execution. In [Chapter 3](#calibre_link-40), you’ll learn more about
    making the execution move in ways other than just straight down the program. Once
    you learn this, you’ll be ready to create games!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您的程序中Python当前正在执行的指令或步骤称为执行。在[第3章](#calibre_link-40)中，您将学习如何使执行以除了直接向下执行程序之外的其他方式移动。一旦您学会了这一点，您就可以开始创建游戏了！
- en: '[Prev: Chapter 1 - The Interactive Shell](chapter1.html) | [Next: Chapter 3
    - Guess the Number](chapter3.html)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一页：第1章 - 交互式Shell](chapter1.html) | [下一页：第3章 - 猜数字游戏](chapter3.html)'

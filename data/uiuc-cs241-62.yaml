- en: 'RPC, Part 1: Introduction to Remote Procedure Calls'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RPC，第1部分：远程过程调用简介
- en: What is RPC?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是RPC？
- en: Remote Procedure Call. RPC is the idea that we can execute a procedure (function)
    on a different machine. In practice the procedure may execute on the same machine,
    however it may be in a different context - for example under a different user
    with different permissions and different lifecycle.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 远程过程调用。RPC是我们可以在不同的机器上执行一个过程（函数）的想法。实际上，该过程可能在同一台机器上执行，但可能在不同的上下文中执行-例如在不同的用户下以不同的权限和不同的生命周期。
- en: What is Privilege Separation?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是特权分离？
- en: The remote code will execute under a different user and with different privileges
    from the caller. In practice the remote call may execute with more or fewer privileges
    than the caller. This in principle can be used to improve the security of a system
    (by ensuring components operate with least privilege). Unfortunately, security
    concerns need to be carefully assessed to ensure that RPC mechanisms cannot be
    subverted to perform unwanted actions. For example, an RPC implementation may
    implicitly trust any connected client to perform any action, rather than a subset
    of actions on a subset of the data.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 远程代码将在不同的用户和不同权限下执行。实际上，远程调用可能以比调用者更多或更少的权限执行。原则上，这可以用来提高系统的安全性（通过确保组件以最低权限运行）。不幸的是，安全问题需要仔细评估，以确保RPC机制不能被利用来执行不需要的操作。例如，RPC实现可能会隐式信任任何连接的客户端执行任何操作，而不是在数据的子集上执行子集的操作。
- en: What is stub code? What is marshalling?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是存根代码？什么是编组？
- en: The stub code is the necessary code to hide the complexity of performing a remote
    procedure call. One of the roles of the stub code is to *marshall* the necessary
    data into a format that can be sent as a byte stream to a remote server.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 存根代码是隐藏执行远程过程调用复杂性所必需的代码。存根代码的作用之一是*编组*必要的数据成为可以作为字节流发送到远程服务器的格式。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What is server stub code? What is unmarshalling?
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是服务器存根代码？什么是解组？
- en: The server stub code will receive the request, unmarshall the request into a
    valid in-memory data call the underlying implementation and send the result back
    to the caller.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器存根代码将接收请求，将请求解组成有效的内存数据调用底层实现，并将结果发送回调用者。
- en: How do you send an int? float? a struct? A linked list? A graph?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何发送int？float？结构？链表？图？
- en: 'To implement RPC you need to decide (and document) which conventions you will
    use to serialize the data into a byte sequence. Even a simple integer has several
    common choices:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现RPC，您需要决定（并记录）将数据序列化为字节序列的约定。即使是一个简单的整数也有几种常见选择：
- en: Signed or unsigned?
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有符号还是无符号？
- en: ASCII
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASCII
- en: Fixed number of bytes or variable depending on magnitude
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固定字节数或根据大小而变化
- en: Little or Big endian binary format?
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小端或大端的二进制格式？
- en: To marshall a struct, decide which fields need to be serialized. It may not
    be necessary to send all data items (for example, some items may be irrelevant
    to the specific RPC or can be re-computed by the server from the other data items
    present).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要编组一个结构，决定哪些字段需要序列化。可能不需要发送所有数据项（例如，某些项可能与特定的RPC无关，或者可以由服务器从其他数据项重新计算）。
- en: To marshall a linked list it is unnecessary to send the link pointers- just
    stream the values. As part of unmarshalling the server can recreate a linked list
    structure from the byte sequence.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 编组链表时，无需发送链接指针-只需流式传输值。作为解组的一部分，服务器可以从字节序列中重新创建链表结构。
- en: By starting at the head node/vertex, a simple tree can be recursively visited
    to create a serialized version of the data. A cyclic graph will usually require
    additional memory to ensure that each edge and vertex is processed exactly once.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从头节点/顶点开始，可以递归访问简单树以创建数据的序列化版本。循环图通常需要额外的内存来确保每个边和顶点都被处理一次。
- en: What is an IDL (Interface Design Language)?
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是IDL（接口设计语言）？
- en: Writing stub code by hand is painful, tedious, error prone, difficult to maintain
    and difficult to reverse engineer the wire protocol from the implemented code.
    A better approach is specify the data objects, messages and services and automatically
    generate the client and server code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 手动编写存根代码是痛苦的、乏味的、容易出错的、难以维护的，难以从实现的代码中逆向工程出线协议。更好的方法是指定数据对象、消息和服务，并自动生成客户端和服务器代码。
- en: A modern example of an Interface Design Language is Google's Protocol Buffer
    .proto files.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接口设计语言的现代示例是Google的Protocol Buffer .proto文件。
- en: Complexity and challenges of RPC vs local calls?
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RPC与本地调用的复杂性和挑战？
- en: Remote Procedure Calls are significantly slower (10x to 100x) and more complex
    than local calls. An RPC must marshall data into a wire-compatible format. This
    may require multiple passes through the data structure, temporary memory allocation
    and transformation of the data representation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 远程过程调用比本地调用慢得多（10倍至100倍），并且比本地调用更复杂。RPC必须将数据编组成兼容的格式。这可能需要通过数据结构进行多次传递，临时内存分配和数据表示的转换。
- en: Robust RPC stub code must intelligently handle network failures and versioning.
    For example, a server may have to process requests from clients that are still
    running an early version of the stub code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 健壮的RPC存根代码必须智能地处理网络故障和版本控制。例如，服务器可能需要处理来自仍在运行早期版本存根代码的客户端的请求。
- en: A secure RPC will need to implement additional security checks (including authentication
    and authorization), validate data and encrypt communication between the client
    and host.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 安全的RPC将需要实施额外的安全检查（包括身份验证和授权），验证数据并加密客户端和主机之间的通信。
- en: Transferring large amounts of structured data
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传输大量结构化数据
- en: Let's examine three methods of transferring data using 3 different formats -
    JSON, XML and Google Protocol Buffers. JSON and XML are text-based protocols.
    Examples of JSON and XML messages are below.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过3种不同的格式-JSON、XML和Google Protocol Buffers来检查使用3种不同格式传输数据的方法。JSON和XML是基于文本的协议。以下是JSON和XML消息的示例。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Google Protocol Buffers is an open-source efficient binary protocol that places
    a strong emphasis on high throughput with low CPU overhead and minimal memory
    copying. Implementations exist for multiple languages including Go, Python, C++
    and C. This means client and server stub code in multiple languages can be generated
    from the .proto specification file to marshall data to and from a binary stream.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌协议缓冲区是一个开源的高效二进制协议，非常注重高吞吐量、低CPU开销和最小内存复制。已经为多种语言实现了协议缓冲区，包括Go、Python、C++和C。这意味着可以从.proto规范文件生成多种语言的客户端和服务器存根代码，以便将数据编组到二进制流中并从中解组。
- en: Google Protocol Buffers reduces the versioning problem by ignoring unknown fields
    that are present in a message. See the introduction to Protocol Buffers for more
    information.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌协议缓冲区通过忽略消息中存在的未知字段来减少版本问题。有关更多信息，请参阅协议缓冲区的介绍。
- en: '[https://developers.google.com/protocol-buffers/docs/overview](https://developers.google.com/protocol-buffers/docs/overview)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developers.google.com/protocol-buffers/docs/overview](https://developers.google.com/protocol-buffers/docs/overview)'

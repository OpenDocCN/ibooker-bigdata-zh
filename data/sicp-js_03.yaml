- en: Prefaces to Structure and Interpretation of Computer Programs, 1996 & 1984
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 《计算机程序的构造和解释》的前言，1996年和1984年
- en: Preface to the Second Edition of SICP, 1996
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 《SICP》第二版前言，1996年
- en: 'Is it possible that software is not like anything else, that it is meant to
    be discarded: that the whole point is to always see it as a soap bubble?'
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 软件可能不像其他任何东西，它可能是用来丢弃的：整个重点是始终将其视为肥皂泡吗？
- en: ''
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Alan J. Perlis
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —艾伦·J·佩里斯
- en: The material in this book has been the basis of MIT's entry-level computer science
    subject since 1980\. We had been teaching this material for four years when the
    first edition was published, and twelve more years have elapsed until the appearance
    of this second edition. We are pleased that our work has been widely adopted and
    incorporated into other texts. We have seen our students take the ideas and programs
    in this book and build them in as the core of new computer systems and languages.
    In literal realization of an ancient Talmudic pun, our students have become our
    builders. We are lucky to have such capable students and such accomplished builders.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 自1980年以来，本书的内容一直是麻省理工学院入门级计算机科学课程的基础。在第一版出版时，我们已经教授了这些内容四年，直到第二版出现为止，又过去了十二年。我们很高兴看到我们的工作被广泛采用并融入其他教材中。我们看到我们的学生将本书中的思想和程序作为新计算机系统和语言的核心进行构建。在对古代犹太文学的双关语的实际实现中，我们的学生已经成为我们的建设者。我们很幸运有这样有能力的学生和有成就的建设者。
- en: In preparing this edition, we have incorporated hundreds of clarifications suggested
    by our own teaching experience and the comments of colleagues at MIT and elsewhere.
    We have redesigned most of the major programming systems in the book, including
    the generic-arithmetic system, the interpreters, the register-machine simulator,
    and the compiler; and we have rewritten all the program examples to ensure that
    any Scheme implementation conforming to the IEEE Scheme standard (IEEE 1990) will
    be able to run the code.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备这个版本时，我们吸收了数百个澄清建议，这些建议来自我们自己的教学经验以及麻省理工学院和其他地方的同事的评论。我们重新设计了书中大部分主要的编程系统，包括通用算术系统、解释器、寄存器机模拟器和编译器；我们重新编写了所有的程序示例，以确保符合IEEE
    Scheme标准（IEEE 1990）的任何Scheme实现都能运行这些代码。
- en: 'This edition emphasizes several new themes. The most important of these is
    the central role played by different approaches to dealing with time in computational
    models: objects with state, concurrent programming, functional programming, lazy
    evaluation, and nondeterministic programming. We have included new sections on
    concurrency and nondeterminism, and we have tried to integrate this theme throughout
    the book.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本强调了几个新主题。其中最重要的是不同时间处理方法在计算模型中所起的核心作用：具有状态的对象、并发编程、函数式编程、惰性求值和非确定性编程。我们增加了关于并发和非确定性的新章节，并试图贯穿整本书的主题。
- en: The first edition of the book closely followed the syllabus of our MIT onesemester
    subject. With all the new material in the second edition, it will not be possible
    to cover everything in a single semester, so the instructor will have to pick
    and choose. In our own teaching, we sometimes skip the section on logic programming
    (section 4.4), we have students use the register-machine simulator but we do not
    cover its implementation (section 5.2), and we give only a cursory overview of
    the compiler (section 5.5). Even so, this is still an intense course. Some instructors
    may wish to cover only the first three or four chapters, leaving the other material
    for subsequent courses.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 该书的第一版紧随我们麻省理工学院一个学期的课程大纲。随着第二版中的所有新材料，不可能在一个学期内覆盖所有内容，因此教师将不得不进行选择。在我们自己的教学中，我们有时会跳过逻辑编程部分（第4.4节），我们让学生使用寄存器机模拟器，但我们不涉及其实现（第5.2节），我们只对编译器进行了简要概述（第5.5节）。即便如此，这仍然是一门密集的课程。一些教师可能只希望覆盖前三四章，将其他材料留给后续课程。
- en: The World Wide Web site of MIT Press provides support for users of this book.
    This includes programs from the book, sample programming assignments, supplementary
    materials, and downloadable implementations of the Scheme dialect of Lisp.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 麻省理工学院出版社的网站为本书的用户提供支持。这包括书中的程序、示例编程作业、补充材料以及Lisp方言Scheme的可下载实现。
- en: —Harold Abelson and Gerald Jay Sussman
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: —哈罗德·阿贝尔森和杰拉尔德·杰伊·萨斯曼
- en: Preface to the First Edition of SICP, 1984
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 《SICP》第一版前言，1984年
- en: A computer is like a violin. You can imagine a novice trying first a phonograph
    and then a violin. The latter, he says, sounds terrible. That is the argument
    we have heard from our humanists and most of our computer scientists. Computer
    programs are good, they say, for particular purposes, but they aren't flexible.
    Neither is a violin, or a typewriter, until you learn how to use it.
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 计算机就像小提琴。你可以想象一个新手先尝试留声机，然后再尝试小提琴。他说后者听起来很糟糕。这就是我们从人文学家和大多数计算机科学家那里听到的论点。他们说，计算机程序对特定目的很好，但不够灵活。小提琴和打字机也是如此，直到你学会如何使用它们。
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Marvin Minsky, “Why Programming Is a Good Medium for Expressing Poorly-Understood
    and Sloppily-Formulated Ideas”
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —马文·明斯基，“为什么编程是表达不清楚和粗糙构想的好媒介”
- en: “The Structure and Interpretation of Computer Programs” is the entry-level subject
    in computer science at the Massachusetts Institute of Technology. It is required
    of all students at MIT who major in electrical engineering or in computer science,
    as one-fourth of the “common core curriculum,” which also includes two subjects
    on circuits and linear systems and a subject on the design of digital systems.
    We have been involved in the development of this subject since 1978, and we have
    taught this material in its present form since the fall of 1980 to between 600
    and 700 students each year. Most of these students have had little or no prior
    formal training in computation, although many have played with computers a bit
    and a few have had extensive programming or hardware-design experience.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 《计算机程序的结构与解释》是麻省理工学院计算机科学的入门课程。对于主修电气工程或计算机科学的麻省理工学院学生来说，这是“通识核心课程”的一部分，该核心课程还包括两门有关电路和线性系统的课程以及一门关于数字系统设计的课程。自1978年以来，我们一直参与该课程的开发，并自1980年秋季起以目前的形式教授该课程，每年约有600至700名学生。大多数学生在计算方面几乎没有或根本没有正式的训练，尽管许多人稍微接触过计算机，有些人有丰富的编程或硬件设计经验。
- en: Our design of this introductory computer-science subject reflects two major
    concerns. First, we want to establish the idea that a computer language is not
    just a way of getting a computer to perform operations but rather that it is a
    novel formal medium for expressing ideas about methodology. Thus, programs must
    be written for people to read, and only incidentally for machines to execute.
    Second, we believe that the essential material to be addressed by a subject at
    this level is not the syntax of particular programming-language constructs, nor
    clever algorithms for computing particular functions efficiently, nor even the
    mathematical analysis of algorithms and the foundations of computing, but rather
    the techniques used to control the intellectual complexity of large software systems.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设计这门计算机科学入门课程的两个主要关注点。首先，我们希望确立一个观念，即计算机语言不仅仅是让计算机执行操作的一种方式，而是一种表达方法论思想的新颖形式。因此，程序必须是为人们而写的，只是偶然为机器执行。其次，我们认为在这个层次上需要解决的基本问题不是特定编程语言结构的语法，也不是计算特定函数的巧妙算法，甚至不是算法的数学分析和计算基础，而是控制大型软件系统的知识复杂性的技术。
- en: Our goal is that students who complete this subject should have a good feel
    for the elements of style and the aesthetics of programming. They should have
    command of the major techniques for controlling complexity in a large system.
    They should be capable of reading a 50-page-long program, if it is written in
    an exemplary style. They should know what not to read, and what they need not
    understand at any moment. They should feel secure about modifying a program, retaining
    the spirit and style of the original author.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是，完成这门课程的学生应该对编程的风格和美学元素有所了解。他们应该掌握大型系统中控制复杂性的主要技术。如果程序以示范的风格编写，他们应该能够阅读长达50页的程序。他们应该知道什么不需要阅读，以及在任何时候他们不需要理解什么。他们应该对修改程序感到自信，保留原作者的精神和风格。
- en: These skills are by no means unique to computer programming. The techniques
    we teach and draw upon are common to all of engineering design. We control complexity
    by building abstractions that hide details when appropriate. We control complexity
    by establishing conventional interfaces that enable us to construct systems by
    combining standard, well-understood pieces in a “mix and match” way. We control
    complexity by establishing new languages for describing a design, each of which
    emphasizes particular aspects of the design and deemphasizes others.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技能并不是计算机编程所特有的。我们教授和借鉴的技术是所有工程设计的共同之处。我们通过构建隐藏细节的抽象来控制复杂性。我们通过建立常规接口来控制复杂性，这使我们能够以“混搭”的方式组合标准、理解透彻的部件来构建系统。我们通过建立描述设计的新语言来控制复杂性，每种语言都强调设计的特定方面并淡化其他方面。
- en: Underlying our approach to this subject is our conviction that “computer science”
    is not a science and that its significance has little to do with computers. The
    computer revolution is a revolution in the way we think and in the way we express
    what we think. The essence of this change is the emergence of what might best
    be called *procedural epistemology*—the study of the structure of knowledge from
    an imperative point of view, as opposed to the more declarative point of view
    taken by classical mathematical subjects. Mathematics provides a framework for
    dealing precisely with notions of “what is.” Computation provides a framework
    for dealing precisely with notions of “how to.”
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对这门课程的方法的基础是我们的信念，即“计算机科学”并不是一门科学，它的重要性与计算机无关。计算机革命是我们思考方式和表达思想方式的革命。这种变化的本质是最好称为“程序式认识论”的出现——从命令的角度研究知识结构，而不是古典数学学科所采用的更为陈述性的观点。数学提供了处理“是什么”的概念的精确框架。计算提供了处理“如何”的概念的精确框架。
- en: 'In teaching our material we use a dialect of the programming language Lisp.
    We never formally teach the language, because we don''t have to. We just use it,
    and students pick it up in a few days. This is one great advantage of Lisp-like
    languages: They have very few ways of forming compound expressions, and almost
    no syntactic structure. All of the formal properties can be covered in an hour,
    like the rules of chess. After a short time we forget about syntactic details
    of the language (because there are none) and get on with the real issues—figuring
    out what we want to compute, how we will decompose problems into manageable parts,
    and how we will work on the parts. Another advantage of Lisp is that it supports
    (but does not enforce) more of the large-scale strategies for modular decomposition
    of programs than any other language we know. We can make procedural and data abstractions,
    we can use higher-order functions to capture common patterns of usage, we can
    model local state using assignment and data mutation, we can link parts of a program
    with streams and delayed evaluation, and we can easily implement embedded languages.
    All of this is embedded in an interactive environment with excellent support for
    incremental program design, construction, testing, and debugging. We thank all
    the generations of Lisp wizards, starting with John McCarthy, who have fashioned
    a fine tool of unprecedented power and elegance.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在教授我们的材料时，我们使用的是Lisp编程语言的一个方言。我们从不正式教授这种语言，因为我们不必这样做。我们只是使用它，学生们几天就能掌握。这是Lisp类语言的一个巨大优势：它们几乎没有形成复合表达式的方式，几乎没有语法结构。所有的形式属性都可以在一个小时内覆盖，就像国际象棋的规则一样。过了一段时间，我们就会忘记语言的语法细节（因为几乎没有），并着手处理真正的问题——弄清楚我们想要计算什么，如何将问题分解为可管理的部分，以及如何处理这些部分。Lisp的另一个优势是，它支持（但不强制）更多的程序模块化分解的大规模策略，比我们所知道的任何其他语言都要多。我们可以进行过程和数据抽象，我们可以使用高阶函数来捕捉常见的使用模式，我们可以使用赋值和数据变异来模拟局部状态，我们可以使用流和延迟评估来链接程序的部分，我们可以轻松实现嵌入式语言。所有这些都嵌入在一个交互式环境中，具有出色的支持，用于增量程序设计、构建、测试和调试。我们感谢所有世代的Lisp巫师，从John
    McCarthy开始，他们打造了一种前所未有的强大而优雅的工具。
- en: Scheme, the dialect of Lisp that we use, is an attempt to bring together the
    power and elegance of Lisp and Algol. From Lisp we take the metalinguistic power
    that derives from the simple syntax, the uniform representation of programs as
    data objects, and the garbage-collected heap-allocated data. From Algol we take
    lexical scoping and block structure, which are gifts from the pioneers of programminglanguage
    design who were on the Algol committee. We wish to cite John Reynolds and Peter
    Landin for their insights into the relationship of Church's lambda calculus to
    the structure of programming languages. We also recognize our debt to the mathematicians
    who scouted out this territory decades before computers appeared on the scene.
    These pioneers include Alonzo Church, Barkley Rosser, Stephen Kleene, and Haskell
    Curry.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Scheme，我们使用的Lisp方言，是试图将Lisp和Algol的力量和优雅结合在一起的尝试。从Lisp中，我们获得了源自简单语法、将程序统一表示为数据对象以及垃圾回收堆分配数据的元语言能力。从Algol中，我们获得了词法作用域和块结构，这些都是编程语言设计先驱在Algol委员会上的贡献。我们希望引用John
    Reynolds和Peter Landin对Church的λ演算与编程语言结构关系的洞察。我们也承认我们对数学家的债务，他们在计算机出现之前就已经勘探了这个领域。这些先驱包括Alonzo
    Church，Barkley Rosser，Stephen Kleene和Haskell Curry。
- en: —Harold Abelson and Gerald Jay Sussman
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: —Harold Abelson和Gerald Jay Sussman

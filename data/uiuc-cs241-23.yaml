- en: 'Memory, Part 3: Smashing the Stack Example'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存，第3部分：破坏堆栈示例
- en: Each thread uses a stack memory. The stack 'grows downwards' - if a function
    calls another function, then the stack is extended to smaller memory addresses.
    Stack memory includes non-static automatic (temporary) variables, parameter values
    and the return address. If a buffer is too small some data (e.g. input values
    from the user), then there is a real possibility that other stack variables and
    even the return address will be overwritten. The precise layout of the stack's
    contents and order of the automatic variables is architecture and compiler dependent.
    However with a little investigative work we can learn how to deliberately smash
    the stack for a particular architecture.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 每个线程使用堆栈内存。堆栈“向下增长” - 如果一个函数调用另一个函数，那么堆栈会扩展到更小的内存地址。堆栈内存包括非静态自动（临时）变量，参数值和返回地址。如果缓冲区太小，一些数据（例如来自用户的输入值），那么其他堆栈变量甚至返回地址可能会被覆盖。堆栈内容的精确布局和自动变量的顺序取决于体系结构和编译器。然而，通过一些调查工作，我们可以学会如何故意破坏特定体系结构的堆栈。
- en: The example below demonstrates how the return address is stored on the stack.
    For a particular 32 bit architecture [Live Linux Machine](http://cs-education.github.io/sys/),
    we determine that the return address is stored at an address two pointers (8 bytes)
    above the address of the automatic variable. The code deliberately changes the
    stack value so that when the input function returns, rather than continuing on
    inside the main method, it jumps to the exploit function instead.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例演示了返回地址存储在堆栈上的方式。对于特定的32位体系结构[Live Linux Machine](http://cs-education.github.io/sys/)，我们确定返回地址存储在自动变量地址的两个指针（8字节）以上的地址。代码故意改变堆栈值，以便当输入函数返回时，不是继续在主方法内部进行，而是跳转到利用函数。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There are [a lot](https://en.wikipedia.org/wiki/Stack_buffer_overflow) of ways
    that computers tend to get around this.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机通常有[很多种](https://en.wikipedia.org/wiki/Stack_buffer_overflow)方法来解决这个问题。

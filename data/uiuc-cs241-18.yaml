- en: 'Process Control, Part 1: Wait macros, using signals'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程控制，第1部分：等待宏，使用信号
- en: Wait Macros
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 等待宏
- en: Can I find out the exit value of my child?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以找出我的子进程的退出值吗？
- en: 'You can find the lowest 8 bits of the child''s exit value (the return value
    of `main()` or value included in `exit()`): Use the "Wait macros" - typically
    you will use "WIFEXITED" and "WEXITSTATUS" . See `wait`/`waitpid` man page for
    more information).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以找到子进程的最低8位退出值（`main()`的返回值或包含在`exit()`中的值）：使用“等待宏” - 通常您将使用“WIFEXITED”和“WEXITSTATUS”。有关更多信息，请参阅`wait`/`waitpid`手册页。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A process can only have 256 return values, the rest of the bits are informational.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一个进程只能有256个返回值，其余的位是信息性的。
- en: Bit Shifting
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 位移
- en: Note there is no need to memorize this, this is just a high level overview of
    how information is stored inside the status variables
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，没有必要记住这些，这只是信息存储在状态变量内部的高级概述
- en: '[Android source code](https://android.googlesource.com/platform/prebuilts/gcc/linuxx86/host/i686-linux-glibc2.7-%0A4.6/+/tools_r20/sysroot/usr/include/bits/waitstatus.h)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[Android源代码](https://android.googlesource.com/platform/prebuilts/gcc/linuxx86/host/i686-linux-glibc2.7-%0A4.6/+/tools_r20/sysroot/usr/include/bits/waitstatus.h)'
- en: /* If WIFEXITED(STATUS), the low-order 8 bits of the status. */
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: /* 如果WIFEXITED(STATUS)，则为状态的低8位。 */
- en: '#define __WEXITSTATUS(status) (((status) & 0xff00) >> 8)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '#define __WEXITSTATUS(status) (((status) & 0xff00) >> 8)'
- en: /* If WIFSIGNALED(STATUS), the terminating signal. */
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: /* 如果WIFSIGNALED(STATUS)，则为终止信号。 */
- en: '#define __WTERMSIG(status) ((status) & 0x7f)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '#define __WTERMSIG(status) ((status) & 0x7f)'
- en: /* If WIFSTOPPED(STATUS), the signal that stopped the child. */
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: /* 如果WIFSTOPPED(STATUS)，则为停止子进程的信号。 */
- en: '#define __WSTOPSIG(status) __WEXITSTATUS(status)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '#define __WSTOPSIG(status) __WEXITSTATUS(status)'
- en: /* Nonzero if STATUS indicates normal termination. */
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: /* 如果STATUS指示正常终止，则为非零。 */
- en: '#define __WIFEXITED(status) (__WTERMSIG(status) == 0)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '#define __WIFEXITED(status) (__WTERMSIG(status) == 0)'
- en: The kernel has an internal way of keeping track of signaled, exited, or stopped.
    That API is abstracted so that that the kernel developers are free to change at
    will.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 内核有一种内部方式来跟踪已发出、已退出或已停止的信号。该API被抽象化，以便内核开发人员可以随意更改。
- en: Being careful.
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小心。
- en: Remember that the the macros only make sense if the precondition is met. Meaning
    that a process' exit status won't be defined if the process is signaled. The macros
    will not do the checking for you, so it's up to the programming to make sure the
    logic checks out.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果前提条件得到满足，宏才有意义。这意味着如果进程被发出信号，进程的退出状态将不会被定义。宏不会为您检查，因此需要编程确保逻辑正确。
- en: Signals
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信号
- en: What's a signal?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是信号？
- en: A signal is a construct provided to us by the kernel. It allows one process
    to asynchronously send a signal (think a message) to another process. If that
    process wants to accept the signal, it can, and then, for most signals, can decide
    what to do with that signal. Here is a short list (non comprehensive) of signals.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 信号是内核提供给我们的一种构造。它允许一个进程异步地向另一个进程发送信号（类似于消息）。如果该进程希望接受该信号，它可以，并且对于大多数信号，可以决定如何处理该信号。这里是一个信号的简短列表（非全面）。
- en: '| Name | Default Action | Usual Use Case |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 默认操作 | 通常用例 |'
- en: '| --- | --- | --- |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| SIGINT | Terminate Process (Can be caught) | Tell the process to stop nicely
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| SIGINT | 终止进程（可以被捕获） | 告诉进程停止运行 |'
- en: '| SIGQUIT | Terminate Process (Can be caught) | Tells the process to stop harshly
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| SIGQUIT | 终止进程（可以被捕获） | 告诉进程停止运行 |'
- en: '| SIGSTOP | Stop Process (Cannot be caught) | Stops the process to be continued
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| SIGSTOP | 停止进程（无法被捕获） | 停止进程以便继续 |'
- en: '| SIGCONT | Continues a Process | Continues to run the process |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| SIGCONT | 继续进程 | 继续运行进程 |'
- en: '| SIGKILL | Terminate Process (Cannot be Ignored) | You want your process gone
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| SIGKILL | 终止进程（无法被忽略） | 你想让你的进程消失 |'
- en: Can I pause my child?
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以暂停我的子进程吗？
- en: Yes ! You can temporarily pause a running process by sending it a SIGSTOP signal.
    If it succeeds it will freeze a process; i.e. the process will not be allocated
    any more CPU time.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！您可以通过发送SIGSTOP信号临时暂停正在运行的进程。如果成功，它将冻结一个进程；即进程将不再分配任何CPU时间。
- en: To allow a process to resume execution send it the SIGCONT signal.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要允许进程恢复执行，请发送SIGCONT信号。
- en: For example, Here's program that slowly prints a dot every second, up to 59
    dots.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这里有一个程序，每秒慢慢打印一个点，最多59个点。
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We will first start the process in the background (notice the & at the end).
    Then send it a signal from the shell process by using the kill command.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将进程在后台启动（注意末尾的&）。然后通过使用kill命令从shell进程向其发送信号。
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How do I kill/stop/suspend my child from C?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何在C中杀死/停止/暂停我的子进程？
- en: In C, send a signal to the child using `kill` POSIX call,
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在C中，使用`kill` POSIX调用向子进程发送信号，
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As we saw above there is also a kill command available in the shell e.g. get
    a list of running processes and then terminate process 45 and process 46
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们上面所看到的，在shell中也有一个kill命令，例如获取正在运行的进程列表，然后终止进程45和进程46
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How can I detect "CTRL-C" and clean up gracefully?
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何检测“CTRL-C”并优雅地清理？
- en: We will return to signals later on - this is just a short introduction. On a
    Linux system, see `man -s7 signal` if you are interested in finding out more (for
    example a list of system and library calls that are async-signal-safe.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会回到信号 - 这只是一个简短的介绍。在Linux系统上，如果您有兴趣了解更多信息（例如系统和库调用的异步信号安全列表），请参阅`man -s7
    signal`。
- en: There are strict limitations on the executable code inside a signal handler.
    Most library and system calls are not 'async-signal-safe' - they may be not use
    used inside a signal handler because they are not re-entrant safe. In a single-threaded
    program, signal handling momentarily interrupts the program execution to execute
    the signal handler code instead. Suppose your original program was interrupted
    while executing the library code of `malloc` ; the memory structures used by malloc
    will not be in a consistent state. Calling `printf` (which uses `malloc`) as part
    of the signal handler is unsafe and will result in "undefined behavior" i.e. it
    is no longer a useful,predictable program. In practice your program might crash,
    compute or generate incorrect results or stop functioning ("deadlock"), depending
    on exactly what your program was executing when it was interrupted to execute
    the signal handler code.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 信号处理程序内的可执行代码受到严格限制。大多数库和系统调用都不是“异步信号安全”的 - 它们不能在信号处理程序内使用，因为它们不是可重入安全的。在单线程程序中，信号处理会暂时中断程序执行，以执行信号处理程序代码。假设您的原始程序在执行`malloc`库代码时被中断；malloc使用的内存结构将不处于一致状态。在信号处理程序中调用`printf`（它使用`malloc`）是不安全的，并将导致“未定义行为”，即它不再是一个有用的、可预测的程序。实际上，您的程序可能会崩溃、计算或生成不正确的结果，或者停止运行（“死锁”），具体取决于在执行信号处理程序代码时您的程序正在执行什么。
- en: One common use of signal handlers is to set a boolean flag that is occasionally
    polled (read) as part of the normal running of the program. For example,
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 信号处理程序的一个常见用途是设置一个布尔标志，该标志偶尔被轮询（读取）作为程序正常运行的一部分。例如，
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The above code might appear to be correct on paper. However, we need to provide
    a hint to the compiler and to the CPU core that will execute the `main()` loop.
    We need to prevent a compiler optimization: The expression `! pleaseStop` appears
    to be a loop invariant i.e. true forever, so can be simplified to `true`. Secondly,
    we need to ensure that the value of `pleaseStop` is not cached using a CPU register
    and instead always read from and written to main memory. The `sig_atomic_t` type
    implies that all the bits of the variable can be read or modified as an "atomic
    operation" - a single uninterruptable operation. It is impossible to read a value
    that is composed of some new bit values and old bit values.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码在纸上看起来可能是正确的。然而，我们需要向编译器和将执行`main()`循环的CPU核心提供一个提示。我们需要防止编译器优化：表达式`! pleaseStop`似乎是一个循环不变量，即永远为真，因此可以简化为`true`。其次，我们需要确保`pleaseStop`的值不会被缓存在CPU寄存器中，而是始终从主存中读取和写入。`sig_atomic_t`类型意味着变量的所有位可以作为“原子操作”进行读取或修改
    - 一个不可中断的操作。不可能读取由一些新位值和旧位值组成的值。
- en: By specifying `pleaseStop` with the correct type `volatile sig_atomic_t` we
    can write portable code where the main loop will be exited after the signal handler
    returns. The `sig_atomic_t` type can be as large as an `int` on most modern platforms
    but on embedded systems can be as small as a `char` and only able to represent
    (-127 to 127) values.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用正确类型的`volatile sig_atomic_t`来指定`pleaseStop`，我们可以编写可移植的代码，其中主循环将在信号处理程序返回后退出。`sig_atomic_t`类型在大多数现代平台上可以与`int`一样大，但在嵌入式系统上可能只能表示(-127至127)的值，并且只能表示(-127至127)的值。
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Two examples of this pattern can be found in "COMP" a terminal based 1Hz 4bit
    computer ([https://github.com/gto76/comp-cpp/blob/1bf9a77eaf8f57f7358a316e5bbada97f2dc8987/src/output.c#L121](https://github.com/gto76/comp-cpp/blob/1bf9a77eaf8f57f7358a316e5bbada97f2dc8987/src/output.c#L121)).
    Two boolean flags are used. One to mark the delivery of `SIGINT` (CTRL-C), and
    gracefully shutdown the program, and the other to mark `SIGWINCH` signal to detect
    terminal resize and redraw the entire display.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式的两个示例可以在“COMP”中找到，这是一个基于终端的1Hz 4位计算机（[https://github.com/gto76/comp-cpp/blob/1bf9a77eaf8f57f7358a316e5bbada97f2dc8987/src/output.c#L121](https://github.com/gto76/comp-cpp/blob/1bf9a77eaf8f57f7358a316e5bbada97f2dc8987/src/output.c#L121)）。使用了两个布尔标志。一个用于标记`SIGINT`（CTRL-C）的传递，并优雅地关闭程序，另一个用于标记`SIGWINCH`信号以检测终端调整大小并重新绘制整个显示。
- en: '[Back: Forking, Part 2: Fork, Exec, Wait](https://github.com/angrave/SystemProgramming/wiki/Forking%2C-Part-2%3A-Fork%2C-Exec%2C-Wait/_edit)
    | [Next: Processes Review Questions](https://github.com/angrave/SystemProgramming/wiki/Processes-Review-Questions)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回：分叉，第2部分：分叉，执行，等待](https://github.com/angrave/SystemProgramming/wiki/Forking%2C-Part-2%3A-Fork%2C-Exec%2C-Wait/_edit)
    | [下一个：进程复习问题](https://github.com/angrave/SystemProgramming/wiki/Processes-Review-Questions)'

- en: 'Networking, Part 2: Using getaddrinfo'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络，第2部分：使用getaddrinfo
- en: How do I use `getaddrinfo` to convert the hostname into an IP address?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用`getaddrinfo`将主机名转换为IP地址？
- en: 'The function `getaddrinfo` can convert a human readable domain name (e.g. `www.illinois.edu`)
    into an IPv4 and IPv6 address. In fact it will return a linked-list of addrinfo
    structs:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`getaddrinfo`可以将人类可读的域名（例如`www.illinois.edu`）转换为IPv4和IPv6地址。实际上，它将返回一个addrinfo结构的链表：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It's very easy to use. For example, suppose you wanted to find out the numeric
    IPv4 address of a webserver at [www.bbc.com](http://www.bbc.com). We do this in
    two stages. First use getaddrinfo to build a linked-list of possible connections.
    Secondly use `getnameinfo` to convert the binary address into a readable form.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用起来非常简单。例如，假设你想找出[www.bbc.com](http://www.bbc.com)的网页服务器的数值IPv4地址。我们分两个阶段来做。首先使用getaddrinfo构建可能连接的链表。其次使用`getnameinfo`将二进制地址转换为可读形式。
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Typical output:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 典型输出：
- en: '[PRE2]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How is [www.cs.illinois.edu](http://www.cs.illinois.edu) converted into an IP
    address?
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[www.cs.illinois.edu](http://www.cs.illinois.edu)如何转换为IP地址？'
- en: Magic! No seriously, a system called "DNS" (Domain Name Service) is used. If
    a machine does not hold the answer locally then it sends a UDP packet to a local
    DNS server. This server in turn may query other upstream DNS servers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 神奇！不是开玩笑，使用了一个名为“DNS”（域名服务）的系统。如果一台机器本地没有答案，那么它会向本地DNS服务器发送一个UDP数据包。这个服务器反过来可能会查询其他上游DNS服务器。
- en: Is DNS secure?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DNS安全吗？
- en: DNS by itself is fast but not secure. DNS requests are not encrypted and susceptible
    to 'man-in-the-middle' attacks. For example, a coffee shop internet connection
    could easily subvert your DNS requests and send back different IP addresses for
    a particular domain
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: DNS本身很快，但不安全。DNS请求未加密，容易受到“中间人”攻击的影响。例如，咖啡店的互联网连接可以轻松篡改您的DNS请求，并为特定域返回不同的IP地址
- en: How do I connect to a TCP server (e.g. web server?)
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何连接到TCP服务器（例如网页服务器）？
- en: 'TODO There are three basic system calls you need to connect to a remote machine:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: TODO 有三个基本的系统调用，你需要连接到远程机器：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `getaddrinfo` call if successful, creates a linked-list of `addrinfo` structs
    and sets the given pointer to point to the first one.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`getaddrinfo`调用成功，它将创建一个`addrinfo`结构的链表，并将给定的指针设置为指向第一个。
- en: The socket call creates an outgoing socket and returns a descriptor (sometimes
    called a 'file descriptor') that can be used with `read` and `write` etc.In this
    sense it is the network analog of `open` that opens a file stream - except that
    we haven't connected the socket to anything yet!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 套接字调用创建一个传出套接字并返回一个描述符（有时称为“文件描述符”），可以与`read`和`write`等一起使用。在这个意义上，它是网络模拟`open`打开文件流的功能-只是我们还没有将套接字连接到任何地方！
- en: 'Finally the connect call attempts the connection to the remote machine. We
    pass the original socket descriptor and also the socket address information which
    is stored inside the addrinfo structure. There are different kinds of socket address
    structures (e.g. IPv4 vs IPv6) which can require more memory. So in addition to
    passing the pointer, the size of the structure is also passed:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，连接调用尝试连接到远程机器。我们传递原始套接字描述符，以及存储在addrinfo结构中的套接字地址信息。有不同类型的套接字地址结构（例如IPv4与IPv6），可能需要更多的内存。因此，除了传递指针外，还传递了结构的大小：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How do I free the memory allocated for the linked-list of addrinfo structs?
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何释放为addrinfo结构的链表分配的内存？
- en: 'As part of the clean up code call `freeaddrinfo` on the top-most `addrinfo`
    struct:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在清理代码的一部分上调用`freeaddrinfo`，在最顶层的`addrinfo`结构上：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If getaddrinfo fails can I use `strerror` to print out the error?
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果getaddrinfo失败，我可以使用`strerror`打印出错误吗？
- en: 'No. Error handling with `getaddrinfo` is a little different:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 不。使用`getaddrinfo`进行错误处理有点不同：
- en: The return value *is* the error code (i.e. don't use `errno`)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回值*就是*错误代码（即不要使用`errno`）
- en: 'Use `gai_strerror` to get the equivalent short English error text:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`gai_strerror`获取等效的简短英文错误文本：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Can I request only IPv4 or IPv6 connection? TCP only?
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我可以只请求IPv4或IPv6连接吗？仅限TCP？
- en: Yes! Use the addrinfo structure that is passed into `getaddrinfo` to define
    the kind of connection you'd like.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！使用传递给`getaddrinfo`的addrinfo结构来定义你想要的连接类型。
- en: 'For example, to specify stream-based protocols over IPv6:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要指定基于IPv6的基于流的协议：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What about code examples that use `gethostbyname`?
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于使用`gethostbyname`的代码示例呢？
- en: The old function `gethostbyname` is deprecated; it's the old way convert a host
    name into an IP address. The port address still needs to be manually set using
    htons function. It's much easier to write code to support IPv4 AND IPv6 using
    the newer `getaddrinfo`
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 旧函数`gethostbyname`已被弃用；这是将主机名转换为IP地址的旧方法。端口地址仍然需要使用htons函数手动设置。使用更新的`getaddrinfo`更容易编写支持IPv4和IPv6的代码
- en: Is it that easy!?
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 是这么简单！？
- en: Yes and no. It's easy to create a simple TCP client - however network communications
    offers many different levels of abstraction and several attributes and options
    that can be set at each level of abstraction (for example we haven't talked about
    `setsockopt` which can manipulate options for the socket). For more information
    see this [guide](http://www.beej.us/guide/bgnet/output/html/multipage/getaddrinfoman.html).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 是也不是。创建一个简单的TCP客户端很容易-但是网络通信提供了许多不同级别的抽象，以及可以在每个抽象级别设置的几个属性和选项（例如，我们还没有讨论可以操纵套接字选项的`setsockopt`）。有关更多信息，请参阅此[指南](http://www.beej.us/guide/bgnet/output/html/multipage/getaddrinfoman.html)。

- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: The book *Structure and Interpretation of Computer Programs* (SICP) introduces
    the reader to central ideas of computation by establishing a series of mental
    models for computation. [Chapters 1–3](c001.xhtml) cover programming concepts
    that are common to all modern high-level programming languages. The original first
    two editions of SICP use the programming language Scheme in their program examples,
    whose minimalist, expression-oriented syntax allows the book to focus on the underlying
    ideas rather than the design of the chosen language. [Chapters 4](c004.xhtml)
    and [5](c005.xhtml) use Scheme to formulate language processors for Scheme, deepening
    the readers’ understanding of the mental models and exploring language extensions
    and alternatives.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 《计算机程序的构造和解释》（SICP）通过建立一系列计算的心智模型，向读者介绍了计算的核心思想。[第1-3章](c001.xhtml)涵盖了所有现代高级编程语言共有的编程概念。SICP的最初两版使用Scheme编程语言作为其程序示例，其极简的表达式导向语法使得该书能够专注于基本思想而不是所选择语言的设计。[第4](c004.xhtml)和[5](c005.xhtml)章使用Scheme来制定Scheme的语言处理器，加深读者对心智模型的理解，并探索语言扩展和替代方案。
- en: Since its publication in 1984 and its second edition in 1996, SICP has been
    adopted as a textbook by universities and colleges around the world, including
    the National University of Singapore (NUS), which introduced the SICP-based introductory
    course CS1101S in 1997\. In the mid-1990s, the languages Python, JavaScript, and
    Ruby emerged, which share central design elements with Scheme, but which employ
    a more complex, statement-oriented syntax that uses familiar algebraic (infix)
    notation. Their rise in popularity led instructors to adapt their SICP-based courses,
    typically by translating the example programs to their language of choice, by
    adding material specific to that language, and by omitting the material of [chapters
    4](c004.xhtml) and [5](c005.xhtml).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 自1984年出版以及1996年的第二版以来，SICP已被世界各地的大学和学院采用为教材，包括新加坡国立大学（NUS），该校于1997年引入了基于SICP的入门课程CS1101S。在1990年代中期，Python、JavaScript和Ruby等语言出现，它们与Scheme共享核心设计元素，但采用了更复杂的面向语句的语法，使用熟悉的代数（中缀）表示法。它们的流行崛起导致教师们调整了基于SICP的课程，通常是通过将示例程序翻译为他们选择的语言，添加特定于该语言的材料，并省略[第4](c004.xhtml)和[5](c005.xhtml)章的材料。
- en: Adapting SICP to JavaScript
  id: totrans-3
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 将SICP改编为JavaScript
- en: The work on adapting the second edition of SICP to JavaScript (SICP JS) started
    at NUS in 2008, and CS1101S switched to JavaScript in 2012\. The language standard
    ECMAScript 2015 introduced lambda expressions, tail recursion, and block-scoped
    variables and constants, which enabled the adaptation to become quite close to
    the original. We made substantial changes to SICP only when we felt they were
    forced by differences between JavaScript and Scheme. The book covers just a small
    fraction of JavaScript, so a reader would be ill-advised to use it to learn the
    language. For example, the notion of a JavaScript object—considered one of its
    fundamental ingredients by any measure—is not even mentioned!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对将第二版SICP改编为JavaScript（SICP JS）的工作始于2008年的NUS，CS1101S于2012年转换为JavaScript。语言标准ECMAScript
    2015引入了lambda表达式、尾递归和块作用域变量和常量，这使得改编变得非常接近原版。我们只在JavaScript和Scheme之间的差异迫使我们感到必须进行实质性的改变时才对SICP进行了重大改动。该书只涵盖了JavaScript的一小部分，因此读者不应该使用它来学习这种语言。例如，JavaScript对象的概念——按任何标准来看都是其基本组成部分之一——甚至没有提到！
- en: It was straightforward to translate the programs of [chapters 1–3](c001.xhtml)
    to JavaScript by adding libraries that mirror Scheme primitives—including support
    for list structure—and adapting the text accordingly. However, the switch to JavaScript
    forced us to make subtle changes in the interpreters and compiler of [chapters
    4](c004.xhtml) and [5](c005.xhtml) in order to handle return statements. Scheme's
    expression-oriented syntax doesn't have return statements, which are a prominent
    feature of statement-oriented languages.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加模拟Scheme基元的库（包括对列表结构的支持），并相应地调整文本，将[第1-3章](c001.xhtml)的程序翻译成JavaScript是直截了当的。然而，转换到JavaScript迫使我们对[第4](c004.xhtml)和[5](c005.xhtml)章的解释器和编译器进行微妙的更改，以处理返回语句。Scheme的表达式导向语法没有返回语句，而返回语句是面向语句的语言的一个显著特征。
- en: By using JavaScript, [chapters 1–3](c001.xhtml) introduce the reader to the
    syntactic style of most mainstream languages today. However, that same syntactic
    style gave rise to significant changes in [chapter 4](c004.xhtml), because the
    direct representation of programs as data structures could no longer be taken
    for granted. This provided us with an opportunity to introduce the reader to the
    notion of program parsing in section 4.1, an important component of programming-language
    processors. In section 4.4, the rigid syntactic structure of JavaScript complicated
    the implementation of the presented logic programming system and exposed the limitations
    of JavaScript as a tool for programming language design.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用JavaScript，[第1-3章](c001.xhtml)向读者介绍了大多数主流语言的语法风格。然而，同样的语法风格在[第4章](c004.xhtml)中引起了重大变化，因为程序的直接表示作为数据结构不再能够被视为理所当然。这为我们提供了一个机会，在第4.1节中向读者介绍程序解析的概念，这是编程语言处理器的重要组成部分。在第4.4节中，JavaScript的严格语法结构使得所呈现的逻辑编程系统的实现变得复杂，并暴露了JavaScript作为编程语言设计工具的局限性。
- en: Resources for using SICP JS
  id: totrans-7
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用SICP JS的资源
- en: The MIT Press web page for SICP JS links to support for users of this book.
    This provides all programs from the book and extensive instructor resources, including
    a large collection of additional exercises and recommendations on selecting a
    subset of SICP JS that can be covered in a typical college semester. The JavaScript
    programs in the book run in the recommended strict mode in any JavaScript interpreter
    that complies with the ECMAScript 2020 specification of JavaScript (ECMA 2020).
    The MIT Press web page includes the JavaScript package `sicp`, which provides
    all JavaScript functions that are considered “primitive” in the book.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: SICP JS的MIT Press网页链接到了这本书的用户支持。这提供了书中的所有程序和丰富的教师资源，包括大量额外的练习和关于在典型大学学期中可以涵盖的SICP
    JS子集的建议。该书中的JavaScript程序在符合ECMAScript 2020 JavaScript规范（ECMA 2020）的任何JavaScript解释器中以推荐的严格模式运行。MIT
    Press网页包括JavaScript包`sicp`，其中提供了书中被认为是“原始”的所有JavaScript函数。
- en: To the reader
  id: totrans-9
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 致读者
- en: We sincerely hope that if this book is your first encounter with programming
    you will use your newly gained understanding of the structure and interpretation
    of computer programs to learn more programming languages, including Scheme and
    the full JavaScript language. If you have learned JavaScript prior to picking
    up SICP JS, you might gain new insights into the fundamental concepts that underlie
    the language and discover how much can be achieved with so little. If you come
    to SICP JS with a knowledge of the original SICP, you might enjoy seeing familiar
    ideas presented in a new format—and might appreciate the online comparison edition,
    available at the book's web page, where SICP JS and SICP can be viewed side by
    side.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真诚地希望，如果这本书是你第一次接触编程，你将利用你对计算机程序的结构和解释的新理解来学习更多的编程语言，包括Scheme和完整的JavaScript语言。如果你在阅读SICP
    JS之前已经学过JavaScript，你可能会对支撑该语言的基本概念有新的见解，并发现如此少的东西可以取得如此大的成就。如果你已经了解原始的SICP，那么你可能会喜欢看到熟悉的思想以新的形式呈现，并且可能会欣赏书的网页上提供的在线比较版本，其中SICP
    JS和SICP可以并排查看。
- en: —Martin Henz and Tobias Wrigstad
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: —Martin Henz和Tobias Wrigstad

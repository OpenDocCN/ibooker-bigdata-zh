- en: 'File System, Part 5: Virtual file systems'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件系统，第5部分：虚拟文件系统
- en: Virtual file systems
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟文件系统
- en: POSIX systems, such as Linux and Mac OSX (which is based on BSD) include several
    virtual filesystems that are mounted (available) as part of the file-system. Files
    inside these virtual filesystems do not exist on the disk; they are generated
    dynamically by the kernel when a process requests a directory listing. Linux provides
    3 main virtual filesystems
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: POSIX系统，如Linux和基于BSD的Mac OSX，包括几个作为文件系统的一部分挂载（可用）的虚拟文件系统。这些虚拟文件系统中的文件不存在于磁盘上；当进程请求目录列表时，它们由内核动态生成。Linux提供了3个主要的虚拟文件系统
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For example if I want a continuous stream of 0s, I can `cat /dev/zero`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我想要一个连续的0流，我可以`cat /dev/zero`。
- en: How do I find out what filesystems are currently available (mounted)?
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何找出当前有哪些文件系统可用（已挂载）？
- en: Use `mount` Using mount without any options generates a list (one filesystem
    per line) of mounted filesystems including networked, virtual and local (spinning
    disk / SSD-based) filesystems. Here is a typical output of mount
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`mount`，不带任何选项地使用mount会生成一个列表（每行一个文件系统）已挂载的文件系统，包括网络、虚拟和本地（旋转磁盘/基于SSD的）文件系统。以下是mount的典型输出
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice that each line includes the filesystem type source of the filesystem
    and mount point. To reduce this output we can pipe it into `grep` and only see
    lines that match a regular expression.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每行都包括文件系统类型、文件系统源和挂载点。为了减少这种输出，我们可以将其导入到`grep`中，只看到与正则表达式匹配的行。
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Differences between random and urandom?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: random和urandom之间的区别？
- en: /dev/random is a file which contains number generator where the entropy is determined
    from environmental noise. Random will block/wait until enough entropy is collected
    from the environment.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: /dev/random是一个包含数字生成器的文件，其中熵是从环境噪声中确定的。随机将阻塞/等待，直到从环境中收集到足够的熵。
- en: /dev/urandom is like random, but differs in the fact that it allows for repetition
    (lower entropy threshold), thus wont block.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: /dev/urandom就像random一样，但不同之处在于它允许重复（熵阈值较低），因此不会阻塞。
- en: Other Filesystems
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他文件系统
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Mounting a filesystem
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挂载文件系统
- en: Let's say I have a filesystem hooked up on `/dev/cdrom` that I want to read
    from. I have to mound it to a directory before I can do any operations.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我有一个挂接在`/dev/cdrom`上的文件系统，我想要从中读取。我必须在进行任何操作之前将其挂载到一个目录上。
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How do I mount a disk image?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何挂载磁盘映像？
- en: Suppose you had downloaded a bootable linux disk image...
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你下载了一个可引导的Linux磁盘映像...
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Before putting the filesystem on a CD, we can mount the file as a filesystem
    and explore its contents. Note, mount requires root access, so let's run it using
    sudo
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在将文件系统放入CD之前，我们可以将文件作为文件系统挂载并浏览其内容。请注意，挂载需要root访问权限，因此让我们使用sudo来运行它
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Before the mount command, the arch directory is new and obviously empty. After
    mounting, the contents of `arch/` will be drawn from the files and directories
    stored in the filesystem stored inside the `archlinux-2014.11.01-dual.iso` file.
    The `loop` option is required because we want to mount a regular file not a block
    device such as a physical disk.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在挂载命令之前，arch目录是新的，显然是空的。挂载后，`arch/`的内容将从存储在`archlinux-2014.11.01-dual.iso`文件中的文件和目录中提取出来。需要`loop`选项，因为我们想要挂载一个常规文件而不是物理磁盘这样的块设备。
- en: 'The loop option wraps the original file as a block device - in this example
    we will find out below that the file system is provided under `/dev/loop0` : We
    can check the filesystem type and mount options by running the mount command without
    any parameters. We will pipe the output into `grep` so that we only see the relevant
    output line(s) that contain ''arch'''
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: loop选项将原始文件包装为块设备-在这个例子中，我们将在下面找到文件系统是在`/dev/loop0`下提供的：我们可以通过运行不带任何参数的mount命令来检查文件系统类型和挂载选项。我们将将输出导入到`grep`中，以便只看到包含'arch'的相关输出行(s)
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The iso9660 filesystem is a read-only filesystem originally designed for optical
    storage media (i.e. CDRoms). Attempting to change the contents of the filesystem
    will fail
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: iso9660文件系统是最初为光学存储介质（即CDRom）设计的只读文件系统。尝试更改文件系统的内容将失败
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Go to File System: Part 6](https://github.com/angrave/SystemProgramming/wiki/File-System,-Part-6:-Memory-mapped-files-and-Shared-memory)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[转到文件系统：第6部分](https://github.com/angrave/SystemProgramming/wiki/File-System,-Part-6:-Memory-mapped-files-and-Shared-memory)'

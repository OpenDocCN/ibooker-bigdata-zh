- en: 'Networking, Part 3: Building a simple TCP Client'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络，第3部分：构建一个简单的TCP客户端
- en: '`socket`'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 套接字
- en: '`int socket(int domain, int type, int protocol);`'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: int socket(int domain, int type, int protocol);
- en: Socket creates a socket with domain (usually AF_INET for IPv4), type is whether
    to use UDP or TCP, protocol is any addition options. This creates a socket object
    in the kernel with which one can communicate with the outside world/network. This
    returns a fd so you can use it like a normal file descriptor! Remember you want
    to do your reads or writes from the socketfd because that represents the socket
    object only as a client, otherwise you want to respect the convention of the server.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Socket使用域（通常为IPv4的AF_INET），类型是使用UDP还是TCP，协议是任何附加选项。这在内核中创建了一个套接字对象，可以与外部世界/网络通信。这将返回一个fd，因此您可以像使用普通文件描述符一样使用它！请记住，您希望从socketfd读取或写入，因为它仅代表客户端的套接字对象，否则您希望遵守服务器的约定。
- en: '`getaddressinfo`'
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: getaddressinfo
- en: We saw this in the last section! You're experts at this.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节看到了这个！你们是这方面的专家。
- en: '`connect`'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接
- en: '`int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);`'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
- en: Pass it the sockfd, then the address you want to go to and its length and you
    will be off connecting (as long as you check the error). Remember, network calls
    are ultra perceptible to failing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 将sockfd传递给它，然后传递您要访问的地址及其长度，您将可以连接（只要检查错误）。请记住，网络调用极易失败。
- en: '`read`/`write`'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取/写入
- en: Once we have a successful connection we can read or write like any old file
    descriptor. Keep in mind if you are connected to a website, you want to conform
    to the HTTP protocol specification in order to get any sort of meaningful results
    back. There are libraries to do this, usually you don't connect at the socket
    level because there are other libraries or packages around it
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们成功连接，我们可以像处理任何旧文件描述符一样读取或写入。请记住，如果您连接到一个网站，您希望遵守HTTP协议规范，以便获得任何有意义的结果。通常有库来做这个，通常你不会在套接字级别连接，因为周围有其他库或软件包
- en: Complete Simple TCP Client Example
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完整的简单TCP客户端示例
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Example output:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 示例输出：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Comment on HTTP request and response
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对HTTP请求和响应的评论
- en: 'The example above demonstrates a request to the server using Hypertext Transfer
    Protocol. A web page (or other resources) are requested using the following request:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例演示了使用超文本传输协议向服务器发出请求。使用以下请求请求网页（或其他资源）：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There are four parts (the method e.g. GET,POST,...); the resource (e.g. / /index.html
    /image.png); the proctocol "HTTP/1.0" and two new lines (\r\n\r\n)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个部分（方法例如GET，POST，...）；资源（例如/ /index.html /image.png）；协议“HTTP/1.0”和两个新行（\r\n\r\n）
- en: 'The server''s first response line describes the HTTP version used and whether
    the request is successful using a 3 digit response code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器的第一行响应描述了所使用的HTTP版本以及请求是否成功，使用了一个3位数的响应代码：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If the client had requested a non existing file, e.g. `GET /nosuchfile.html
    HTTP/1.0` Then the first line includes the response code is the well-known `404`
    response code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果客户端请求了一个不存在的文件，例如`GET /nosuchfile.html HTTP/1.0`，那么第一行包括响应代码是著名的`404`响应代码：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'

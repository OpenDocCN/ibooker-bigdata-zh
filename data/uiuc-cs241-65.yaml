- en: 'File System, Part 1: Introduction'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件系统，第1部分：介绍
- en: Navigation/Terminology
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航/术语
- en: Design a file system! What are your design goals?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计一个文件系统！你的设计目标是什么？
- en: 'The design of a file system is difficult problem because there many high-level
    design goals that we''d like to satisfy. An incomplete list of ideal goals include:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 文件系统的设计是一个困难的问题，因为有许多我们想要满足的高级设计目标。一个不完整的理想目标清单包括：
- en: Reliable and robust (even with hardware failures or incomplete writes due to
    power loss)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可靠和健壮（即使有硬件故障或由于断电而导致不完整的写入）
- en: Access (security) controls
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问（安全）控制
- en: Accounting and quotas
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会计和配额
- en: Indexing and search
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引和搜索
- en: Versioning and backup capabilities
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制和备份功能
- en: Encryption
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加密
- en: Automatic compression
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动压缩
- en: High performance (e.g. Caching in-memory)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高性能（例如内存中的缓存）
- en: Efficient use of storage de-duplication
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效使用存储去重
- en: Not all filesystems natively support all of these goals. For example, many filesystems
    do not automatically compress rarely-used files
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有文件系统都原生支持所有这些目标。例如，许多文件系统不会自动压缩很少使用的文件
- en: What are `.`, `..`, and `...`?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`.`、`..`和`...`是什么？'
- en: 'In standard unix file systems:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在标准的Unix文件系统中：
- en: '`.` represents the current directory'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.`表示当前目录'
- en: '`..` represents the parent directory'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`..`表示父目录'
- en: '`...` is NOT a valid representation of any directory (this not the grandparent
    directory). It *could* however be the name of a file on disk.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`...`不是任何目录的有效表示（这不是爷爷文件夹）。它*可能*是磁盘上的一个文件的名称。'
- en: What are absolute and relative paths?
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绝对路径和相对路径是什么？
- en: Absolute paths are paths that start from the 'root node' of your directory tree.
    Relative paths are paths that start from your current position in the tree.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对路径是从您的目录树的'根节点'开始的路径。相对路径是从树中的当前位置开始的路径。
- en: What are some examples of relative and absolute paths?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相对路径和绝对路径的一些例子是什么？
- en: If you start in your home directory ("~" for short), then `Desktop/cs241` would
    be a relative path. Its absolute path counterpart might be something like `/Users/[yourname]/Desktop/cs241`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从您的主目录开始（简称“~”），那么`Desktop/cs241`将是一个相对路径。它的绝对路径对应物可能是类似于`/Users/[yourname]/Desktop/cs241`的东西。
- en: How do I simplify `a/b/../c/./`?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何简化`a/b/../c/./`？
- en: Remember that `..` means 'parent folder' and that `.` means 'current folder'.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 记住`..`表示'父文件夹'，`.`表示'当前文件夹'。
- en: 'Example: `a/b/../c/./`'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：`a/b/../c/.`
- en: 'Step 1: `cd a` (in a)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步骤1：`cd a`（在a中）
- en: 'Step 2: `cd b` (in a/b)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步骤2：`cd b`（在a/b中）
- en: 'Step 3: `cd ..` (in a, because .. represents ''parent folder'')'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步骤3：`cd ..`（在a中，因为..表示'父文件夹'）
- en: 'Step 4: `cd c` (in a/c)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步骤4：`cd c`（在a/c中）
- en: 'Step 5: `cd .` (in a/c, because . represents ''current folder'')'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步骤5：`cd .`（在a/c中，因为.表示'当前文件夹'）
- en: Thus, this path can be simplified to `a/c`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这条路径可以简化为`a/c`。
- en: So what's a File System?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么什么是文件系统？
- en: A filesystem is how information is organized on disk. Whenever you want to access
    a file, the filesystem dictates how the file is read. Here is a sample image of
    a filesystem.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 文件系统是如何在磁盘上组织信息的。每当您想要访问一个文件时，文件系统规定了文件的读取方式。这是一个文件系统的示例图像。
- en: '![](../Images/d5c232c0012ccdb9ff8c9e79b2429cb9.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d5c232c0012ccdb9ff8c9e79b2429cb9.jpg)'
- en: Whoa that's a lot let's break it down
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，这太多了，让我们分解一下
- en: 'Superblock: This block contains metadata about the filesystem, how large, last
    modified time, a journal, number of inodes and the first inode start, number of
    data block and the first data block start.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超级块：这个块包含关于文件系统的元数据，大小、最后修改时间、日志、索引节点数和第一个索引节点的起始位置、数据块数和第一个数据块的起始位置。
- en: 'Inode: This is the the key abstraction. An inode is a file.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 索引节点：这是关键的抽象。索引节点是一个文件。
- en: 'Disk Blocks: These are where the data is stored. The actual contents of the
    file'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 磁盘块：这是数据存储的地方。文件的实际内容
- en: How does inode store the file contents?
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引节点如何存储文件内容？
- en: '![](../Images/1e5467473b254a4f5bb8d50f0f58ed17.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1e5467473b254a4f5bb8d50f0f58ed17.jpg)'
- en: 'From [Wikipedia](http://en.wikipedia.org/wiki/Inode):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 来自[Wikipedia](http://en.wikipedia.org/wiki/Inode)：
- en: '*In a Unix-style file system, an index node, informally referred to as an inode,
    is a data structure used to represent a filesystem object, which can be one of
    various things including a file or a directory. Each inode stores the attributes
    and disk block location(s) of the filesystem object''s data. Filesystem object
    attributes may include manipulation metadata (e.g. change, access, modify time),
    as well as owner and permission data (e.g. group-id, user-id, permissions).*'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*在类Unix风格的文件系统中，索引节点，非正式地称为inode，是用来表示文件系统对象的数据结构，可以是各种东西，包括文件或目录。每个inode存储文件系统对象数据的属性和磁盘块位置。文件系统对象属性可能包括操作元数据（例如更改、访问、修改时间），以及所有者和权限数据（例如组ID、用户ID、权限）。*'
- en: To read the first few bytes of the file, follow the first indirect block pointer
    to the first indirect block and read the first few bytes, writing is the same
    process. If you want to read the entire file, keep reading direct blocks until
    your size runs out (we will talk about indirect blocks in a bit)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要读取文件的前几个字节，跟随第一个间接块指针到第一个间接块并读取前几个字节，写入是相同的过程。如果要读取整个文件，继续读取直接块，直到大小用完（我们稍后会讨论间接块）
- en: '"All problems in computer science can be solved by another level of indirection."
    - David Wheeler'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “计算机科学中的所有问题都可以通过另一层间接性来解决。”- David Wheeler
- en: Why make disk blocks the same size as memory pages?
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要使磁盘块的大小与内存页面相同？
- en: To support virtual memory, so we can page stuff in and out of memory.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 支持虚拟内存，这样我们就可以将东西分页到内存中和从内存中分页出来。
- en: What information do we want to store for each file?
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们想要为每个文件存储什么信息？
- en: Filename
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件名
- en: File size
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件大小
- en: Time created, last modified, last accessed
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建时间、最后修改时间、最后访问时间
- en: Permissions
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权限
- en: Filepath
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件路径
- en: Checksum
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 校验和
- en: File data (inode)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件数据（索引节点）
- en: 'What are the traditional permissions: user – group – other permissions for
    a file?'
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件的传统权限是什么：用户-组-其他权限？
- en: 'Some common file permissions include:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的文件权限包括：
- en: '755: `rwx r-x r-x`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 755：`rwx r-x r-x`
- en: 'user: `rwx`, group: `r-x`, others: `r-x`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 用户：`rwx`，组：`r-x`，其他人：`r-x`
- en: User can read, write and execute. Group and others can only read and execute.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以读取、写入和执行。组和其他人只能读取和执行。
- en: '644: `rw- r-- r--`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 644：`rw- r-- r--`
- en: 'user: `rw-`, group: `r--`, others: `r--`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 用户：`rw-`，组：`r--`，其他人：`r--`
- en: User can read and write. Group and others can only read.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以读写。组和其他人只能读。
- en: What are the the 3 permission bits for a regular file for each role?
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对于每个角色的常规文件，有3个权限位是什么？
- en: Read (most significant bit)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读（最高有效位）
- en: Write (2nd bit)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 写（第二位）
- en: Execute (least significant bit)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行（最低有效位）
- en: What do "644" "755" mean?
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “644”“755”是什么意思？
- en: These are examples of permissions in octal format (base 8). Each octal digit
    corresponds to a different role (user, group, world).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是八进制格式（基数8）的权限示例。每个八进制数字对应不同的角色（用户、组、全局）。
- en: 'We can read permissions in octal format as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照八进制格式读取权限如下：
- en: 644 - R/W user permissions, R group permissions, R world permissions
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 644 - 用户权限为R/W，组权限为R，全局权限为R
- en: 755 - R/W/X user permissions, R/X group permissions, R/X world permissions
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 755 - 用户权限为R/W/X，组权限为R/X，全局权限为R/X
- en: How many pointers can you store in each indirection table?
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 每个间接表可以存储多少个指针？
- en: As a worked example, suppose we divide the disk into 4KB blocks and we want
    to address up to 2^32 blocks.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设我们将磁盘分成4KB块，并且我们想要寻址多达2^32块。
- en: The maximum disk size is 4KB *2^32 = 16TB (remember 2^10 = 1024)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最大磁盘大小为4KB * 2^32 = 16TB（记住2^10 = 1024）
- en: A disk block can store 4KB / 4B (each pointer needs to be 32 bits) = 1024 pointers.
    Each pointer refers to a 4KB disk block - so you can refer up to 1024*4KB = 4MB
    of data
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一个磁盘块可以存储4KB / 4B（每个指针需要32位）= 1024个指针。每个指针指向一个4KB的磁盘块 - 因此您可以引用多达1024 * 4KB
    = 4MB的数据
- en: For the same disk configuration, a double indirect block stores 1024 pointers
    to 1024 indirection tables. Thus a double-indirect block can refer up to 1024
    * 4MB = 4GB of data.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于相同的磁盘配置，双间接块存储1024个指针指向1024个间接表。因此，双间接块可以引用多达1024 * 4MB = 4GB的数据。
- en: Similarly, a triple indirect block can refer up to 4TB of data.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，三重间接块可以引用多达4TB的数据。
- en: '[Go to File System: Part 2](https://github.com/angrave/SystemProgramming/wiki/File-System,-Part-2:-Files-are-inodes-(everything-else-is-just-data...))'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[转到文件系统：第2部分](https://github.com/angrave/SystemProgramming/wiki/File-System,-Part-2:-Files-are-inodes-(everything-else-is-just-data...))'

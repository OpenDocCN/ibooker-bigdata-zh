- en: 'Pthreads, Part 2: Usage in Practice'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pthreads，第2部分：实际应用
- en: More pthread functions
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多的pthread函数
- en: How do I create a pthread?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何创建一个pthread？
- en: See [Pthreads Part 1](https://github.com/angrave/SystemProgramming/wiki/Pthreads,-Part-1:-Introduction)
    which introduces `pthread_create` and `pthread_join`
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[Pthreads Part 1](https://github.com/angrave/SystemProgramming/wiki/Pthreads,-Part-1:-Introduction)，介绍了
    `pthread_create` 和 `pthread_join`
- en: If I call `pthread_create` twice, how many stacks does my process have?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果我调用 `pthread_create` 两次，我的进程会有多少个堆栈？
- en: Your process will contain three stacks - one for each thread. The first thread
    is created when the process starts, and you created two more. Actually there can
    be more stacks than this, but let's ignore that complication for now. The important
    idea is that each thread requires a stack because the stack contains automatic
    variables and the old CPU PC register, so that it can back to executing the calling
    function after the function is finished.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你的进程将包含三个堆栈 - 每个线程一个。第一个线程在进程启动时创建，然后你创建了另外两个。实际上可能会有更多的堆栈，但现在让我们忽略这个复杂性。重要的想法是每个线程都需要一个堆栈，因为堆栈包含自动变量和旧的CPU
    PC寄存器，以便在函数完成后可以返回执行调用函数。
- en: What is the difference between a full process and a thread?
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个完整进程和一个线程之间的区别是什么？
- en: In addition, unlike processes, threads within the same process can share the
    same global memory (data and heap segments).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，与进程不同，同一进程中的线程可以共享相同的全局内存（数据和堆段）。
- en: What does `pthread_cancel` do?
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`pthread_cancel` 是做什么的？'
- en: Stops a thread. Note the thread may not actually be stopped immediately. For
    example it can be terminated when the thread makes an operating system call (e.g.
    `write`).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 停止一个线程。请注意，线程可能不会立即停止。例如，当线程进行操作系统调用（例如 `write`）时，它可以被终止。
- en: In practice, `pthread_cancel` is rarely used because it does not give a thread
    an opportunity to clean up after itself (for example, it may have opened some
    files). An alternative implementation is to use a boolean (int) variable whose
    value is used to inform other threads that they should finish and clean up.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，`pthread_cancel` 很少被使用，因为它不给线程一个机会在自身之后进行清理（例如，它可能已经打开了一些文件）。另一种实现方法是使用一个布尔（int）变量，其值用于通知其他线程它们应该完成并进行清理。
- en: What is the difference between `exit` and `pthread_exit`?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`exit` 和 `pthread_exit` 之间有什么区别？'
- en: '`exit(42)` exits the entire process and sets the processes exit value. This
    is equivalent to `return 42` in the main method. All threads inside the process
    are stopped.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`exit(42)` 退出整个进程并设置进程的退出值。这相当于在主方法中返回42。进程内的所有线程都会停止。'
- en: '`pthread_exit(void *)` only stops the calling thread i.e. the thread never
    returns after calling `pthread_exit`. The pthread library will automatically finish
    the process if there are no other threads running. `pthread_exit(...)` is equivalent
    to returning from the thread''s function; both finish the thread and also set
    the return value (void *pointer) for the thread.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`pthread_exit(void *)` 只会停止调用线程，即调用 `pthread_exit` 后线程永远不会返回。如果没有其他线程在运行，pthread库将自动完成进程。`pthread_exit(...)`
    等同于从线程函数返回；两者都会完成线程，并为线程设置返回值（void *指针）。'
- en: Calling `pthread_exit` in the the `main` thread is a common way for simple programs
    to ensure that all threads finish. For example, in the following program, the
    `myfunc` threads will probably not have time to get started.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main` 线程中调用 `pthread_exit` 是简单程序确保所有线程完成的常见方法。例如，在下面的程序中，`myfunc` 线程可能没有时间开始。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The next two programs will wait for the new threads to finish-
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个程序将等待新线程完成-
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Alternatively, we join on each thread (i.e. wait for it to finish) before we
    return from main (or call exit).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以在每个线程上进行连接（即等待它完成），然后从主函数返回（或调用 exit）。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note the pthread_exit version creates thread zombies, however this is not a
    long-running processes, so we don't care.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，pthread_exit 版本会创建线程僵尸，但这不是长时间运行的进程，所以我们不在乎。
- en: How can a thread be terminated?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线程如何被终止？
- en: Returning from the thread function
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从线程函数返回
- en: Calling `pthread_exit`
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用 `pthread_exit`
- en: Cancelling the thread with `pthread_cancel`
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `pthread_cancel` 取消线程
- en: Terminating the process (e.g. SIGTERM); exit(); returning from `main`
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终止进程（例如 SIGTERM）；exit()；从 `main` 返回
- en: What is the purpose of pthread_join?
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`pthread_join` 的目的是什么？'
- en: Wait for a thread to finish
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待线程完成
- en: Clean up thread resources
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理线程资源
- en: Grabs the return value of the thread
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取线程的返回值
- en: What happens if you don't call `pthread_join`?
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果不调用 `pthread_join` 会发生什么？
- en: Finished threads will continue to consume resources. Eventually, if enough threads
    are created, `pthread_create` will fail. In practice, this is only an issue for
    long-running processes but is not an issue for simple, short-lived processes as
    all thread resources are automatically freed when the process exits.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 已完成的线程将继续消耗资源。最终，如果创建了足够多的线程，`pthread_create` 将失败。在实践中，这只是长时间运行进程的问题，但对于简单的短暂进程来说并不是问题，因为当进程退出时，所有线程资源都会被自动释放。
- en: Should I use `pthread_exit` or `pthread_join`?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我应该使用 `pthread_exit` 还是 `pthread_join`？
- en: Both `pthread_exit` and `pthread_join` will let the other threads finish on
    their own (even if called in the main thread). However, only `pthread_join` will
    return to you when the specified thread finishes. `pthread_exit` does not wait
    and will immediately end your thread and give you no chance to continue executing.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`pthread_exit` 和 `pthread_join` 都会让其他线程自行完成（即使在主线程中调用）。但是，只有 `pthread_join`
    会在指定线程完成时返回。`pthread_exit` 不会等待，它会立即结束线程，并且不会给你继续执行的机会。'
- en: Can you pass pointers to stack variables from one thread to another?
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你能把指针从一个线程传递给另一个线程的堆栈变量吗？
- en: Yes. However you need to be very careful about the lifetime of stack variables.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。但是你需要非常小心关于堆栈变量的生命周期。
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The above code is invalid because the function `start_threads` will likely return
    before `myfunc` even starts. The function passes the address-of `start`, however
    by the time `myfunc` is executes, `start` is no longer in scope and its address
    will re-used for another variable.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码是无效的，因为函数`start_threads`很可能会在`myfunc`开始之前返回。该函数传递了`start`的地址，但是当`myfunc`执行时，`start`已经不在作用域内，其地址将被重新用于另一个变量。
- en: The following code is valid because the lifetime of the stack variable is longer
    than the background thread.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是有效的，因为栈变量的生命周期比后台线程长。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Intro to Race Conditions
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 竞争条件简介
- en: How can I create ten threads with different starting values.
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我怎样才能创建十个具有不同起始值的线程。
- en: The following code is supposed to start ten threads with values 0,1,2,3,...9
    However, when run prints out `1 7 8 8 8 8 8 8 8 10`! Can you see why?
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码应该启动十个值为0,1,2,3,...9的线程，但运行时打印出`1 7 8 8 8 8 8 8 8 10`！你能看出为什么吗？
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The above code suffers from a `race condition` - the value of i is changing.
    The new threads start later (in the example output the last thread starts after
    the loop has finished).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码存在“竞争条件” - i的值正在改变。新线程稍后启动（在示例输出中，最后一个线程在循环结束后启动）。
- en: 'To overcome this race-condition, we will give each thread a pointer to it''s
    own data area. For example, for each thread we may want to store the id, a starting
    value and an output value:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服这种竞争条件，我们将为每个线程提供一个指向其自己数据区域的指针。例如，对于每个线程，我们可能希望存储id、起始值和输出值：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These can be stored in an array -
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以存储在数组中 -
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And each array element passed to each thread -
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 并且每个数组元素都传递给每个线程 -
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Why are some functions e.g. asctime,getenv, strtok, strerror not thread-safe?
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么有些函数（例如asctime、getenv、strtok、strerror）不是线程安全的？
- en: To answer this, let's look at a simple function that is also not 'thread-safe'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回答这个问题，让我们看一个简单的函数，它也不是“线程安全”的
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the above code the result buffer is stored in global memory. This is good
    - we wouldn''t want to return a pointer to an invalid address on the stack, but
    there''s only one result buffer in the entire memory. If two threads were to use
    it at the same time then one would corrupt the other:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，结果缓冲区存储在全局内存中。这很好 - 我们不希望返回指向栈上无效地址的指针，但整个内存中只有一个结果缓冲区。如果两个线程同时使用它，那么一个线程将破坏另一个：
- en: '| Time | Thread 1 | Thread 2 | Comments |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 时间 | 线程1 | 线程2 | 注释 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 1 | to_m(5 ) |  |  |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 1 | to_m(5 ) |  |  |'
- en: '| 2 |  | to_m(99) | Now both threads will see "Unknown" stored in the result
    buffer |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 2 |  | to_m(99) | 现在两个线程都会看到结果缓冲区中存储的是“未知” |'
- en: What are condition variables, semaphores, mutexes?
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是条件变量、信号量、互斥锁？
- en: These are synchronization locks that are used to prevent race conditions and
    ensure proper synchronization between threads running in the same program. In
    addition, these locks are conceptually identical to the primitives used inside
    the kernel.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是同步锁，用于防止竞争条件，并确保同一程序中运行的线程之间的正确同步。此外，这些锁在概念上与内核内部使用的原语相同。
- en: Are there any advantages of using threads over forking processes?
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用线程而不是分叉进程有什么优势吗？
- en: Yes! Sharing information between threads is easy because threads (of the same
    process) live inside the same virtual memory space. Also, creating a thread is
    significantly faster than creating(forking) a process.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！在线程之间共享信息很容易，因为线程（同一进程的线程）存在于相同的虚拟内存空间中。此外，创建线程比创建（分叉）进程要快得多。
- en: Are there any dis-advantages of using threads over forking processes?
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用线程而不是分叉进程有什么缺点吗？
- en: Yes! No- isolation! As threads live inside the same process, one thread has
    access to the same virtual memory as the other threads. A single thread can terminate
    the entire process (e.g. by trying to read address zero).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！没有隔离！因为线程存在于同一个进程中，一个线程可以访问与其他线程相同的虚拟内存。一个线程可以终止整个进程（例如，尝试读取地址零）。
- en: Can you fork a process with multiple threads?
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您可以使用多个线程分叉一个进程吗？
- en: Yes! However the child process only has a single thread (which is a clone of
    the thread that called `fork`. We can see this as a simple example, where the
    background threads never print out a second message in the child process.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！但是子进程只有一个线程（这是调用`fork`的线程的克隆）。我们可以将其视为一个简单的例子，后台线程在子进程中从不打印出第二条消息。
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In practice, creating threads before forking can lead to unexpected errors because
    (as demonstrated above) the other threads are immediately terminated when forking.
    Another thread might have just lock a mutex (e.g. by calling malloc) and never
    unlock it again. Advanced users may find `pthread_atfork` useful however we suggest
    you usually try to avoid creating threads before forking unless you fully understand
    the limitations and difficulties of this approach.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在分叉之前创建线程可能会导致意外错误，因为（如上所示）其他线程在分叉时立即终止。另一个线程可能刚刚锁定了互斥锁（例如通过调用malloc），并且再也不会解锁。高级用户可能会发现`pthread_atfork`有用，但我们建议您通常尽量避免在分叉之前创建线程，除非您完全了解这种方法的限制和困难。
- en: Are there other reasons where `fork` might be preferable to creating a thread.
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有其他情况下`fork`可能比创建线程更可取吗。
- en: Creating separate processes is useful
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 创建单独的进程很有用
- en: When more security is desired (for example, Chrome browser uses different processes
    for different tabs)
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当需要更多安全性时（例如，Chrome浏览器为不同的标签使用不同的进程）
- en: When running an existing and complete program then a new process is required
    (e.g. starting 'gcc')
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行现有和完整的程序时，需要一个新进程（例如，启动'gcc'）
- en: When you are running into synchronization primitives and each process is operating
    on something in the system
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您遇到同步原语并且每个进程都在系统中操作某些东西时
- en: How can I find out more?
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我怎样才能找到更多信息？
- en: 'See the complete example in the [man page](http://man7.org/linux/man-pages/man3/pthread_create.3.html)
    And the [pthread reference guide](http://man7.org/linux/man-pages/man7/pthreads.7.html)
    ALSO: [Concise third party sample code explaining create, join and exit](http://www.thegeekstuff.com/2012/04/terminate-c-thread/)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在[man页面](http://man7.org/linux/man-pages/man3/pthread_create.3.html)中查看完整示例，并在[pthread参考指南](http://man7.org/linux/man-pages/man7/pthreads.7.html)中查看。另外：[简明的第三方示例代码，解释创建、连接和退出](http://www.thegeekstuff.com/2012/04/terminate-c-thread/)

- en: 'Synchronization, Part 5: Condition Variables'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步，第5部分：条件变量
- en: Intro to Condition Variables
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件变量简介
- en: Warm up
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 热身
- en: Name these properties!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 给这些属性命名！
- en: '"Only one process(/thread) can be in the CS at a time"'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"一次只有一个进程（/线程）可以进入CS"'
- en: '"If waiting, then another process can only enter the CS a finite number of
    times"'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"如果等待，那么另一个进程只能进入CS有限次数"'
- en: '"If no other process is in the CS then the process can immediately enter the
    CS"'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"如果没有其他进程在CS中，那么进程可以立即进入CS"'
- en: 'See [Synchronization, Part 4: The Critical Section Problem](/angrave/SystemProgramming/wiki/Synchronization%2C-Part-4%3A-The-Critical-Section-Problem)
    for answers.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '参见[Synchronization, Part 4: The Critical Section Problem](/angrave/SystemProgramming/wiki/Synchronization%2C-Part-4%3A-The-Critical-Section-Problem)获取答案。'
- en: What are condition variables? How do you use them? What is Spurious Wakeup?
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是条件变量？如何使用它们？什么是虚假唤醒？
- en: Condition variables allow a set of threads to sleep until tickled! You can tickle
    one thread or all threads that are sleeping. If you only wake one thread then
    the operating system will decide which thread to wake up. You don't wake threads
    directly instead you 'signal' the condition variable, which then will wake up
    one (or all) threads that are sleeping inside the condition variable.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件变量允许一组线程睡眠，直到被唤醒！您可以唤醒一个线程或所有正在睡眠的线程。如果只唤醒一个线程，那么操作系统将决定唤醒哪个线程。您不直接唤醒线程，而是'信号'条件变量，然后将唤醒一个（或所有）正在条件变量内睡眠的线程。
- en: Condition variables are used with a mutex and with a loop (to check a condition).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件变量与互斥锁和循环一起使用（用于检查条件）。
- en: Occasionally a waiting thread may appear to wake up for no reason (this is called
    a *spurious wake*)! This is not an issue because you always use `wait` inside
    a loop that tests a condition that must be true to continue.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 偶尔，一个等待的线程可能会出现无缘无故地唤醒（这称为*虚假唤醒*）！这不是问题，因为您总是在循环内使用`wait`，该循环测试必须为真才能继续。
- en: Threads sleeping inside a condition variable are woken up by calling `pthread_cond_broadcast`
    (wake up all) or `pthread_cond_signal` (wake up one). Note despite the function
    name, this has nothing to do with POSIX `signal`s!
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在条件变量中睡眠的线程通过调用`pthread_cond_broadcast`（唤醒所有）或`pthread_cond_signal`（唤醒一个）来唤醒。请注意，尽管函数名中有"signal"，但这与POSIX的`signal`无关！
- en: What does `pthread_cond_wait` do?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`pthread_cond_wait`做什么？'
- en: 'The call `pthread_cond_wait` performs three actions:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`pthread_cond_wait`执行三个动作：
- en: unlock the mutex
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解锁互斥锁
- en: waits (sleeps until `pthread_cond_signal` is called on the same condition variable)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待（睡眠，直到在同一条件变量上调用`pthread_cond_signal`）
- en: Before returning, locks the mutex
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在返回之前，锁定互斥锁
- en: (Advanced topic) Why do Condition Variables also need a mutex?
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: （高级话题）为什么条件变量也需要互斥锁？
- en: Condition variables need a mutex for three reasons. The simplest to understand
    is that it prevents an early wakeup message (`signal` or `broadcast` functions)
    from being 'lost.' Imagine the following sequence of events (time runs down the
    page) where the condition is satisfied _just before _`pthread_cond_wait` is called.
    In this example the wake-up signal is lost!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 条件变量需要互斥锁有三个原因。最容易理解的是，它可以防止早期唤醒消息（`signal`或`broadcast`函数）被“丢失”。想象一下以下事件序列（时间向下运行页面），其中条件在调用`pthread_cond_wait`之前_刚好_满足。在这个例子中，唤醒信号丢失了！
- en: '| Thread 1 | Thread 2 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 线程1 | 线程2 |'
- en: '| --- | --- |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `while( answer < 42) {` |  |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `while( answer < 42) {` |  |'
- en: '|  | `answer++` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '|  | `answer++` |'
- en: '|  | `p_cond_signal(cv)` |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '|  | `p_cond_signal(cv)` |'
- en: '| `p_cond_wait(cv,m)` |  |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `p_cond_wait(cv,m)` |  |'
- en: If both threads had locked a mutex, the signal can not be sent until *after*
    `pthread_cond_wait(cv, m)` is called (which then internally unlocks the mutex)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个线程都锁定了互斥锁，则在调用`pthread_cond_wait(cv, m)`之后（然后在内部解锁互斥锁）之后才能发送信号
- en: A second common reason is that updating the program state (`answer` variable)
    typically requires mutual exclusion - for example multiple threads may be updating
    the value of `answer`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个常见的原因是，更新程序状态（`answer`变量）通常需要互斥锁 - 例如，多个线程可能正在更新`answer`的值。
- en: 'A third and subtle reason is to satisfy real-time scheduling concerns which
    we only outline here: In a time-critical application, the waiting thread with
    the *highest priority* should be allowed to continue first. To satisfy this requirement
    the mutex must also be locked before calling `pthread_cond_signal` or `pthread_cond_broadcast`
    . For the curious, a longer and historical discussion is [here](https://groups.google.com/forum/?hl=ky#!msg/comp.programming.threads/wEUgPq541v8/ZByyyS8acqMJ).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个微妙的原因是满足实时调度的考虑，我们在这里只概述：在时间关键的应用程序中，等待的线程应该允许具有*最高优先级*的线程先继续。为了满足这个要求，调用`pthread_cond_signal`或`pthread_cond_broadcast`之前也必须锁定互斥锁。对于好奇的人，可以在[这里](https://groups.google.com/forum/?hl=ky#!msg/comp.programming.threads/wEUgPq541v8/ZByyyS8acqMJ)找到更长的历史讨论。
- en: Why do spurious wakes exist?
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么会存在虚假唤醒？
- en: For performance. On multi-CPU systems it is possible that a race-condition could
    cause a wake-up (signal) request to be unnoticed. The kernel may not detect this
    lost wake-up call but can detect when it might occur. To avoid the potential lost
    signal the thread is woken up so that the program code can test the condition
    again.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 出于性能考虑。在多CPU系统上，可能会发生竞争条件，导致唤醒（信号）请求被忽略。内核可能不会检测到这个丢失的唤醒调用，但可以检测到可能发生的情况。为了避免潜在的丢失信号，唤醒线程以便程序代码可以再次测试条件。
- en: Example
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 例子
- en: Condition variables are *always* used with a mutex lock.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 条件变量*总是*与互斥锁一起使用。
- en: Before calling *wait*, the mutex lock must be locked and *wait* must be wrapped
    with a loop.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用*wait*之前，必须锁定互斥锁，并且*wait*必须用循环包装。
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Implementing Counting Semphore
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现计数信号量
- en: We can implement a counting semaphore using condition variables.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用条件变量实现计数信号量。
- en: Each semaphore needs a count, a condition variable and a mutex
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个信号量都需要一个计数、一个条件变量和一个互斥锁
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Implement `sem_init` to initialize the mutex and condition variable
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`sem_init`以初始化互斥锁和条件变量
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Our implementation of `sem_post` needs to increment the count. We will also
    wake up any threads sleeping inside the condition variable. Notice we lock and
    unlock the mutex so only one thread can be inside the critical section at a time.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`sem_post`实现需要增加计数。我们还将唤醒任何在条件变量内睡眠的线程。请注意，我们锁定并解锁互斥锁，因此一次只有一个线程可以在临界区内。
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Our implementation of `sem_wait` may need to sleep if the semaphore's count
    is zero. Just like `sem_post` we wrap the critical section using the lock (so
    only one thread can be executing our code at a time). Notice if the thread does
    need to wait then the mutex will be unlocked, allowing another thread to enter
    `sem_post` and waken us from our sleep!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`sem_wait`实现可能需要睡眠，如果信号量的计数为零。就像`sem_post`一样，我们使用锁来包装临界区（这样一次只有一个线程可以执行我们的代码）。请注意，如果线程确实需要等待，那么互斥锁将被解锁，允许另一个线程进入`sem_post`并唤醒我们的睡眠！
- en: Notice that even if a thread is woken up, before it returns from `pthread_cond_wait`
    it must re-acquire the lock, so it will have to wait a little bit more (e.g. until
    sem_post finishes).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，即使线程被唤醒，在从`pthread_cond_wait`返回之前，它必须重新获取锁，因此它将不得不等待一小段时间（例如，直到`sem_post`完成）。
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Wait `sem_post` keeps calling `pthread_cond_signal` won''t that break sem_wait?**
    Answer: No! We can''t get past the loop until the count is non-zero. In practice
    this means `sem_post` would unnecessary call `pthread_cond_signal` even if there
    are no waiting threads. A more efficient implementation would only call `pthread_cond_signal`
    when necessary i.e.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**等待`sem_post`不断调用`pthread_cond_signal`会不会破坏`sem_wait`？** 答案：不会！在计数非零之前，我们无法跳出循环。实际上，这意味着`sem_post`即使没有等待的线程，也会不必要地调用`pthread_cond_signal`。更高效的实现只会在必要时调用`pthread_cond_signal`，即：'
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Other semaphore considerations
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他信号量考虑
- en: Real semaphores implementation include a queue and scheduling concerns to ensure
    fairness and priority e.g. wake up the highest-priority longest sleeping thread.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 真正的信号量实现包括队列和调度问题，以确保公平性和优先级，例如唤醒最高优先级的最长睡眠线程。
- en: Also, an advanced use of `sem_init` allows semaphores to be shared across processes.
    Our implementation only works for threads inside the same process.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另外，`sem_init`的高级用法允许信号量在进程之间共享。我们的实现仅适用于同一进程内的线程。

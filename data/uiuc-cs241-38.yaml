- en: 'Synchronization, Part 8: Ring Buffer Example'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步，第8部分：环形缓冲区示例
- en: What is a ring buffer?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是环形缓冲区？
- en: A ring buffer is a simple, usually fixed-sized, storage mechanism where contiguous
    memory is treated as if it is circular, and two index counters keep track of the
    current beginning and end of the queue. As array indexing is not circular, the
    index counters must wrap around to zero when moved past the end of the array.
    As data is added (enqueued) to the front of the queue or removed (dequeued) from
    tail of the queue, the current items in the buffer form a train that appears to
    circle the track ![RingBuffer](../Images/261964eb034ed12b257f30989e6eb740.jpg)
    A simple (single-threaded) implementation is shown below. Note enqueue and dequeue
    do not guard against underflow or overflow - it's possible to add an item when
    when the queue is full and possible to remove an item when the queue is empty.
    For example if we added 20 integers (1,2,3...) to the queue and did not dequeue
    any items then values `17,18,19,20` would overwrite the `1,2,3,4`. We won't fix
    this problem right now, instead when we create the multi-threaded version we will
    ensure enqueue-ing and dequeue-ing threads are blocked while the ring buffer is
    full or empty respectively.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 环形缓冲区是一种简单的、通常是固定大小的存储机制，其中连续的内存被视为循环的，并且两个索引计数器跟踪队列的当前开始和结束。由于数组索引不是循环的，所以当移动到数组的末尾时，索引计数器必须回绕到零。当数据被添加（入队）到队列的前端或从队列的尾部移除（出队）时，缓冲区中的当前项目形成一个似乎环绕轨道的列车！一个简单的（单线程）实现如下所示。请注意，enqueue和dequeue没有防止下溢或上溢——当队列已满时可能添加一个项目，当队列为空时可能移除一个项目。例如，如果我们向队列中添加了20个整数（1,2,3...），并且没有移除任何项目，那么值`17,18,19,20`将覆盖`1,2,3,4`。我们现在不会解决这个问题，而是在创建多线程版本时，我们将确保在环形缓冲区已满或为空时，enqueue和dequeue线程被阻塞。
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What are gotchas of implementing a Ring Buffer?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现环形缓冲区的注意事项是什么？
- en: 'It''s very tempting to write the enqueue or dequeue method in the following
    compact form (N is the capacity of the buffer e.g. 16):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易写出enqueue或dequeue方法的以下紧凑形式（N是缓冲区的容量，例如16）：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This method would appear to work (pass simple tests etc) but contains a subtle
    bug. With enough enqueue operations (a bit more than two billion) the int value
    of `in` will overflow and become negative! The modulo (or 'remainder') operator
    `%` preserves the sign. Thus you might end up writing into `b[-14]` for example!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法似乎可以工作（通过简单的测试等），但包含一个微妙的错误。通过足够多的enqueue操作（略多于20亿次），`in`的int值将溢出并变为负数！模运算符`％`保留符号。因此，你可能会写入`b[-14]`，例如！
- en: A compact form is correct uses bit masking provided N is 2^x (16,32,64,...)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个紧凑的形式是正确的使用位掩码，提供N是2^x（16,32,64,...）
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This buffer does not yet prevent buffer underflow or overflow. For that, we'll
    turn to our multi-threaded attempt that will block a thread until there is space
    or there is at least one item to remove.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个缓冲区还没有防止缓冲区下溢或上溢。为此，我们将转向我们的多线程尝试，它将阻塞一个线程，直到有空间或至少有一个项目可以移除。
- en: Checking a multi-threaded implementation for correctness (Example 1)
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查多线程实现的正确性（示例1）
- en: The following code is an incorrect implementation. What will happen? Will `enqueue`
    and/or `dequeue` block? Is mutual exclusion satisfied? Can the buffer underflow?
    Can the buffer overflow? For clarity `pthread_mutex` is shortened to `p_m` and
    we assume sem_wait cannot be interrupted.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是一个不正确的实现。会发生什么？`enqueue`和/或`dequeue`会阻塞吗？互斥性是否得到满足？缓冲区会下溢吗？缓冲区会上溢吗？为了清晰起见，`pthread_mutex`缩写为`p_m`，我们假设sem_wait不会被中断。
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Analysis
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析
- en: Before reading on, see how many mistakes you can find. Then determine what would
    happen if threads called the enqueue and dequeue methods.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续阅读之前，看看你能找到多少错误。然后确定如果线程调用enqueue和dequeue方法会发生什么。
- en: The enqueue method waits and posts on the same semaphore (s1) and similarly
    with equeue and (s2) i.e. we decrement the value and then immediately increment
    the value, so by the end of the function the semaphore value is unchanged!
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: enqueue方法在同一个信号量（s1）上等待和发布，equeue也是如此（s2）即我们减少值然后立即增加值，因此在函数结束时，信号量值不变！
- en: The initial value of s1 is 16, so the semaphore will never be reduced to zero
    - enqueue will not block if the ring buffer is full - so overflow is possible.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s1的初始值为16，因此信号量永远不会减少到零——如果环形缓冲区已满，enqueue不会阻塞——因此可能会发生溢出。
- en: The initial value of s2 is zero, so calls to dequeue will always block and never
    return!
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s2的初始值为零，因此调用dequeue将始终阻塞并且永远不会返回！
- en: 'The order of mutex lock and sem_wait will need to be swapped (however this
    example is so broken that this bug has no effect!) ## Checking a multi-threaded
    implementation for correctness (Example 1)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互斥锁和sem_wait的顺序需要交换（但是这个示例是如此破碎，以至于这个错误没有影响！）##检查多线程实现的正确性（示例1）
- en: The following code is an incorrect implementation. What will happen? Will `enqueue`
    and/or `dequeue` block? Is mutual exclusion satisfied? Can the buffer underflow?
    Can the buffer overflow? For clarity `pthread_mutex` is shortened to `p_m` and
    we assume sem_wait cannot be interrupted.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是一个不正确的实现。会发生什么？`enqueue`和/或`dequeue`会阻塞吗？互斥性是否得到满足？缓冲区会下溢吗？缓冲区会上溢吗？为了清晰起见，`pthread_mutex`缩写为`p_m`，我们假设sem_wait不会被中断。
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Analysis
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分析
- en: The initial value of s2 is 0\. Thus enqueue will block on the first call to
    sem_wait even though the buffer is empty!
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s2的初始值为0。因此，在第一次调用sem_wait时，enqueue将阻塞，即使缓冲区为空！
- en: The initial value of s1 is 16\. Thus dequeue will not block on the first call
    to sem_wait even though the buffer is empty - oops Underflow! The dequeue method
    will return invalid data.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: s1的初始值为16。因此，在第一次调用sem_wait时，dequeue不会阻塞，即使缓冲区为空——糟糕，下溢！dequeue方法将返回无效数据。
- en: The code does not satisfy Mutual Exclusion; two threads can modify `in` or `out`
    at the same time! The code appears to use mutex lock. Unfortunately the lock was
    never initialized with `pthread_mutex_init()` or `PTHREAD_MUTEX_INITIALIZER` -
    so the lock may not work (`pthread_mutex_lock` may simply do nothing)
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该代码不满足互斥性；两个线程可以同时修改 `in` 或 `out`！ 该代码似乎使用了互斥锁。不幸的是，该锁从未使用 `pthread_mutex_init()`
    或 `PTHREAD_MUTEX_INITIALIZER` 进行初始化 - 因此该锁可能无效（`pthread_mutex_lock` 可能什么也不做）
- en: Correct implementation of a ring buffer
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正确实现环形缓冲区
- en: The pseudo-code (`pthread_mutex` shortened to `p_m` etc) is shown below.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 伪代码（`pthread_mutex` 缩写为 `p_m` 等）如下所示。
- en: As the mutex lock is stored in global (static) memory it can be initialized
    with `PTHREAD_MUTEX_INITIALIZER`.If we had allocated space for the mutex on the
    heap, then we would have used `pthread_mutex_init(ptr, NULL)`
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于互斥锁存储在全局（静态）内存中，因此可以使用 `PTHREAD_MUTEX_INITIALIZER` 进行初始化。如果我们在堆上为互斥锁分配了空间，那么我们将使用
    `pthread_mutex_init(ptr, NULL)`
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The enqueue method is shown below. Notice:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`enqueue` 方法如下所示。请注意：'
- en: The lock is only held during the critical section (access to the data structure).
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该锁仅在临界区（对数据结构的访问）期间保持。
- en: A complete implementation would need to guard against early returns from `sem_wait`
    due to POSIX signals.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的实现需要防止由于 POSIX 信号而导致 `sem_wait` 提前返回。
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `dequeue` implementation is shown below. Notice the symmetry of the synchronization
    calls to `enqueue`. In both cases the functions first wait if the count of spaces
    or count of items is zero.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`dequeue` 实现如下所示。请注意 `enqueue` 的同步调用的对称性。在两种情况下，如果空间计数或项目计数为零，函数首先会等待。'
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Food for thought
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 思考
- en: What would happen if the order of `pthread_mutex_unlock` and `sem_post` calls
    were swapped?
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `pthread_mutex_unlock` 和 `sem_post` 调用的顺序被交换会发生什么？
- en: What would happen if the order of `sem_wait` and `pthread_mutex_lock` calls
    were swapped?
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `sem_wait` 和 `pthread_mutex_lock` 调用的顺序被交换会发生什么？

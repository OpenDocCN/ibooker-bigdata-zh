- en: Appendix A. Supplemental Code References
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A. 补充代码引用
- en: Throughout the book we’ve included references to this appendix. Here we’ve included
    important content (and listed the sections where this material can be found).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中我们包含了对本附录的引用。这里我们包括了重要内容（并列出了可以找到这些材料的章节）。
- en: Preface
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: Formatting
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 格式化
- en: 'The following `ggplot2` theme was used to format all plots in this book:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中用于格式化所有图形的`ggplot2`主题如下：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can activate this with the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下方式激活此功能：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Chapter 1
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章
- en: The World’s Capacity to Store Information
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 世界的信息存储能力
- en: 'The following script was used to generate [Figure 1-1](ch01.html#intro-store-capacity):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本用于生成[图 1-1](ch01.html#intro-store-capacity)：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Daily Downloads of CRAN Packages
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CRAN软件包的每日下载
- en: '[Figure 1-6](ch01.html#intro-cran-downloads) was generated through the following
    code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-6](ch01.html#intro-cran-downloads)是通过以下代码生成的：'
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Chapter 2
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章
- en: Prerequisites
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: Installing R
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装R
- en: Download the [R installer](https://r-project.org/) (see [Figure A-1](#appendix-r-download))
    and launch it for your Windows, Mac, or Linux platform.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下载[R安装程序](https://r-project.org/)（参见[图 A-1](#appendix-r-download)），并在Windows、Mac或Linux平台上启动它。
- en: '![The R Project for Statistical Computing](assets/mswr_aa01.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![统计计算的R项目](assets/mswr_aa01.png)'
- en: Figure A-1\. The R Project for Statistical Computing
  id: totrans-20
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 A-1\. 统计计算的R项目
- en: Installing Java
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Java
- en: Download the [Java installer](https://java.com/download) (see [Figure A-2](#appendix-java-download))
    and launch it for your Windows, Mac, or Linux platform.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下载[Java安装程序](https://java.com/download)（参见[图 A-2](#appendix-java-download)），并在Windows、Mac或Linux平台上启动它。
- en: '![Java Download Page](assets/mswr_aa02.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Java 下载页面](assets/mswr_aa02.png)'
- en: Figure A-2\. Java download page
  id: totrans-24
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 A-2\. Java 下载页面
- en: Starting with Spark 2.1, Java 8 is required; however, previous versions of Spark
    support Java 7\. Regardless, we recommend installing Java Runtime Engine 8 (JRE
    8).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从Spark 2.1开始，需要Java 8；然而，Spark的早期版本支持Java 7。不过，我们建议安装Java Runtime Engine 8（JRE
    8）。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: If you’re an advanced reader who is already using the Java Development Kit (JDK),
    note that JDK 9+ is currently unsupported. So you will need to downgrade to JDK
    8 by uninstalling JDK 9+ or by setting `JAVA_HOME` appropiately.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是一个已经在使用Java开发工具包（JDK）的高级读者，请注意当前不支持JDK 9+。因此，您需要通过卸载JDK 9+或适当设置`JAVA_HOME`来降级到JDK
    8。
- en: Installing RStudio
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装RStudio
- en: While installing RStudio is not strictly required to work with Spark with R,
    it will make you much more productive and therefore, we recommend it. Download
    [the RStudio installer](https://www.rstudio.com/download) (see [Figure A-3](#appendix-rstudio-download)),
    then launch it for your Windows, Mac, or Linux platform.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然安装RStudio不是与R一起使用Spark的严格要求，但它将使您更加高效，因此我们建议您安装它。下载[RStudio安装程序](https://www.rstudio.com/download)（参见[图
    A-3](#appendix-rstudio-download)），然后在Windows、Mac或Linux平台上启动它。
- en: '![RStudio Downloads Page](assets/mswr_aa03.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![RStudio 下载页面](assets/mswr_aa03.png)'
- en: Figure A-3\. RStudio download page
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 A-3\. RStudio 下载页面
- en: After launching RStudio, you can use its console panel to execute the code provided
    in this chapter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 启动RStudio后，您可以使用其控制台面板执行本章提供的代码。
- en: Using RStudio
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用RStudio
- en: 'If you’re unfamiliar with RStudio (see [Figure A-4](#appendix-rstudio-overview)),
    you should make note of the following panes:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对RStudio不熟悉（见[图 A-4](#appendix-rstudio-overview)），您应该注意以下面板：
- en: Console
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台
- en: You can use a standalone R console to execute all the code presented in this
    book.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用独立的R控制台来执行本书中呈现的所有代码。
- en: Packages
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 软件包
- en: This pane allows you to install `sparklyr` with ease, check its version, navigate
    to the help contents, and more.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 该面板允许您轻松安装`sparklyr`，检查其版本，浏览帮助内容等。
- en: Connections
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 连接
- en: This pane allows you to connect to Spark, manage your active connection, and
    view the available datasets.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 该面板允许您连接到Spark，管理您的活动连接并查看可用数据集。
- en: '![RStudio Overview](assets/mswr_aa04.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![RStudio 概览](assets/mswr_aa04.png)'
- en: Figure A-4\. RStudio overview
  id: totrans-42
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 A-4\. RStudio 概述
- en: Chapter 3
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章
- en: Hive Functions
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Hive 函数
- en: '| Name | Description |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `size(Map<K.V>)` | Returns the number of elements in the map type. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `size(Map<K.V>)` | 返回映射类型中的元素数量。 |'
- en: '| `size(Array)` | Returns the number of elements in the array type. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `size(Array)` | 返回数组类型中的元素数量。 |'
- en: '| `map_keys(Map<K.V>)` | Returns an unordered array containing the keys of
    the input map. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `map_keys(Map<K.V>)` | 返回包含输入映射键的无序数组。 |'
- en: '| `map_values(Map<K.V>)` | Returns an unordered array containing the values
    of the input map. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `map_values(Map<K.V>)` | 返回包含输入映射值的无序数组。 |'
- en: '| `array_contains(Array, value)` | Returns `TRUE` if the array contains a value.
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `array_contains(Array, value)` | 如果数组包含某个值，则返回`TRUE`。 |'
- en: '| `sort_array(Array)` | Sorts the input array in ascending order according
    to the natural ordering of the array elements and returns it. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `sort_array(Array)` | 按照数组元素的自然顺序升序排序并返回数组。 |'
- en: '| `binary(string or binary)` | Casts the parameter into a binary. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `binary(string or binary)` | 将参数转换为二进制。 |'
- en: '| `cast(expr as a given type)` | Converts the results of the expression `expr`
    to the given type. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `cast(expr as a given type)` | 将表达式`expr`的结果转换为给定类型。 |'
- en: '| `from_unixtime(bigint unixtime[, string format])` | Converts the number of
    seconds from Unix epoch (1970-01-01 00:00:00 UTC) to a string. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `from_unixtime(bigint unixtime[, string format])` | 将Unix纪元（1970-01-01 00:00:00
    UTC）的秒数转换为字符串。 |'
- en: '| `unix_timestamp()` | Gets current Unix timestamp in seconds. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `unix_timestamp()` | 获取当前时间的Unix时间戳（秒）。 |'
- en: '| `unix_timestamp(string date)` | Converts a time string in the format yyyy-MM-dd
    HH:mm:ss to a Unix timestamp (in seconds). |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `unix_timestamp(string date)` | 将格式为yyyy-MM-dd HH:mm:ss的时间字符串转换为Unix时间戳（秒）。
    |'
- en: '| `to_date(string timestamp)` | Returns the date part of a timestamp string.
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `to_date(string timestamp)` | 返回时间戳字符串的日期部分。 |'
- en: '| `year(string date)` | Returns the year part of a date. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `year(string date)` | 返回日期的年份部分。 |'
- en: '| `quarter(date/timestamp/string)` | Returns the quarter of the year for a
    date. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `quarter(date/timestamp/string)` | 返回日期的季度。 |'
- en: '| `month(string date)` | Returns the month part of a date or a timestamp string.
    |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `month(string date)` | 返回日期或时间戳字符串的月份部分。 |'
- en: '| `day(string date) dayofmonth(date)` | Returns the day part of a date or a
    timestamp string. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `day(string date) dayofmonth(date)` | 返回日期或时间戳字符串的日部分。 |'
- en: '| `hour(string date)` | Returns the hour of the timestamp. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `hour(string date)` | 返回时间戳的小时数。 |'
- en: '| `minute(string date)` | Returns the minute of the timestamp. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `minute(string date)` | 返回时间戳的分钟数。 |'
- en: '| `second(string date)` | Returns the second of the timestamp. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `second(string date)` | 返回时间戳的秒数。 |'
- en: '| `weekofyear(string date)` | Returns the week number of a timestamp string.
    |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `weekofyear(string date)` | 返回时间戳字符串的周数。 |'
- en: '| `extract(field FROM source)` | Retrieve fields such as days or hours from
    source. Source must be a date, timestamp, interval, or string that can be converted
    into either a date or timestamp. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `extract(field FROM source)` | 从源中检索诸如天数或小时的字段。源必须是可以转换为日期、时间戳、间隔或字符串的日期或时间戳。
    |'
- en: '| `datediff(string enddate, string startdate)` | Returns the number of days
    from `startdate` to `enddate`. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `datediff(string enddate, string startdate)` | 返回从`startdate`到`enddate`的天数。
    |'
- en: '| `date_add(date/timestamp/string startdate, tinyint/smallint/int days)` |
    Adds a number of days to `startdate`. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `date_add(date/timestamp/string startdate, tinyint/smallint/int days)` |
    将一定天数添加到`startdate`。 |'
- en: '| `date_sub(date/timestamp/string startdate, tinyint/smallint/int days)` |
    Subtracts a number of days to `startdate`. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `date_sub(date/timestamp/string startdate, tinyint/smallint/int days)` |
    从`startdate`减去一定天数。 |'
- en: '| `from_utc_timestamp(\{any primitive type} ts, string timezone)` | Converts
    a timestamp in UTC to a given time zone. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `from_utc_timestamp(\{any primitive type} ts, string timezone)` | 将UTC时间戳转换为指定时区的时间戳。
    |'
- en: '| `to_utc_timestamp(\{any primitive type} ts, string timezone)` | Converts
    a timestamp in a given time zone to UTC. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `to_utc_timestamp(\{any primitive type} ts, string timezone)` | 将指定时区的时间戳转换为UTC时间戳。
    |'
- en: '| `current_date` | Returns the current date. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `current_date` | 返回当前日期。 |'
- en: '| `current_timestamp` | Returns the current timestamp. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `current_timestamp` | 返回当前时间戳。 |'
- en: '| `add_months(string start_date, int num_months, output_date_format)` | Returns
    the date that is `num_months` after `start_date`. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `add_months(string start_date, int num_months, output_date_format)` | 返回`start_date`后`num_months`个月的日期。
    |'
- en: '| `last_day(string date)` | Returns the last day of the month to which the
    date belongs. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `last_day(string date)` | 返回日期所属月份的最后一天。 |'
- en: '| `next_day(string start_date, string day_of_week)` | Returns the first date
    that is later than `start_date` and named as `day_of_week`. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `next_day(string start_date, string day_of_week)` | 返回晚于`start_date`且命名为`day_of_week`的第一个日期。
    |'
- en: '| `trunc(string date, string format)` | Returns date truncated to the unit
    specified by the format. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `trunc(string date, string format)` | 返回按指定格式截断的日期。 |'
- en: '| `months_between(date1, date2)` | Returns number of months between dates `date1`
    and `date2`. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `months_between(date1, date2)` | 返回日期`date1`和`date2`之间的月数。 |'
- en: '| `date_format(date/timestamp/string ts, string fmt)` | Converts a date/timestamp/string
    to a value of `string` in the format specified by the date format `fmt`. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `date_format(date/timestamp/string ts, string fmt)` | 将日期/时间戳/字符串`ts`转换为指定日期格式`fmt`的字符串值。
    |'
- en: '| `if(boolean testCondition, T valueTrue, T valueFalseOrNull)` | Returns `valueTrue`
    when `testCondition` is true; returns `valueFalseOrNull` otherwise. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `if(boolean testCondition, T valueTrue, T valueFalseOrNull)` | 当`testCondition`为真时返回`valueTrue`；否则返回`valueFalseOrNull`。
    |'
- en: '| `isnull( a )` | Returns `true` if `a` is NULL and `false` otherwise. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `isnull( a )` | 如果`a`为NULL则返回`true`，否则返回`false`。 |'
- en: '| `isnotnull( a )` | Returns `true` if `a` is not `NULL` and `false` otherwise.
    |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `isnotnull( a )` | 如果`a`不为NULL则返回`true`，否则返回`false`。 |'
- en: '| `nvl(T value, T default_value)` | Returns default value if value is `NULL`;
    else returns `value`. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `nvl(T value, T default_value)` | 如果`value`为`NULL`，则返回默认值`default_value`；否则返回`value`。
    |'
- en: '| `COALESCE(T v1, T v2, …)` | Returns the first `v` that is not `NULL`, or
    `NULL` if all `v`s are `NULL`. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `COALESCE(T v1, T v2, …)` | 返回第一个不为NULL的`v`，如果所有的`v`都为NULL则返回NULL。 |'
- en: '| `CASE a WHEN b THEN c [WHEN d THEN e]* [ELSE f] END` | When `a` = `b`, returns
    `c`; when `a` = `d`, returns `e`; else returns `f`. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `CASE a WHEN b THEN c [WHEN d THEN e]* [ELSE f] END` | 当`a`等于`b`时返回`c`；当`a`等于`d`时返回`e`；否则返回`f`。
    |'
- en: '| `nullif( a, b )` | Returns `NULL` if `a` = `b`; otherwise returns `a`. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `nullif( a, b )` | 如果`a`等于`b`，则返回`NULL`；否则返回`a`。 |'
- en: '| `assert_true(boolean condition)` | Throw an exception if `condition` is not
    true; otherwise return `NULL`. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `assert_true(boolean condition)` | 如果`condition`不为真则抛出异常；否则返回`NULL`。 |'
- en: '| `ascii(string str)` | Returns the numeric value of the first character of
    `str`. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `ascii(string str)` | 返回字符串`str`的第一个字符的数值值。 |'
- en: '| `base64(binary bin)` | Converts the argument from binary to a base64 string.
    |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `base64(binary bin)` | 将参数从二进制转换为base64字符串。 |'
- en: '| `character_length(string str)` | Returns the number of UTF-8 characters contained
    in `str`. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `character_length(string str)` | 返回字符串`str`中包含的UTF-8字符数。 |'
- en: '| `chr(bigint double A)` |  |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `chr(bigint double A)` |  |'
- en: '| `concat(stringǀbinary A, stringǀbinary B…)` | Returns the string or bytes
    resulting from concatenating the strings or bytes passed in as parameters in order.
    For example, concat(`foo`, `bar`) results in `foobar`. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `concat(stringǀbinary A, stringǀbinary B…)` | 返回按顺序传递的参数连接而成的字符串或字节。例如，concat(`foo`,
    `bar`)结果为`foobar`。 |'
- en: '| `context_ngrams(array<array>, array, int K, int pf)` | Returns the top-k
    contextual N-grams from a set of tokenized sentences. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `context_ngrams(array<array>, array, int K, int pf)` | 返回从一组分词句子中提取的前K个上下文N-gram。
    |'
- en: '| `concat_ws(string SEP, string A, string B…)` | Like `concat()`, but with
    custom separator `SEP`. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `concat_ws(string SEP, string A, string B…)` | 类似于`concat()`，但使用自定义分隔符`SEP`。
    |'
- en: '| `decode(binary bin, string charset)` | Decodes the first argument into a
    string using the provided character set (one of US-ASCII, ISO-8859-1, UTF-8, UTF-16BE,
    UTF-16LE, or UTF-16). If either argument is `NULL`, the result will also be `NULL`.
    |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `decode(binary bin, string charset)` | 使用提供的字符集（US-ASCII、ISO-8859-1、UTF-8、UTF-16BE、UTF-16LE或UTF-16）将第一个参数解码为字符串。如果任一参数为`NULL`，则结果也为`NULL`。
    |'
- en: '| `elt(N int,str1 string,str2 string,str3 string,…)` | Return string at index
    number; `elt(2,hello,world)` returns `world`. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `elt(N int,str1 string,str2 string,str3 string,…)` | 返回索引号上的字符串；`elt(2,hello,world)`返回`world`。
    |'
- en: '| `encode(string src, string charset)` | Encodes the first argument into a
    BINARY using the provided character set (one of US-ASCII, ISO-8859-1, UTF-8, UTF-16BE,
    UTF-16LE, UTF-16). |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `encode(string src, string charset)` | 使用提供的字符集（US-ASCII、ISO-8859-1、UTF-8、UTF-16BE、UTF-16LE或UTF-16）将第一个参数编码为BINARY。
    |'
- en: '| `field(val T,val1 T,val2 T,val3 T,…)` | Returns the index of `val` in the
    `val1,val2,val3,…` list or `0` if not found. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `field(val T,val1 T,val2 T,val3 T,…)` | 返回`val`在`val1,val2,val3,…`列表中的索引，如果未找到则返回`0`。
    |'
- en: '| `find_in_set(string str, string strList)` | Returns the first occurance of
    `str` in `strList` where `strList` is a comma-delimited string. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `find_in_set(string str, string strList)` | 返回`strList`中第一次出现的`str`，其中`strList`是逗号分隔的字符串。
    |'
- en: '| `format_number(number x, int d)` | Formats the number `x` to a format like
    `''#,###,###.##''`, rounded to `d` decimal places, and returns the result as a
    string. If `d` is `0`, the result has no decimal point or fractional part. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `format_number(number x, int d)` | 将数字`x`格式化为类似`''#,###,###.##''`的格式，四舍五入到`d`位小数，并将结果作为字符串返回。如果`d`为`0`，则结果没有小数点或小数部分。
    |'
- en: '| `get_json_object(string json_string, string path)` | Extracts JSON object
    from a JSON string based on JSON path specified, and returns JSON string of the
    extracted JSON object. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `get_json_object(string json_string, string path)` | 根据指定的JSON路径从JSON字符串`json_string`中提取JSON对象，并返回提取的JSON对象的JSON字符串。
    |'
- en: '| `in_file(string str, string filename)` | Returns `true` if the string `str`
    appears as an entire line in filename. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `in_file(string str, string filename)` | 如果字符串 `str` 作为文件 `filename` 中的整行出现，则返回
    `true`。 |'
- en: '| `instr(string str, string substr)` | Returns the position of the first occurrence
    of `substr` in `str`. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `instr(string str, string substr)` | 返回字符串 `str` 中第一次出现 `substr` 的位置。 |'
- en: '| `length(string A)` | Returns the length of the string. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `length(string A)` | 返回字符串 `A` 的长度。 |'
- en: '| `locate(string substr, string str[, int pos])` | Returns the position of
    the first occurrence of `substr` in `str` after position `pos`. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `locate(string substr, string str[, int pos])` | 返回从位置 `pos` 开始，在字符串 `str`
    中第一次出现 `substr` 的位置。 |'
- en: '| `lower(string A) lcase(string A)` | Returns the string resulting from converting
    all characters of B to lowercase. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `lower(string A) lcase(string A)` | 返回将字符串 `A` 中所有字符转换为小写的结果。 |'
- en: '| `lpad(string str, int len, string pad)` | Returns `str`, left-padded with
    pad to a length of `len`. If `str` is longer than `len`, the return value is shortened
    to `len` characters. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `lpad(string str, int len, string pad)` | 返回左填充 `pad` 到长度 `len` 的字符串 `str`。如果
    `str` 长度超过 `len`，则返回值被截短为 `len` 字符。 |'
- en: '| `ltrim(string A)` | Returns the string resulting from trimming spaces from
    the beginning (left side) of A. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `ltrim(string A)` | 返回修剪自字符串 `A` 开头（左侧）空格后的结果字符串。 |'
- en: '| `ngrams(array<array>, int N, int K, int pf)` | Returns the top-k N-grams
    from a set of tokenized sentences, such as those returned by the `sentences()`
    UDAF. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `ngrams(array<array>, int N, int K, int pf)` | 从一组标记化的句子（如 `sentences()`
    返回的句子）中返回前 k 个 N 元组。 |'
- en: '| `octet_length(string str)` | Returns the number of octets required to hold
    the string str in UTF-8 encoding. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `octet_length(string str)` | 返回用于存储字符串 `str` 的 UTF-8 编码所需的八位组数。 |'
- en: '| `parse_url(string urlString, string partToExtract [, string keyToExtract])`
    | Returns the specified part from the URL. Valid values for `partToExtract` include
    `HOST`, `PATH`, `QUERY`, `REF`, `PROTOCOL`, `AUTHORITY`, `FILE`, and `USERINFO`.
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `parse_url(string urlString, string partToExtract [, string keyToExtract])`
    | 返回 URL 中指定部分的内容。`partToExtract` 的有效值包括 `HOST`、`PATH`、`QUERY`、`REF`、`PROTOCOL`、`AUTHORITY`、`FILE`
    和 `USERINFO`。 |'
- en: '| `printf(String format, Obj… args)` | Returns the input formatted according
    do `printf`-style format strings. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `printf(String format, Obj… args)` | 根据 `printf` 样式的格式字符串返回格式化后的输入。 |'
- en: '| `regexp_extract(string subject, string pattern, int index)` | Returns the
    string extracted using the pattern. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `regexp_extract(string subject, string pattern, int index)` | 返回使用模式 `pattern`
    提取的字符串。 |'
- en: '| `regexp_replace(string INITIAL_STRING, string PATTERN, string REPLACEMENT)`
    | Returns the string resulting from replacing all substrings in `INITIAL_STRING`
    that match the Java regular expression syntax defined in `PATTERN` with instances
    of `REPLACEMENT`. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `regexp_replace(string INITIAL_STRING, string PATTERN, string REPLACEMENT)`
    | 返回用 `REPLACEMENT` 替换 `INITIAL_STRING` 中所有匹配 `PATTERN` 的子字符串的结果字符串。 |'
- en: '| `repeat(string str, int n)` | Repeats `str` `n` times. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `repeat(string str, int n)` | 将字符串 `str` 重复 `n` 次。 |'
- en: '| `replace(string A, string OLD, string NEW)` | Returns the string A with all
    non-overlapping occurrences of `OLD` replaced with `NEW`. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `replace(string A, string OLD, string NEW)` | 返回将字符串 `A` 中所有非重叠出现的 `OLD`
    替换为 `NEW` 后的结果。 |'
- en: '| `reverse(string A)` | Returns the reversed string. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `reverse(string A)` | 返回反转后的字符串。 |'
- en: '| `rpad(string str, int len, string pad)` | Returns `str`, right-padded with
    pad to a length of `len`. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `rpad(string str, int len, string pad)` | 返回右填充 `pad` 到长度 `len` 的字符串 `str`。
    |'
- en: '| `rtrim(string A)` | Returns the string resulting from trimming spaces from
    the end (right side) of A. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `rtrim(string A)` | 返回修剪自字符串 `A` 末尾（右侧）空格后的结果字符串。 |'
- en: '| `sentences(string str, string lang, string locale)` | Tokenizes a string
    of natural language text into words and sentences, where each sentence is broken
    at the appropriate sentence boundary and returned as an array of words. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `sentences(string str, string lang, string locale)` | 将自然语言文本字符串分词成单词和句子，每个句子在适当的句子边界处断开，并作为单词数组返回。
    |'
- en: '| `space(int n)` | Returns a string of `n` spaces. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `space(int n)` | 返回包含 `n` 个空格的字符串。 |'
- en: '| `split(string str, string pat)` | Splits `str` around `pat` (`pat` is a regular
    expression). |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `split(string str, string pat)` | 使用正则表达式 `pat` 拆分字符串 `str`。 |'
- en: '| `str_to_map(text[, delimiter1, delimiter2])` | Splits text into key-value
    pairs using two delimiters. `delimiter1` separates text into key-value pairs,
    and `delimiter2` splits each key-value pair. Default delimiters are `,` for `delimiter1`
    and `:` for `delimiter2`. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `str_to_map(text[, delimiter1, delimiter2])` | 使用两个分隔符将文本拆分为键值对。`delimiter1`
    用于分隔键值对，`delimiter2` 用于分隔每个键值对中的键和值。默认分隔符为 `,`（对于 `delimiter1`）和 `:`（对于 `delimiter2`）。
    |'
- en: '| `substr(string binary A, int start)` | Returns the substring or slice of
    the byte array of A starting from start position till the end of string A. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '`substr(string binary A, int start)` | 返回从A的start位置开始直到字符串A的末尾的子字符串或切片。'
- en: '| `substring_index(string A, string delim, int count)` | Returns the substring
    from string A before `count` occurrences of the delimiter `delim`. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '`substring_index(string A, string delim, int count)` | 返回字符串A中第`count`个定界符`delim`之前的子字符串。'
- en: '| `translate(stringǀcharǀvarchar input, stringǀcharǀvarchar from, stringǀcharǀvarchar
    to)` | Translates the input string by replacing the characters present in the
    `from` string with the corresponding characters in the `to` string. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '`translate(stringǀcharǀvarchar input, stringǀcharǀvarchar from, stringǀcharǀvarchar
    to)` | 使用`from`字符串中的字符替换`to`字符串中的对应字符来翻译输入字符串。'
- en: '| `trim(string A)` | Returns the string resulting from trimming spaces from
    both ends of A. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '`trim(string A)` | 返回从A两端去除空格后的字符串。'
- en: '| `unbase64(string str)` | Converts the argument from a base64 string to BINARY.
    |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '`unbase64(string str)` | 将base64字符串转换为二进制。'
- en: '| `upper(string A) ucase(string A)` | Returns the string resulting from converting
    all characters of A to uppercase. For example, `upper(*fOoBaR*)` results in FOOBAR’\.
    |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '`upper(string A) ucase(string A)` | 返回将A的所有字符转换为大写的字符串。例如，`upper(*fOoBaR*)`
    结果为 FOOBAR。'
- en: '| `initcap(string A)` | Returns string, with the first letter of each word
    in uppercase, and all other letters in lowercase. Words are delimited by whitespace.
    |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '`initcap(string A)` | 返回字符串，每个单词的首字母大写，其他字母小写。单词由空格分隔。'
- en: '| `levenshtein(string A, string B)` | Returns the Levenshtein distance between
    two strings. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '`levenshtein(string A, string B)` | 返回两个字符串之间的Levenshtein距离。'
- en: '| `soundex(string A)` | Returns `soundex` code of the string. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '`soundex(string A)` | 返回字符串的`soundex`编码。'
- en: '| `mask(string str[, string upper[, string lower[, string number]]])` | Returns
    a masked version of str. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '`mask(string str[, string upper[, string lower[, string number]]])` | 返回`str`的掩码版本。'
- en: '| `mask_first_n(string str[, int n])` | Returns a masked version of `str` with
    the first `n` values masked. `mask_first_n("1234-5678-8765-4321", 4)` results
    in nnnn-5678-8765-4321. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '`mask_first_n(string str[, int n])` | 返回`str`的掩码版本，首个`n`个值掩码。`mask_first_n("1234-5678-8765-4321",
    4)` 结果为 nnnn-5678-8765-4321。'
- en: '| `mask_last_n(string str[, int n])` | Returns a masked version of `str` with
    the last `n` values masked. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '`mask_last_n(string str[, int n])` | 返回`str`的掩码版本，最后`n`个值掩码。'
- en: '| `mask_show_first_n(string str[, int n])` | Returns a masked version of `str`,
    showing the first `n` characters unmasked. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '`mask_show_first_n(string str[, int n])` | 返回`str`的掩码版本，显示前`n`个字符不掩码。'
- en: '| `mask_show_last_n(string str[, int n])` | Returns a masked version of `str`,
    showing the last `n` characters unmasked. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '`mask_show_last_n(string str[, int n])` | 返回`str`的掩码版本，显示最后`n`个字符不掩码。'
- en: '| `mask_hash(stringǀcharǀvarchar str)` | Returns a hashed value based on `str`.
    |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '`mask_hash(stringǀcharǀvarchar str)` | 基于`str`返回一个哈希值。'
- en: '| `java_method(class, method[, arg1[, arg2..]])` | Synonym for reflect. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '`java_method(class, method[, arg1[, arg2..]])` | 反射的同义词。'
- en: '| `reflect(class, method[, arg1[, arg2..]])` | Calls a Java method by matching
    the argument signature, using reflection. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '`reflect(class, method[, arg1[, arg2..]])` | 使用反射调用Java方法，匹配参数签名。'
- en: '| `hash(a1[, a2…])` | Returns a hash value of the arguments. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '`hash(a1[, a2…])` | 返回参数的哈希值。'
- en: '| `current_user()` | Returns current username from the configured authenticator
    manager. |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '`current_user()` | 从配置的认证管理器返回当前用户名。'
- en: '| `logged_in_user()` | Returns current username from the session state. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '`logged_in_user()` | 从会话状态返回当前用户名。'
- en: '| `current_database()` | Returns current database name. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '`current_database()` | 返回当前数据库名称。'
- en: '| `md5(string/binary`) | Calculates an MD5 128-bit checksum for the string
    or binary. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '`md5(string/binary)` | 计算字符串或二进制的MD5 128位校验和。'
- en: '| `sha1(string/binary) sha(string/binary)` | Calculates the SHA-1 digest for
    string or binary and returns the value as a hex string. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '`sha1(string/binary) sha(string/binary)` | 计算字符串或二进制的SHA-1摘要，并以十六进制字符串返回其值。'
- en: '| `crc32(string/binary)` | Computes a cyclic redundancy check value for string
    or binary argument and returns bigint value. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '`crc32(string/binary)` | 计算字符串或二进制参数的循环冗余校验值，并返回bigint值。'
- en: '| `sha2(string/binary, int)` | Calculates the SHA-2 family of hash functions
    (SHA-224, SHA-256, SHA-384, and SHA-512). |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '`sha2(string/binary, int)` | 计算SHA-2系列的哈希函数（SHA-224，SHA-256，SHA-384和SHA-512）。'
- en: '| `aes_encrypt(input string/binary, key string/binary)` | Encrypt input using
    AES. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '`aes_encrypt(input string/binary, key string/binary)` | 使用AES加密输入。'
- en: '| `aes_decrypt(input binary, key string/binary)` | Decrypt input using AES.
    |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `aes_decrypt(input binary, key string/binary)` | 使用AES解密输入。 |'
- en: '| `version()` | Returns the Hive version. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `version()` | 返回Hive的版本。 |'
- en: '| `count(expr)` | Returns the total number of retrieved rows. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `count(expr)` | 返回检索行的总数。 |'
- en: '| `sum(col)`, `sum(DISTINCT col)` | Returns the sum of the elements in the
    group or the sum of the distinct values of the column in the group. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `sum(col)`, `sum(DISTINCT col)` | 返回组中元素的总和或组中列的唯一值的总和。 |'
- en: '| `avg(col)`, `avg(DISTINCT col)` | Returns the average of the elements in
    the group or the average of the distinct values of the column in the group. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `avg(col)`, `avg(DISTINCT col)` | 返回组中元素的平均值或组中列唯一值的平均值。 |'
- en: '| `min(col)` | Returns the minimum value of the column in the group. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `min(col)` | 返回组中列的最小值。 |'
- en: '| `max(col)` | Returns the maximum value of the column in the group. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `max(col)` | 返回组中列的最大值。 |'
- en: '| `variance(col), var_pop(col)` | Returns the variance of a numeric column
    in the group. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `variance(col), var_pop(col)` | 返回组中数值列的方差。 |'
- en: '| `var_samp(col)` | Returns the unbiased sample variance of a numeric column
    in the group. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `var_samp(col)` | 返回组中数值列的无偏样本方差。 |'
- en: '| `stddev_pop(col)` | Returns the standard deviation of a numeric column in
    the group. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `stddev_pop(col)` | 返回组中数值列的标准差。 |'
- en: '| `stddev_samp(col)` | Returns the unbiased sample standard deviation of a
    numeric column in the group. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `stddev_samp(col)` | 返回组中数值列的无偏样本标准差。 |'
- en: '| `covar_pop(col1, col2)` | Returns the population covariance of a pair of
    numeric columns in the group. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `covar_pop(col1, col2)` | 返回组中一对数值列的总体协方差。 |'
- en: '| `covar_samp(col1, col2)` | Returns the sample covariance of a pair of a numeric
    columns in the group. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `covar_samp(col1, col2)` | 返回组中一对数值列的样本协方差。 |'
- en: '| `corr(col1, col2)` | Returns the Pearson coefficient of correlation of a
    pair of a numeric columns in the group. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `corr(col1, col2)` | 返回组中一对数值列的皮尔逊相关系数。 |'
- en: '| `percentile(BIGINT col, p)` | Returns the exact _p_th percentile of a column
    in the group (does not work with floating-point types). `p` must be between 0
    and 1. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `percentile(BIGINT col, p)` | 返回组中列的精确第p个百分位数（不适用于浮点类型）。`p`必须介于0和1之间。 |'
- en: '| `percentile(BIGINT col, array(p1 [, p2]…))` | Returns the exact percentiles
    `p1`, `p2`, … of a column in the group. `pi` must be between 0 and 1. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `percentile(BIGINT col, array(p1 [, p2]…))` | 返回组中列的精确百分位数 `p1`, `p2`, …。
    `pi`必须介于0和1之间。 |'
- en: '| `percentile_approx(DOUBLE col, p [, B])` | Returns an approximate _p_th percentile
    of a numeric column (including floating point types) in the group. The `B` parameter
    controls approximation accuracy at the cost of memory. Higher values yield better
    approximations, and the default is 10,000\. When the number of distinct values
    in `col` is smaller than `B`, this gives an exact percentile value. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `percentile_approx(DOUBLE col, p [, B])` | 返回组中数值列（包括浮点类型）的近似第p个百分位数。 `B`参数控制内存成本下的近似精度。较高的值提供更好的近似值，默认为10,000。当`col`中的唯一值数小于`B`时，这提供精确的百分位数值。
    |'
- en: '| `percentile_approx(DOUBLE col, array(p1 [, p2]…) [, B])` | Same as previous,
    but accepts and returns an array of percentile values instead of a single one.
    |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `percentile_approx(DOUBLE col, array(p1 [, p2]…) [, B])` | 与前一条相同，但接受并返回一个百分位值数组而不是单个值。
    |'
- en: '| `regr_avgx(independent, dependent)` | Equivalent to `avg(dependent)`. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `regr_avgx(independent, dependent)` | 等同于`avg(dependent)`。 |'
- en: '| `regr_avgy(independent, dependent)` | Equivalent to `avg(independent)`. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `regr_avgy(independent, dependent)` | 等同于`avg(independent)`。 |'
- en: '| `regr_count(independent, dependent)` | Returns the number of non-null pairs
    used to fit the linear regression line. |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `regr_count(independent, dependent)` | 返回用于拟合线性回归线的非空对数。 |'
- en: '| `regr_intercept(independent, dependent)` | Returns the y-intercept of the
    linear regression line—that is, the value of `b` in the equation dependent = `a
    * independent + b`. |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `regr_intercept(independent, dependent)` | 返回线性回归线的y截距，即方程dependent = `a
    * independent + b`中的`b`值。 |'
- en: '| `regr_r2(independent, dependent)` | Returns the coefficient of determination
    for the regression. |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `regr_r2(independent, dependent)` | 返回回归的决定系数。 |'
- en: '| `regr_slope(independent, dependent)` | Returns the slope of the linear regression
    line—that is, the value of `a` in the equation dependent = `a * independent +
    b`. |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `regr_slope(independent, dependent)` | 返回线性回归线的斜率，即方程dependent = `a * independent
    + b`中的`a`值。 |'
- en: '| `regr_sxx(independent, dependent)` | Equivalent to `regr_count(independent,
    dependent) * var_pop(dependent)`. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `regr_sxx(independent, dependent)` | 等同于 `regr_count(independent, dependent)
    * var_pop(dependent)`。 |'
- en: '| `regr_sxy(independent, dependent)` | Equivalent to `regr_count(independent,
    dependent) * covar_pop(independent, dependent)`. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `regr_sxy(independent, dependent)` | 等同于 `regr_count(independent, dependent)
    * covar_pop(independent, dependent)`。 |'
- en: '| `regr_syy(independent, dependent)` | Equivalent to `regr_count(independent,
    dependent) * var_pop(independent)`. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `regr_syy(independent, dependent)` | 等同于 `regr_count(independent, dependent)
    * var_pop(independent)`。 |'
- en: '| `histogram_numeric(col, b)` | Computes a histogram of a numeric column in
    the group using `b` non-uniformly spaced bins. The output is an array of size
    `b` of double-valued (x,y) coordinates that represent the bin centers and heights.
    |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `histogram_numeric(col, b)` | 使用 `b` 个非均匀间隔的箱体计算组中数值列的直方图。输出是一个大小为 `b` 的双值（x,
    y）坐标数组，表示箱体的中心和高度。 |'
- en: '| `collect_set(col)` | Returns a set of objects with duplicate elements eliminated.
    |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `collect_set(col)` | 返回一个消除了重复元素的集合。 |'
- en: '| `collect_list(col)` | Returns a list of objects with duplicates. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `collect_list(col)` | 返回一个包含重复对象的列表。 |'
- en: '| `ntile(INTEGER x)` | Divides an ordered partition into `x` groups called
    *buckets* and assigns a bucket number to each row in the partition. This allows
    easy calculation of tertiles, quartiles, deciles, percentiles, and other common
    summary statistics. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `ntile(INTEGER x)` | 将有序分区分为 `x` 组称为*桶*，并为分区中的每行分配一个桶号。这允许轻松计算四分位数、四分位数、十分位数、百分位数和其他常见汇总统计信息。
    |'
- en: '| `explode(ARRAY a)` | Explodes an array to multiple rows. Returns a row-set
    with a single column (`col`), one row for each element from the array. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `explode(ARRAY a)` | 将数组展开为多行。返回一个包含单列（`col`）的行集，数组中的每个元素对应一行。 |'
- en: '| `explode(MAP<Tkey,Tvalue> m)` | Explodes a map to multiple rows. Returns
    a row-set with a two columns (`key`,`value`), one row for each key-value pair
    from the input map. |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `explode(MAP<Tkey,Tvalue> m)` | 将映射展开为多行。返回一个包含两列（`key`，`value`）的行集，输入映射中的每对键值对对应一行。
    |'
- en: '| `posexplode(ARRAY a)` | Explodes an array to multiple rows with additional
    positional column of `int` type (position of items in the original array, starting
    with 0). Returns a row-set with two columns (`pos`,`val`), one row for each element
    from the array. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `posexplode(ARRAY a)` | 将数组展开为多行，并附加一个 `int` 类型的位置列（原始数组中项的位置，从0开始）。返回一个包含两列（`pos`，`val`）的行集，数组中的每个元素对应一行。
    |'
- en: '| `inline(ARRAY<STRUCT<f1:T1,…,fn:Tn>> a)` | Explodes an array of structs to
    multiple rows. Returns a row-set with `N` columns (`N` = number of top-level elements
    in the struct), one row per struct from the array. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `inline(ARRAY<STRUCT<f1:T1,…,fn:Tn>> a)` | 将结构数组展开为多行。返回一个包含 `N` 列（`N` =
    结构中顶级元素的数量）的行集，每个结构对应一行。 |'
- en: '| `stack(int r,T1 V1,…,Tn/r Vn)` | Breaks up `n` values `V1`,…,`Vn` into `r`
    rows. Each row will have `n/r` columns. `r` must be constant. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `stack(int r,T1 V1,…,Tn/r Vn)` | 将 `n` 个值 `V1`,…,`Vn` 分成 `r` 行。每行将有 `n/r`
    列。 `r` 必须是常量。 |'
- en: '| `json_tuple(string jsonStr,string k1,…,string kn)` | Takes JSON string and
    a set of `n` keys, and returns a tuple of `n` values. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `json_tuple(string jsonStr,string k1,…,string kn)` | 接受 JSON 字符串和 `n` 个键，返回一个包含
    `n` 个值的元组。 |'
- en: '| `parse_url_tuple(string urlStr,string p1,…,string pn)` | Takes URL string
    and a set of `n` URL parts, and returns a tuple of `n` values. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `parse_url_tuple(string urlStr,string p1,…,string pn)` | 接受 URL 字符串和 `n`
    个 URL 部分，返回一个包含 `n` 个值的元组。 |'
- en: Chapter 4
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章
- en: MLlib Functions
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MLlib 函数
- en: 'The following table exhibits the ML algorithms supported in `sparklyr`:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 下表展示了 `sparklyr` 支持的机器学习算法：
- en: Classification
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分类
- en: '| Algorithm | Function |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| Algorithm | Function |'
- en: '| --- | --- |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Decision trees | `ml_decision_tree_classifier()` |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| Decision trees | `ml_decision_tree_classifier()` |'
- en: '| Gradient-boosted trees | `ml_gbt_classifier()` |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| Gradient-boosted trees | `ml_gbt_classifier()` |'
- en: '| Linear support vector machines | `ml_linear_svc()` |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| Linear support vector machines | `ml_linear_svc()` |'
- en: '| Logistic regression | `ml_logistic_regression()` |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| Logistic regression | `ml_logistic_regression()` |'
- en: '| Multilayer perceptron | `ml_multilayer_perceptron_classifier()` |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| Multilayer perceptron | `ml_multilayer_perceptron_classifier()` |'
- en: '| Naive-Bayes | `ml_naive_bayes()` |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| Naive-Bayes | `ml_naive_bayes()` |'
- en: '| One vs rest | `ml_one_vs_rest()` |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| One vs rest | `ml_one_vs_rest()` |'
- en: '| Random forests | `ml_random_forest_classifier()` |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| Random forests | `ml_random_forest_classifier()` |'
- en: Regression
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 回归
- en: '| Algorithm | Function |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| Algorithm | Function |'
- en: '| --- | --- |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Accelerated failure time survival regression | `ml_aft_survival_regression()`
    |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| Accelerated failure time survival regression | `ml_aft_survival_regression()`
    |'
- en: '| Decision trees | `ml_decision_tree_regressor()` |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| Decision trees | `ml_decision_tree_regressor()` |'
- en: '| Generalized linear regression | `ml_generalized_linear_regression()` |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| 广义线性回归 | `ml_generalized_linear_regression()` |'
- en: '| Gradient-boosted trees | `ml_gbt_regressor()` |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| 梯度提升树 | `ml_gbt_regressor()` |'
- en: '| Isotonic regression | `ml_isotonic_regression()` |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| 保序回归 | `ml_isotonic_regression()` |'
- en: '| Linear regression | `ml_linear_regression()` |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| 线性回归 | `ml_linear_regression()` |'
- en: Clustering
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 聚类
- en: '| Algorithm | Function |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| 算法 | 函数 |'
- en: '| --- | --- |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Bisecting *k*-means clustering | `ml_bisecting_kmeans()` |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| 二分*k*-均值聚类 | `ml_bisecting_kmeans()` |'
- en: '| Gaussian mixture clustering | `ml_gaussian_mixture()` |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| 高斯混合聚类 | `ml_gaussian_mixture()` |'
- en: '| *k*-means clustering | `ml_kmeans()` |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| *k*-均值聚类 | `ml_kmeans()` |'
- en: '| Latent Dirichlet allocation | `ml_lda()` |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| 潜在狄利克雷分配 | `ml_lda()` |'
- en: Recommendation
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推荐
- en: '| Algorithm | Function |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| 算法 | 函数 |'
- en: '| --- | --- |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Alternating least squares factorization | `ml_als()` |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| 交替最小二乘因子分解 | `ml_als()` |'
- en: Frequent Pattern Mining
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 频繁模式挖掘
- en: '| Algorithm | Function |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| 算法 | 函数 |'
- en: '| --- | --- |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| FPGrowth | `ml_fpgrowth()` |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| FP增长 | `ml_fpgrowth()` |'
- en: Feature Transformers
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特征转换器
- en: '| Transformer | Function |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| 转换器 | 函数 |'
- en: '| --- | --- |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Binarizer | `ft_binarizer()` |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| 二值化 | `ft_binarizer()` |'
- en: '| Bucketizer | `ft_bucketizer()` |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| 桶分割 | `ft_bucketizer()` |'
- en: '| Chi-squared feature selector | `ft_chisq_selector()` |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| 卡方特征选择器 | `ft_chisq_selector()` |'
- en: '| Vocabulary from document collections | `ft_count_vectorizer()` |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 文档集合中的词汇表 | `ft_count_vectorizer()` |'
- en: '| Discrete cosine transform | `ft_discrete_cosine_transform()` |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| 离散余弦变换 | `ft_discrete_cosine_transform()` |'
- en: '| Transformation using `dplyr` | `ft_dplyr_transformer()` |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| 使用`dplyr`进行转换 | `ft_dplyr_transformer()` |'
- en: '| Hadamard product | `ft_elementwise_product()` |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| 哈达玛积 | `ft_elementwise_product()` |'
- en: '| Feature hasher | `ft_feature_hasher()` |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| 特征哈希 | `ft_feature_hasher()` |'
- en: '| Term frequencies using hashing | `export(ft_hashing_tf)` |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| 使用哈希术语频率 | `export(ft_hashing_tf)` |'
- en: '| Inverse document frequency | `ft_idf()` |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| 逆文档频率 | `ft_idf()` |'
- en: '| Imputation for missing values | `export(ft_imputer)` |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| 补全缺失值 | `export(ft_imputer)` |'
- en: '| Index to string | `ft_index_to_string()` |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| 索引到字符串 | `ft_index_to_string()` |'
- en: '| Feature Interaction transform | `ft_interaction()` |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| 特征交互转换 | `ft_interaction()` |'
- en: '| Rescale to [–1, 1] range | `ft_max_abs_scaler()` |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| 缩放到[-1, 1]范围 | `ft_max_abs_scaler()` |'
- en: '| Rescale to [min, max] range | `ft_min_max_scaler()` |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| 缩放到[min, max]范围 | `ft_min_max_scaler()` |'
- en: '| Locality sensitive hashing | `ft_minhash_lsh()` |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| 局部敏感哈希 | `ft_minhash_lsh()` |'
- en: '| Converts to n-grams | `ft_ngram()` |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| 转换为n-gram | `ft_ngram()` |'
- en: '| Normalize using the given P-norm | `ft_normalizer()` |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| 使用给定P-范数进行归一化 | `ft_normalizer()` |'
- en: '| One-hot encoding | `ft_one_hot_encoder()` |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| 独热编码 | `ft_one_hot_encoder()` |'
- en: '| Feature expansion in polynomial space | `ft_polynomial_expansion()` |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| 多项式空间中的特征扩展 | `ft_polynomial_expansion()` |'
- en: '| Maps to binned categorical features | `ft_quantile_discretizer()` |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| 映射到分箱分类特征 | `ft_quantile_discretizer()` |'
- en: '| SQL transformation | `ft_sql_transformer()` |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| SQL转换 | `ft_sql_transformer()` |'
- en: '| Standardizes features using corrected STD | `ft_standard_scaler()` |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| 使用修正的标准化特征 | `ft_standard_scaler()` |'
- en: '| Filters out stop words | `ft_stop_words_remover()` |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| 过滤停用词 | `ft_stop_words_remover()` |'
- en: '| Map to label indices | `ft_string_indexer()` |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| 映射到标签索引 | `ft_string_indexer()` |'
- en: '| Splits by white spaces | `ft_tokenizer()` |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| 按空格切分 | `ft_tokenizer()` |'
- en: '| Combine vectors to row vector | `ft_vector_assembler()` |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| 合并向量为行向量 | `ft_vector_assembler()` |'
- en: '| Indexing categorical feature | `ft_vector_indexer()` |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| 索引分类特征 | `ft_vector_indexer()` |'
- en: '| Subarray of the original feature | `ft_vector_slicer()` |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| 原始特征的子数组 | `ft_vector_slicer()` |'
- en: '| Transform word into code | `ft_word2vec()` |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| 将单词转换为代码 | `ft_word2vec()` |'
- en: Chapter 6
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章
- en: Google Trends for On-Premises (Mainframes), Cloud Computing, and Kubernetes
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google趋势关于On-Premises（主机）、云计算和Kubernetes的数据
- en: The data that created [Figure 6-1](ch06.html#clusters-trends) can be downloaded
    from [*https://bit.ly/2YnHkNI*](https://bit.ly/2YnHkNI).
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 创建[图6-1](ch06.html#clusters-trends)的数据可以从[*https://bit.ly/2YnHkNI*](https://bit.ly/2YnHkNI)下载。
- en: '[PRE4]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Chapter 12
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章
- en: Stream Generator
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流生成器
- en: 'The `stream_generate_test()` function presented in [Chapter 12](ch12.html#streaming)
    creates a local test stream. This function works independently from a Spark connection.
    The following example will create five files in the *source* subfolder. Each file
    will be created 1 second after the previous file’s creation:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 第12章介绍的`stream_generate_test()`函数在[第12章](ch12.html#streaming)中创建了一个本地测试流。此功能独立于Spark连接运行。下面的示例将在*source*子文件夹中每个文件的创建时间间隔为1秒：
- en: '[PRE5]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After the function completes, all of the files should show up in the *source*
    folder. Notice that the file sizes vary: this is so that it simulates what a true
    stream would do:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 函数完成后，所有文件应显示在*源*文件夹中。请注意，文件大小不同：这样可以模拟真实流的行为：
- en: '[PRE6]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `stream_generate_test()` by default creates a single numeric variable DataFrame.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`stream_generate_test()` 默认创建一个单一的数值变量 DataFrame。'
- en: '[PRE8]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Installing Kafka
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Kafka
- en: 'These instructions were compiled using information from the current Quickstart
    page of the [official Kafka site](https://kafka.apache.org/quickstart). (Newer
    versions of Kafka will undoubtedly be available not long after this book is published.)
    The idea here is to “timestamp” the versions used in the example in [“Kafka”](ch12.html#franz):'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这些说明是使用来自[官方 Kafka 网站](https://kafka.apache.org/quickstart)当前快速入门页面的信息编制的。（此书出版后不久，将会有更新版本的
    Kafka 可用。）这里的想法是在[“Kafka”](ch12.html#franz)示例中“时间戳”使用的版本：
- en: Download Kafka.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 Kafka。
- en: '[PRE10]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Expand the *tar* file and enter the new folder.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开*tar*文件并进入新文件夹。
- en: '[PRE11]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Start the Zookeeper service that comes with Kafka.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动随 Kafka 一起提供的 Zookeeper 服务。
- en: '[PRE12]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Start the Kafka service.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Kafka 服务。
- en: '[PRE13]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Make sure to always start Zookeeper first, and then Kafka.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 确保始终先启动 Zookeeper，然后再启动 Kafka。

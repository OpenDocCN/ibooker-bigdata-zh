- en: 'File System, Part 9: Disk blocks example'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件系统，第9部分：磁盘块示例
- en: Under construction
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正在建设中
- en: Please can you explain a simple model of how the file's content is stored in
    a simple i-node based filesystem?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请问您能解释一下基于简单i-node的文件系统中文件内容是如何存储的吗？
- en: Sure! To answer this question, we'll build a virtual disk and then write some
    C code to access its contents. Our filesystem will divide the bytes available
    into space for inodes and a much larger space for disk blocks. Each disk block
    will be 4096 bytes-
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当然！为了回答这个问题，我们将构建一个虚拟磁盘，然后编写一些C代码来访问其内容。我们的文件系统将把可用的字节划分为inode的空间和一个更大的磁盘块空间。每个磁盘块将是4096字节-
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note for clarity we will not use 'unsigned' in this code example. Our fixed-sized
    inodes will contain the file's size in bytes, permission, user, group information,
    time meta-data. What is most relevant to the problem-at hand is that it will also
    include ten pointers to disk blocks that we will use to refer to the actual file's
    contents!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰起见，我们在这个代码示例中不会使用'unsigned'。我们的固定大小的inode将包含文件的字节大小，权限，用户，组信息，时间元数据。对于手头的问题最相关的是，它还将包括十个指向磁盘块的指针，我们将用它们来引用实际文件的内容！
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we can work out how to read a byte at offset `position` of our file:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以解决如何读取文件偏移量`position`处的一个字节：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Our initial version of lookup_physical_block is simple - we can use our table
    of 10 direct blocks!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的lookup_physical_block的初始版本很简单-我们可以使用我们的10个直接块的表！
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This simple representation is reasonable provided we can represent all possible
    files with just ten blocks i.e. up to 40KB. What about larger files? We need the
    inode struct to always be the same size so just increasing the existing direct
    block array to 20 would roughly double the size of our inodes. If most of our
    files require less than 10 blocks, then our inode storage is now wasteful. To
    solve this problem we will use a disk block called the *indirect block* to extend
    the array of pointers at our disposal. We will only need this for files > 40KB
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单的表示是合理的，只要我们可以用十个块来表示所有可能的文件，即最多40KB。那么更大的文件呢？我们需要inode结构始终保持相同的大小，因此只是将现有的直接块数组增加到20个，大致会使我们的inode大小翻倍。如果我们大多数的文件需要少于10个块，那么我们的inode存储现在就是浪费的。为了解决这个问题，我们将使用一个称为*间接块*的磁盘块来扩展我们可以使用的指针数组。我们只需要这个来处理大于40KB的文件。
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The indirect block is just a regular disk block of 4096 bytes, but we will
    use it to hold pointers to disk blocks. Our pointers in this case are just integers,
    so we need to cast the pointer to an integer pointer:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 间接块只是一个普通的磁盘块，但我们将用它来保存指向磁盘块的指针。在这种情况下，我们的指针只是整数，因此我们需要将指针转换为整数指针：
- en: '[PRE5]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For a typical filesystem, our index values are 32 bits i.e. 4bytes. Thus in
    4096 bytes we can store 4096 / 4 = 1024 entries. This means our indirect block
    can refer to 1024 * 4KB = 4MB of data. With the first ten direct blocks, we can
    therefore accommodate files up to 40KB + 1024 * 4KB= 4136KB . Some of the later
    table entries can be invalid for files that are smaller than this.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于典型的文件系统，我们的索引值是32位，即4字节。因此，在4096字节中，我们可以存储4096 / 4 = 1024个条目。这意味着我们的间接块可以引用1024
    * 4KB = 4MB的数据。通过前面的十个直接块，因此我们可以容纳文件大小达到40KB + 1024 * 4KB= 4136KB。对于小于这个大小的文件，一些后面的表条目可能无效。
- en: For even larger files, we could use two indirect blocks. However there's a better
    alternative, that will allow us to efficiently scale up to huge files. We will
    include a double-indirect pointer and if that's not enough a triple indirect pointer.
    The double indirect pointer means we have a table of 1024 entries to disk blocks
    that are used as 1024 entries. This means we can refer to 1024*1024 disk blocks
    of data.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更大的文件，我们可以使用两个间接块。然而，有一个更好的选择，可以让我们有效地扩展到大文件。我们将包括一个双间接指针，如果这还不够，还有一个三重间接指针。双间接指针意味着我们有一个包含用作1024个条目的磁盘块的1024个条目的表。这意味着我们可以引用1024*1024个数据块。
- en: '![inode disk blocks for data](../Images/c012049198839822b4b9b3716bf1ddff.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![inode磁盘块用于数据](../Images/c012049198839822b4b9b3716bf1ddff.jpg)'
- en: '(source: [http://uw714doc.sco.com/en/FS_admin/graphics/s5chain.gif](http://uw714doc.sco.com/en/FS_admin/graphics/s5chain.gif))'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: (来源：[http://uw714doc.sco.com/en/FS_admin/graphics/s5chain.gif](http://uw714doc.sco.com/en/FS_admin/graphics/s5chain.gif))
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that reading a byte using double indirect requires 3 disk block reads
    (two tables and the actual data block).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用双间接读取一个字节需要3次磁盘块读取（两个表和实际数据块）。

- en: 'C Programming, Part 3: Common Gotchas'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C编程，第3部分：常见陷阱
- en: What common mistakes do C programmers make?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: C程序员常犯哪些常见错误？
- en: Memory mistakes
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存错误
- en: String constants are constant
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串常量是常量
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'String literals are character arrays stored in the code segment of the program,
    which is immutable. Two string literals may share the same space in memory. An
    example follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串文字是存储在程序的代码段中的字符数组，是不可变的。两个字符串文字可能共享内存中的相同空间。以下是一个例子：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The strings pointed to by `str1` and `str2` may actually reside in the same
    location in memory.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由`str1`和`str2`指向的字符串实际上可能驻留在内存中的相同位置。
- en: Char arrays, however, contain the literal value which has been copied from the
    code segment into either the stack or static memory. These following char arrays
    do not reside in the same place in memory.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，char数组包含了从代码段复制到堆栈或静态内存中的文字值。以下char数组不驻留在内存中的相同位置。
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Buffer overflow/ underflow
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓冲区溢出/下溢
- en: '[PRE3]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: C does not check that pointers are valid. The above example writes into `array[10]`
    which is outside the array bounds. This can cause memory corruption because that
    memory location is probably being used for something else. In practice, this can
    be harder to spot because the overflow/underflow may occur in a library call e.g.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: C语言不检查指针是否有效。上面的例子写入了`array[10]`，这超出了数组边界。这可能会导致内存损坏，因为该内存位置可能正在用于其他用途。实际上，这可能更难发现，因为溢出/下溢可能发生在库调用中。
- en: '[PRE4]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Returning pointers to automatic variables
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回指向自动变量的指针
- en: '[PRE5]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Automatic variables are bound to stack memory only for the lifetime of the function.
    After the function returns it is an error to continue to use the memory.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 自动变量仅绑定到函数的堆栈内存，函数的生命周期结束后继续使用内存是错误的。
- en: Insufficient memory allocation
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存分配不足
- en: '[PRE6]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the above example, we needed to allocate enough bytes for the struct. Instead
    we allocated enough bytes to hold a pointer. Once we start using the user pointer
    we will corrupt memory. Correct code is shown below.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们需要为结构体分配足够的字节。相反，我们分配了足够的字节来容纳一个指针。一旦我们开始使用用户指针，就会破坏内存。正确的代码如下所示。
- en: '[PRE7]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Strings require `strlen(s)+1` bytes
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 字符串需要`strlen(s)+1`字节
- en: 'Every string must have a null byte after the last characters. To store the
    string `"Hi"` it takes 3 bytes: `[H] [i] [\0]`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每个字符串在最后一个字符后必须有一个空字节。存储字符串`"Hi"`需要3个字节：`[H] [i] [\0]`。
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using uninitialized variables
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用未初始化的变量
- en: '[PRE9]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Automatic variables hold garbage (whatever bit pattern happened to be in memory).
    It is an error to assume that it will always be initialized to zero.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 自动变量保存垃圾（内存中发生的任何位模式）。假设它总是初始化为零是错误的。
- en: Assuming Uninitialized memory will be zeroed
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 假设未初始化的内存将被清零
- en: '[PRE10]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Automatic (temporary variables) are not automatically initialized to zero. Heap
    allocations using malloc are not automatically initialized to zero.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 自动（临时变量）不会自动初始化为零。使用malloc进行堆分配不会自动初始化为零。
- en: Double-free
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 双重释放
- en: '[PRE11]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It is an error to free the same block of memory twice.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 多次释放同一块内存是错误的。
- en: Dangling pointers
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 悬空指针
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Pointers to freed memory should not be used. A defensive programming practice
    is to set pointers to null as soon as the memory is freed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不应使用指向释放内存的指针。一种防御性编程实践是在释放内存后立即将指针设置为null。
- en: It is a good idea to turn free into the following snippet that automatically
    sets the freed variable to null right after:(vim - ultisnips)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将免费转换为以下片段是一个好主意，它会自动将释放的变量设置为null：（vim - ultisnips）
- en: '[PRE13]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Logic and Program flow mistakes
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑和程序流错误
- en: Forgetting break
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 忘记break
- en: '[PRE14]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Case statements without a break will just continue onto the code of the next
    case statement. Correct code is show below. The break for the last statements
    is unnecessary because there are no more cases to be executed after the last one.
    However if more are added, it can cause some bugs.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 没有break的case语句将继续执行下一个case语句的代码。正确的代码如下所示。最后一个语句的break是不必要的，因为在最后一个语句之后没有更多的要执行的情况。但是，如果添加了更多的情况，可能会导致一些错误。
- en: '[PRE15]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Equal vs. equality
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 等号和相等
- en: '[PRE16]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Undeclared or incorrectly prototyped functions
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未声明或错误声明的函数
- en: '[PRE17]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The system function 'time' actually takes a parameter (a pointer to some memory
    that can receive the time_t structure). The compiler did not catch this error
    because the programmer did not provide a valid function prototype by including
    `time.h`
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 系统函数'time'实际上需要一个参数（一个指向可以接收time_t结构的一些内存的指针）。编译器没有捕获到这个错误，因为程序员没有通过包含`time.h`提供有效的函数原型。
- en: Extra Semicolons
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外的分号
- en: '[PRE18]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: However, the following code is perfectly OK.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，以下代码是完全可以的。
- en: '[PRE19]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: It is OK to have this kind of code, because the C language uses semicolons (;)
    to separate statements. If there is no statement in between semicolons, then there
    is nothing to do and the compiler moves on to the next statement
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这种代码是可以的，因为C语言使用分号（;）来分隔语句。如果分号之间没有语句，那么就没有要做的事情，编译器会继续执行下一条语句。
- en: Other Gotchas
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他陷阱
- en: Preprocessor
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预处理器
- en: What is the preprocessor? It is an operation that the compiler performs **before**
    actually compiling the program. It is a copy and paste command. Meaning that if
    I do the following.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理器是什么？它是编译器在**实际编译**程序之前执行的操作。它是一个复制和粘贴命令。这意味着如果我做以下操作。
- en: '[PRE20]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: After preprocessing, it'll look like this.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理后，它会变成这样。
- en: '[PRE21]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: C Preprocessor macros and side-effects
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C预处理宏和副作用
- en: '[PRE22]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Macros are simple text substitution so the above example expands to `x++ <
    100 ? x++ : 100` (parenthesis omitted for clarity)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '宏是简单的文本替换，因此上面的例子会扩展为`x++ < 100 ? x++ : 100`（为了清晰起见省略了括号）'
- en: C Preprocessor macros and precedence
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C预处理宏和优先级
- en: '[PRE23]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Macros are simple text substitution so the above example expands to `10 + 99
    < 100 ? 99 : 100`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '宏是简单的文本替换，因此上面的例子会扩展为`10 + 99 < 100 ? 99 : 100`'
- en: C Preprocessor logical gotcha
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C预处理逻辑陷阱
- en: '[PRE24]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: What is wrong with the macro? Well it works if we have a static array like the
    first array because sizeof a static array returns the bytes that array takes up,
    and dividing it by the sizeof(an_element) would give you the number of entries.
    But if we use a pointer to a piece of memory, taking the sizeof the pointer and
    dividing it by the size of the first entry won't always give us the size of the
    array.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 宏有什么问题？如果我们有一个像第一个数组那样的静态数组，它就能工作，因为静态数组的sizeof返回数组占用的字节数，将其除以sizeof(an_element)将给出条目的数量。但是，如果我们使用指向内存块的指针，取指针的sizeof并将其除以第一个条目的大小并不总是会给出数组的大小。
- en: Does `sizeof` do anything?
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`sizeof` 有什么作用吗？'
- en: '[PRE25]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: What does the code print out?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 代码打印出什么？
- en: '[PRE26]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Because sizeof is not actually evaluated at runtime. The compiler assigns the
    type of all expressions and discards the extra results of the expression.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因为sizeof实际上不是在运行时评估的。编译器为所有表达式分配类型并丢弃表达式的额外结果。
- en: '[Back: C Programming, Part 2: Text Input And Output](https://github.com/angrave/SystemProgramming/wiki/C-Programming,-Part-2:-Text-Input-And-Output)
    | [Next: C Programming, Part 4: Strings and Structs](https://github.com/angrave/SystemProgramming/wiki/C-Programming%2C-Part-4%3A-Strings-and-Structs)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回：C编程，第2部分：文本输入和输出](https://github.com/angrave/SystemProgramming/wiki/C-Programming,-Part-2:-Text-Input-And-Output)
    | [下一个：C编程，第4部分：字符串和结构体](https://github.com/angrave/SystemProgramming/wiki/C-Programming%2C-Part-4%3A-Strings-and-Structs)'

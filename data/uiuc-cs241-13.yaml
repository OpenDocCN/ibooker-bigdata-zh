- en: C Programming, Review Questions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C编程，复习问题
- en: Topics
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主题
- en: C Strings representation
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C字符串表示
- en: C Strings as pointers
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C字符串作为指针
- en: char p[]vs char* p
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: char p[]vs char* p
- en: Simple C string functions (strcmp, strcat, strcpy)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的C字符串函数（strcmp，strcat，strcpy）
- en: sizeof char
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sizeof char
- en: sizeof x vs x*
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sizeof x vs x*
- en: Heap memory lifetime
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆内存寿命
- en: Calls to heap allocation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆分配调用
- en: Deferencing pointers
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解引用指针
- en: Address-of operator
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取地址运算符
- en: Pointer arithmetic
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指针算术
- en: String duplication
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串复制
- en: String truncation
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串截断
- en: double-free error
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双重释放错误
- en: String literals
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串字面值
- en: Print formatting.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印格式。
- en: memory out of bounds errors
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存越界错误
- en: static memory
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态内存
- en: fileio POSIX v C library
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: fileio POSIX v C库
- en: C io fprintf and printf
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C io fprintf和printf
- en: POSIX file io (read|write|open)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POSIX文件io（读|写|打开）
- en: Buffering of stdout
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: stdout的缓冲
- en: Questions/Exercises
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题/练习
- en: What does the following print out
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下打印出什么
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What are the differences between the following two declarations? What does `sizeof`
    return for one of them?
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下两个声明之间有什么区别？其中一个的`sizeof`返回什么？
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What is a string in c?
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C中的字符串是什么？
- en: 'Code up a simple `my_strcmp`. How about `my_strcat`, `my_strcpy`, or `my_strdup`?
    Bonus: Code the functions while only going through the strings *once*.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个简单的`my_strcmp`。`my_strcat`，`my_strcpy`或`my_strdup`呢？奖励：只通过字符串*一次*编写函数。
- en: What should the following usually return?
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下通常应该返回什么？
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What is `malloc`? How is it different than `calloc`. Once memory is `malloc`ed
    how can I use `realloc`?
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是`malloc`？它与`calloc`有什么不同。一旦内存被`malloc`，我如何使用`realloc`？
- en: What is the `&` operator? How about `*`?
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`&`运算符是什么？`*`呢？'
- en: Pointer Arithmetic. Assume the following addresses. What are the following shifts?
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指针算术。假设以下地址。以下移位是什么？
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How do we prevent double free errors?
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何防止双重释放错误？
- en: What is the printf specifier to print a string, `int`, or `char`?
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印字符串，`int`或`char`的printf格式说明符是什么？
- en: Is the following code valid? If so, why? Where is `output` located?
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下代码有效吗？如果是，为什么？`output`位于哪里？
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Write a function that accepts a string and opens that file prints out the file
    40 bytes at a time but every other print reverses the string (try using POSIX
    API for this).
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个接受字符串并打开该文件的函数，每次打印出文件的40个字节，但每隔一次打印都会颠倒字符串（尝试使用POSIX API实现）。
- en: What are some differences between the POSIX filedescriptor model and C's `FILE*`
    (ie what function calls are used and which is buffered)? Does POSIX use C's `FILE*`
    internally or vice versa?
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: POSIX文件描述符模型和C的`FILE*`之间有哪些区别（即使用了哪些函数调用，哪个是缓冲的）？POSIX内部使用C的`FILE*`还是反之亦然？
- en: '[Back: C Programming, Part 5: Debugging](https://github.com/angrave/SystemProgramming/wiki/C-Programming%2C-Part-5%3A-Debugging)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[返回：C编程，第5部分：调试](https://github.com/angrave/SystemProgramming/wiki/C-Programming%2C-Part-5%3A-Debugging)'

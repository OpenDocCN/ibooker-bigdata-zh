- en: 'Synchronization, Part 7: The Reader Writer Problem'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步，第7部分：读者写者问题
- en: What is the Reader Writer Problem?
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读者写者问题是什么？
- en: Imagine you had a key-value map data structure which is used by many threads.
    Multiple threads should be able to look up (read) values at the same time provided
    the data structure is not being written to. The writers are not so gregarious
    - to avoid data corruption, only one thread at a time may modify (`write`) the
    data structure (and no readers may be reading at that time).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您有一个键值映射数据结构，被许多线程使用。只要数据结构没有被写入，多个线程应该能够同时查找（读取）值。写者不那么合群-为了避免数据损坏，一次只有一个线程可以修改（`write`）数据结构（此时不能有读者正在读取）。
- en: This is an example of the *Reader Writer Problem*. Namely how can we efficiently
    synchronize multiple readers and writers such that multiple readers can read together
    but a writer gets exclusive access?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是*读者写者问题*的一个例子。也就是说，我们如何有效地同步多个读者和写者，以便多个读者可以一起阅读，但写者可以获得独占访问？
- en: 'An incorrect attempt is shown below ("lock" is a shorthand for `pthread_mutex_lock`):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示了一个不正确的尝试（“锁”是`pthread_mutex_lock`的简写）：
- en: 'Attempt #1'
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试＃1
- en: '|'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: At least our first attempt does not suffer from data corruption (readers must
    wait while a writer is writing and vice versa)! However readers must also wait
    for other readers. So let's try another implementation..
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 至少我们的第一次尝试不会遭受数据损坏（读者必须在写者写作时等待，反之亦然）！但是读者也必须等待其他读者。所以让我们尝试另一种实现..
- en: 'Attempt #2:'
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试＃2：
- en: '|'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'Our second attempt suffers from a race condition - imagine if two threads both
    called `read` and `write` (or both called write) at the same time. Both threads
    would be able to proceed! Secondly, we can have multiple readers and multiple
    writers, so lets keep track of the total number of readers or writers. Which brings
    us to attempt #3,'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第二次尝试遭受了竞争条件的影响-想象一下，如果两个线程同时调用`read`和`write`（或同时调用write）。两个线程都将能够继续进行！其次，我们可以有多个读者和多个写者，因此让我们跟踪读者或写者的总数。这就是我们尝试＃3，
- en: 'Attempt #3'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试＃3
- en: Remember that `pthread_cond_wait` performs *Three* actions. Firstly it atomically
    unlocks the mutex and then sleeps (until it is woken by `pthread_cond_signal`
    or `pthread_cond_broadcast`). Thirdly the awoken thread must re-acquire the mutex
    lock before returning. Thus only one thread can actually be running inside the
    critical section defined by the lock and unlock() methods.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`pthread_cond_wait`执行*三*个动作。首先，它会原子解锁互斥锁，然后休眠（直到被`pthread_cond_signal`或`pthread_cond_broadcast`唤醒）。第三，唤醒的线程必须在返回之前重新获取互斥锁。因此，只有一个线程实际上可以在由lock和unlock()方法定义的临界区域内运行。
- en: 'Implementation #3 below ensures that a reader will enter the cond_wait if there
    are any writers writing.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的实现＃3确保如果有任何写者在写作，读者将进入cond_wait。
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'However only one reader a time can read because candidate #3 did not unlock
    the mutex. A better version unlocks before reading :'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但是因为候选＃3在读取之前没有解锁互斥锁，所以一次只能有一个读者读取。更好的版本在读取之前解锁：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Does this mean that a writer and read could read and write at the same time?
    No! First of all, remember cond_wait requires the thread re-acquire the mutex
    lock before returning. Thus only one thread can be executing code inside the critical
    section (marked with **) at a time!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否意味着写者和读者可以同时读和写？不！首先，记住cond_wait要求线程在返回之前重新获取互斥锁。因此，只有一个线程可以在临界区域（用**标记）内执行代码！
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Writers must wait for everyone. Mutual exclusion is assured by the lock.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 写者必须等待所有人。互斥由锁来保证。
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Candidate #3 above also uses `pthread_cond_signal` ; this will only wake up
    one thread. For example, if many readers are waiting for the writer to complete
    then only one sleeping reader will be awoken from their slumber. The reader and
    writer should use `cond_broadcast` so that all threads should wake up and check
    their while-loop condition.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述候选＃3还使用`pthread_cond_signal`；这只会唤醒一个线程。例如，如果许多读者正在等待写者完成，那么只有一个正在睡眠的读者将被唤醒。读者和写者应该使用`cond_broadcast`，以便所有线程都应该唤醒并检查它们的while循环条件。
- en: Starving writers
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 饥饿的写者
- en: 'Candidate #3 above suffers from starvation. If readers are constantly arriving
    then a writer will never be able to proceed (the ''reading'' count never reduces
    to zero). This is known as *starvation* and would be discovered under heavy loads.
    Our fix is to implement a bounded-wait for the writer. If a writer arrives they
    will still need to wait for existing readers however future readers must be placed
    in a "holding pen" and wait for the writer to finish. The "holding pen" can be
    implemented using a variable and a condition variable (so that we can wake up
    the threads once the writer has finished).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上述候选＃3遭受饥饿。如果读者不断到来，那么写者将永远无法继续进行（“读取”计数永远不会减少到零）。这被称为*饥饿*，并且在重负载下会被发现。我们的修复方法是为写者实现有界等待。如果写者到达，他们仍然需要等待现有的读者，但是未来的读者必须被放置在“等待区”中等待写者完成。可以使用变量和条件变量来实现“等待区”（以便我们可以在写者完成后唤醒线程）。
- en: Our plan is that when a writer arrives, and before waiting for current readers
    to finish, register our intent to write (by incrementing a counter 'writer').
    Sketched below -
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的计划是，当写者到达并在等待当前读者完成之前，注册我们的写入意图（通过增加计数器'writer'）。下面是草图-
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And incoming readers will not be allowed to continue while writer is nonzero.
    Notice 'writer' indicates a writer has arrived, while 'reading' and 'writing'
    counters indicate there is an *active* reader or writer.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 并且当写者为非零时，传入的读者将不被允许继续。请注意，“写者”表示写者已到达，而“读取”和“写入”计数器表示有*活动*读者或写者。
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Attempt #4'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试＃4
- en: Below is our first working solution to the Reader-Writer problem. Note if you
    continue to read about the "Reader Writer problem" then you will discover that
    we solved the "Second Reader Writer problem" by giving writers preferential access
    to the lock. This solution is not optimal. However it satisfies our original problem
    (N active readers, single active writer, avoids starvation of the writer if there
    is a constant stream of readers).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们对读者-写者问题的第一个工作解决方案。请注意，如果你继续阅读关于“读者写者问题”的内容，你会发现我们通过给予写者对锁的优先访问来解决了“第二个读者写者问题”。这个解决方案并不是最佳的。然而，它满足了我们最初的问题（N个活跃读者，单个活跃写者，避免了如果有持续的读者流的话写者饥饿）。
- en: Can you identify any improvements? For example, how would you improve the code
    so that we only woke up readers or one writer?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你能识别出任何改进吗？例如，你会如何改进代码，以便我们只唤醒读者或一个写者？
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
